var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.083,1,0.69]],["body/interfaces/Coordinates.html",[0,0.147,1,1.088,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.538,9,0.39,10,0.806,11,1.46,12,1.46,13,0.97,14,0.532,15,0.04,16,0.55,17,0.292,18,0.584,19,0.519,20,0.584,21,0.777,22,0.874,23,0.897,24,0.584,25,0.891,26,0.584,27,0.891,28,0.595,29,0.891,30,0.891,31,0.519,32,0.23,33,1.206,34,0.727,35,0.966,36,1.068,37,0.891,38,1.068,39,0.347,40,0.584,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.27,47,0.701,48,0.891,49,0.595,50,0.39,51,0.595,52,0.701,53,0.39,54,1.206,55,0.595,56,1.186,57,0.485,58,0.727,59,0.4,60,0.532,61,0.347,62,0.39,63,0.39,64,0.39,65,0.791,66,0.966,67,0.906,68,0.727,69,0.538,70,0.778,71,0.538,72,1.186,73,0.538,74,0.538,75,1.186,76,0.806,77,1.393,78,0.872,79,0.39,80,0.806,81,0.799,82,0.799,83,0.708,84,1.334,85,1.422,86,0.966,87,0.891,88,0.891,89,0.538,90,0.836,91,1.27,92,0.306,93,0.538,94,0.344,95,0.485,96,0.39,97,0.595,98,0.538,99,0.595,100,0.267,101,0.584,102,0.806,103,0.891,104,0.932,105,0.538,106,0.595,107,0.538,108,0.538,109,0.806,110,1.073,111,0.595,112,0.413,113,0.966,114,0.806,115,0.538,116,0.595,117,0.778,118,0.347,119,0.39,120,0.519,121,0.584,122,0.711,123,0.966,124,0.436,125,0.595,126,0.347,127,0.538,128,0.74,129,0.538,130,0.595,131,0.519,132,0.347,133,0.595,134,0.538,135,1.27,136,0.538,137,0.485,138,0.538,139,0.595,140,0.538,141,0.595,142,0.595,143,0.595,144,0.538,145,0.595,146,0.595,147,0.595,148,0.806,149,0.538,150,0.595,151,0.538,152,0.595,153,0.595,154,0.595,155,0.538,156,0.538,157,0.538,158,0.595,159,0.485,160,0.538,161,0.595,162,0.966,163,1.383,164,1.251,165,0.891,166,0.891,167,0.595,168,0.595,169,0.538,170,0.777,171,0.806,172,0.623,173,0.538,174,0.595,175,0.595,176,0.538,177,0.887,178,0.436,179,0.538,180,0.538,181,0.595,182,0.595,183,0.538,184,0.538,185,0.538,186,0.538,187,0.538,188,1.251,189,0.595,190,1.068,191,0.595,192,1.089,193,0.595,194,0.891,195,1.628,196,0.806,197,0.806,198,0.891,199,0.891,200,0.891,201,0.891,202,0.891,203,0.891,204,0.595,205,0.891,206,0.891,207,0.931,208,0.538,209,0.39,210,0.39,211,0.347,212,0.595,213,0.701,214,0.595,215,0.39,216,0.891,217,1.096,218,0.595,219,0.595,220,0.891,221,0.595,222,0.538,223,0.538,224,0.595,225,0.595,226,0.538,227,0.595,228,0.538,229,0.595,230,0.891,231,0.907,232,0.595,233,0.538,234,0.538,235,0.436,236,0.595,237,0.538,238,0.891,239,0.595,240,0.595,241,0.595,242,0.595,243,0.595,244,0.595,245,0.538,246,0.891,247,1.186,248,1.186,249,1.27,250,0.891,251,0.891,252,1.068,253,0.595,254,1.27,255,1.186,256,0.891,257,0.595,258,0.833,259,0.306,260,1.048,261,0.595,262,0.595,263,0.595,264,0.778,265,0.595,266,1.068,267,0.595,268,0.833,269,0.595,270,0.595,271,0.595,272,0.595,273,0.595,274,0.595,275,0.595,276,0.595,277,1.186,278,0.891,279,0.595,280,1.186,281,0.891,282,0.595,283,0.595,284,0.595,285,0.595,286,0.595,287,0.623,288,0.595,289,1.068,290,1.068,291,1.068,292,0.595,293,1.068,294,1.068,295,0.595,296,1.068,297,0.891,298,0.891,299,0.891,300,0.595,301,0.891,302,0.891,303,0.595,304,0.891,305,0.891,306,0.595,307,0.595,308,0.595,309,1.068,310,0.595,311,0.595,312,0.595,313,0.595,314,0.595,315,0.595,316,0.595,317,0.39,318,0.584,319,0.584,320,0.595,321,0.347,322,0.39,323,1.186,324,0.595,325,0.595,326,1.186,327,1.334,328,0.891,329,0.595,330,0.595,331,0.595,332,0.595,333,1.068,334,0.595,335,0.891,336,0.595,337,0.538,338,0.538,339,0.595,340,0.595,341,0.595,342,0.595,343,0.595,344,0.595,345,0.595,346,0.595,347,0.891,348,0.595,349,0.595,350,0.595,351,0.595,352,0.595,353,0.891,354,0.595,355,0.595,356,0.595,357,0.891,358,0.595,359,0.595,360,0.595,361,0.595,362,0.595,363,0.595,364,1.068,365,0.595,366,0.891,367,0.595,368,0.595,369,0.595,370,0.701,371,0.595,372,0.595,373,0.595,374,0.39,375,0.595,376,0.595,377,0.595,378,0.595,379,0.595,380,0.595,381,0.584,382,0.595,383,0.595,384,0.595,385,0.595,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.39,402,0.891,403,0.595,404,0.595,405,0.595,406,0.595,407,0.595,408,1.186,409,1.068,410,0.595,411,0.595,412,0.595,413,0.932,414,0.595,415,0.595,416,0.595,417,0.595,418,0.595,419,0.595,420,0.891,421,0.595,422,0.595,423,0.595,424,0.595,425,0.595,426,0.595,427,0.891,428,1.334,429,0.891,430,0.891,431,0.595,432,0.595,433,0.891,434,0.891,435,0.891,436,0.595,437,1.068,438,0.891,439,0.595,440,1.27,441,1.186,442,1.27,443,1.068,444,1.068,445,0.595,446,1.27,447,0.595,448,0.891,449,0.595,450,0.595,451,0.595,452,0.595,453,0.595,454,0.595,455,0.595,456,1.068,457,0.595,458,0.891,459,0.891,460,0.595,461,0.595,462,0.891,463,0.891,464,0.595,465,0.595,466,0.595,467,0.595,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.891,477,0.595,478,0.538,479,0.891,480,0.595,481,0.595,482,0.595,483,0.595,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.891,498,0.891,499,0.891,500,0.891,501,0.891,502,0.891,503,0.538,504,0.595,505,0.891,506,0.891,507,0.595,508,0.595,509,0.595,510,1.186,511,0.891,512,0.595,513,0.595,514,0.595,515,0.595,516,0.595,517,0.891,518,0.595,519,0.595,520,0.891,521,0.595,522,0.595,523,0.02,524,0.02]],["title/modules/DragAndDropModule.html",[525,2.182,526,1.708]],["body/modules/DragAndDropModule.html",[3,0.672,4,0.586,5,0.586,6,0.505,7,0.327,15,0.039,16,0.63,32,0.505,59,0.743,60,0.586,61,0.762,65,0.672,94,0.505,95,1.351,523,0.034,524,0.034,526,3.037,527,3.369,528,4.742,529,4.742,530,4.509,531,2.998,532,5.462,533,4.509,534,4.742,535,4.742]],["title/interfaces/DragAxis.html",[0,0.083,66,0.765]],["body/interfaces/DragAxis.html",[0,0.147,1,1.037,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.538,9,0.39,10,0.806,11,1.46,12,1.46,13,0.961,14,0.532,15,0.04,16,0.55,17,0.292,18,0.584,19,0.519,20,0.584,21,0.777,22,0.874,23,0.897,24,0.584,25,0.891,26,0.584,27,0.891,28,0.595,29,0.891,30,0.891,31,0.519,32,0.23,33,1.206,34,0.727,35,0.966,36,1.068,37,0.891,38,1.068,39,0.347,40,0.584,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.27,47,0.701,48,0.891,49,0.595,50,0.39,51,0.595,52,0.701,53,0.39,54,1.206,55,0.595,56,1.186,57,0.485,58,0.727,59,0.4,60,0.532,61,0.347,62,0.39,63,0.39,64,0.39,65,0.791,66,1.073,67,0.931,68,0.727,69,0.538,70,0.778,71,0.538,72,1.186,73,0.538,74,0.538,75,1.186,76,0.806,77,1.393,78,0.872,79,0.39,80,0.806,81,0.799,82,0.799,83,0.708,84,1.334,85,1.422,86,0.966,87,0.891,88,0.891,89,0.538,90,0.836,91,1.27,92,0.306,93,0.538,94,0.344,95,0.485,96,0.39,97,0.595,98,0.538,99,0.595,100,0.267,101,0.584,102,0.806,103,0.891,104,0.932,105,0.538,106,0.595,107,0.538,108,0.538,109,0.806,110,1.073,111,0.595,112,0.413,113,0.966,114,0.806,115,0.538,116,0.595,117,0.778,118,0.347,119,0.39,120,0.519,121,0.584,122,0.711,123,0.966,124,0.436,125,0.595,126,0.347,127,0.538,128,0.74,129,0.538,130,0.595,131,0.519,132,0.347,133,0.595,134,0.538,135,1.27,136,0.538,137,0.485,138,0.538,139,0.595,140,0.538,141,0.595,142,0.595,143,0.595,144,0.538,145,0.595,146,0.595,147,0.595,148,0.806,149,0.538,150,0.595,151,0.538,152,0.595,153,0.595,154,0.595,155,0.538,156,0.538,157,0.538,158,0.595,159,0.485,160,0.538,161,0.595,162,0.966,163,1.383,164,1.251,165,0.891,166,0.891,167,0.595,168,0.595,169,0.538,170,0.777,171,0.806,172,0.623,173,0.538,174,0.595,175,0.595,176,0.538,177,0.887,178,0.436,179,0.538,180,0.538,181,0.595,182,0.595,183,0.538,184,0.538,185,0.538,186,0.538,187,0.538,188,1.251,189,0.595,190,1.068,191,0.595,192,1.089,193,0.595,194,0.891,195,1.628,196,0.806,197,0.806,198,0.891,199,0.891,200,0.891,201,0.891,202,0.891,203,0.891,204,0.595,205,0.891,206,0.891,207,0.931,208,0.538,209,0.39,210,0.39,211,0.347,212,0.595,213,0.701,214,0.595,215,0.39,216,0.891,217,1.096,218,0.595,219,0.595,220,0.891,221,0.595,222,0.538,223,0.538,224,0.595,225,0.595,226,0.538,227,0.595,228,0.538,229,0.595,230,0.891,231,0.907,232,0.595,233,0.538,234,0.538,235,0.436,236,0.595,237,0.538,238,0.891,239,0.595,240,0.595,241,0.595,242,0.595,243,0.595,244,0.595,245,0.538,246,0.891,247,1.186,248,1.186,249,1.27,250,0.891,251,0.891,252,1.068,253,0.595,254,1.27,255,1.186,256,0.891,257,0.595,258,0.833,259,0.306,260,1.048,261,0.595,262,0.595,263,0.595,264,0.778,265,0.595,266,1.068,267,0.595,268,0.833,269,0.595,270,0.595,271,0.595,272,0.595,273,0.595,274,0.595,275,0.595,276,0.595,277,1.186,278,0.891,279,0.595,280,1.186,281,0.891,282,0.595,283,0.595,284,0.595,285,0.595,286,0.595,287,0.623,288,0.595,289,1.068,290,1.068,291,1.068,292,0.595,293,1.068,294,1.068,295,0.595,296,1.068,297,0.891,298,0.891,299,0.891,300,0.595,301,0.891,302,0.891,303,0.595,304,0.891,305,0.891,306,0.595,307,0.595,308,0.595,309,1.068,310,0.595,311,0.595,312,0.595,313,0.595,314,0.595,315,0.595,316,0.595,317,0.39,318,0.584,319,0.584,320,0.595,321,0.347,322,0.39,323,1.186,324,0.595,325,0.595,326,1.186,327,1.334,328,0.891,329,0.595,330,0.595,331,0.595,332,0.595,333,1.068,334,0.595,335,0.891,336,0.595,337,0.538,338,0.538,339,0.595,340,0.595,341,0.595,342,0.595,343,0.595,344,0.595,345,0.595,346,0.595,347,0.891,348,0.595,349,0.595,350,0.595,351,0.595,352,0.595,353,0.891,354,0.595,355,0.595,356,0.595,357,0.891,358,0.595,359,0.595,360,0.595,361,0.595,362,0.595,363,0.595,364,1.068,365,0.595,366,0.891,367,0.595,368,0.595,369,0.595,370,0.701,371,0.595,372,0.595,373,0.595,374,0.39,375,0.595,376,0.595,377,0.595,378,0.595,379,0.595,380,0.595,381,0.584,382,0.595,383,0.595,384,0.595,385,0.595,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.39,402,0.891,403,0.595,404,0.595,405,0.595,406,0.595,407,0.595,408,1.186,409,1.068,410,0.595,411,0.595,412,0.595,413,0.932,414,0.595,415,0.595,416,0.595,417,0.595,418,0.595,419,0.595,420,0.891,421,0.595,422,0.595,423,0.595,424,0.595,425,0.595,426,0.595,427,0.891,428,1.334,429,0.891,430,0.891,431,0.595,432,0.595,433,0.891,434,0.891,435,0.891,436,0.595,437,1.068,438,0.891,439,0.595,440,1.27,441,1.186,442,1.27,443,1.068,444,1.068,445,0.595,446,1.27,447,0.595,448,0.891,449,0.595,450,0.595,451,0.595,452,0.595,453,0.595,454,0.595,455,0.595,456,1.068,457,0.595,458,0.891,459,0.891,460,0.595,461,0.595,462,0.891,463,0.891,464,0.595,465,0.595,466,0.595,467,0.595,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.891,477,0.595,478,0.538,479,0.891,480,0.595,481,0.595,482,0.595,483,0.595,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.891,498,0.891,499,0.891,500,0.891,501,0.891,502,0.891,503,0.538,504,0.595,505,0.891,506,0.891,507,0.595,508,0.595,509,0.595,510,1.186,511,0.891,512,0.595,513,0.595,514,0.595,515,0.595,516,0.595,517,0.891,518,0.595,519,0.595,520,0.891,521,0.595,522,0.595,523,0.02,524,0.02]],["title/interfaces/DragEndEvent.html",[0,0.083,74,0.765]],["body/interfaces/DragEndEvent.html",[0,0.147,1,1.089,2,0.391,3,0.306,4,0.267,5,0.267,6,0.23,7,0.301,8,0.539,9,0.391,10,0.807,11,1.438,12,1.438,13,0.961,14,0.48,15,0.04,16,0.55,17,0.292,18,0.585,19,0.52,20,0.585,21,0.778,22,0.875,23,0.897,24,0.585,25,0.892,26,0.585,27,0.892,28,0.596,29,0.892,30,0.892,31,0.52,32,0.23,33,1.207,34,0.728,35,0.967,36,1.069,37,0.892,38,1.069,39,0.347,40,0.585,41,0.596,42,0.596,43,0.596,44,0.596,45,0.391,46,1.271,47,0.701,48,0.892,49,0.596,50,0.391,51,0.596,52,0.701,53,0.391,54,1.207,55,0.596,56,1.187,57,0.486,58,0.728,59,0.4,60,0.533,61,0.347,62,0.391,63,0.391,64,0.391,65,0.791,66,0.967,67,0.92,68,0.728,69,0.539,70,0.834,71,0.539,72,1.187,73,0.539,74,0.807,75,1.383,76,0.807,77,1.393,78,0.872,79,0.391,80,0.807,81,0.799,82,0.799,83,0.708,84,1.334,85,1.423,86,0.967,87,0.892,88,0.892,89,0.539,90,0.837,91,1.271,92,0.306,93,0.539,94,0.345,95,0.486,96,0.391,97,0.596,98,0.539,99,0.596,100,0.267,101,0.585,102,0.807,103,0.892,104,0.933,105,0.539,106,0.596,107,0.539,108,0.539,109,0.807,110,1.074,111,0.596,112,0.413,113,0.967,114,0.807,115,0.539,116,0.596,117,0.778,118,0.347,119,0.391,120,0.52,121,0.585,122,0.711,123,0.967,124,0.437,125,0.596,126,0.347,127,0.539,128,0.741,129,0.539,130,0.596,131,0.52,132,0.347,133,0.596,134,0.539,135,1.271,136,0.539,137,0.486,138,0.539,139,0.596,140,0.539,141,0.596,142,0.596,143,0.596,144,0.539,145,0.596,146,0.596,147,0.596,148,0.807,149,0.539,150,0.596,151,0.539,152,0.596,153,0.596,154,0.596,155,0.539,156,0.539,157,0.539,158,0.596,159,0.486,160,0.539,161,0.596,162,0.967,163,1.383,164,1.251,165,0.892,166,0.892,167,0.596,168,0.596,169,0.539,170,0.778,171,0.807,172,0.623,173,0.539,174,0.596,175,0.596,176,0.539,177,0.888,178,0.437,179,0.539,180,0.539,181,0.596,182,0.596,183,0.539,184,0.539,185,0.539,186,0.539,187,0.539,188,1.251,189,0.596,190,1.069,191,0.596,192,1.089,193,0.596,194,0.892,195,1.628,196,0.807,197,0.807,198,0.892,199,0.892,200,0.892,201,0.892,202,0.892,203,0.892,204,0.596,205,0.892,206,0.892,207,0.932,208,0.539,209,0.391,210,0.391,211,0.347,212,0.596,213,0.701,214,0.596,215,0.391,216,0.892,217,1.096,218,0.596,219,0.596,220,0.892,221,0.596,222,0.539,223,0.539,224,0.596,225,0.596,226,0.539,227,0.596,228,0.539,229,0.596,230,0.892,231,0.907,232,0.596,233,0.539,234,0.539,235,0.437,236,0.596,237,0.539,238,0.892,239,0.596,240,0.596,241,0.596,242,0.596,243,0.596,244,0.596,245,0.539,246,0.892,247,1.187,248,1.187,249,1.271,250,0.892,251,0.892,252,1.069,253,0.596,254,1.271,255,1.187,256,0.892,257,0.596,258,0.834,259,0.306,260,1.048,261,0.596,262,0.596,263,0.596,264,0.778,265,0.596,266,1.069,267,0.596,268,0.834,269,0.596,270,0.596,271,0.596,272,0.596,273,0.596,274,0.596,275,0.596,276,0.596,277,1.187,278,0.892,279,0.596,280,1.187,281,0.892,282,0.596,283,0.596,284,0.596,285,0.596,286,0.596,287,0.623,288,0.596,289,1.069,290,1.069,291,1.069,292,0.596,293,1.069,294,1.069,295,0.596,296,1.069,297,0.892,298,0.892,299,0.892,300,0.596,301,0.892,302,0.892,303,0.596,304,0.892,305,0.892,306,0.596,307,0.596,308,0.596,309,1.069,310,0.596,311,0.596,312,0.596,313,0.596,314,0.596,315,0.596,316,0.596,317,0.391,318,0.585,319,0.585,320,0.596,321,0.347,322,0.391,323,1.187,324,0.596,325,0.596,326,1.187,327,1.334,328,0.892,329,0.596,330,0.596,331,0.596,332,0.596,333,1.069,334,0.596,335,0.892,336,0.596,337,0.539,338,0.539,339,0.596,340,0.596,341,0.596,342,0.596,343,0.596,344,0.596,345,0.596,346,0.596,347,0.892,348,0.596,349,0.596,350,0.596,351,0.596,352,0.596,353,0.892,354,0.596,355,0.596,356,0.596,357,0.892,358,0.596,359,0.596,360,0.596,361,0.596,362,0.596,363,0.596,364,1.069,365,0.596,366,0.892,367,0.596,368,0.596,369,0.596,370,0.701,371,0.596,372,0.596,373,0.596,374,0.391,375,0.596,376,0.596,377,0.596,378,0.596,379,0.596,380,0.596,381,0.585,382,0.596,383,0.596,384,0.596,385,0.596,386,0.596,387,0.596,388,0.596,389,0.596,390,0.596,391,0.596,392,0.596,393,0.596,394,0.596,395,0.596,396,0.596,397,0.596,398,0.596,399,0.596,400,0.596,401,0.391,402,0.892,403,0.596,404,0.596,405,0.596,406,0.596,407,0.596,408,1.187,409,1.069,410,0.596,411,0.596,412,0.596,413,0.933,414,0.596,415,0.596,416,0.596,417,0.596,418,0.596,419,0.596,420,0.892,421,0.596,422,0.596,423,0.596,424,0.596,425,0.596,426,0.596,427,0.892,428,1.334,429,0.892,430,0.892,431,0.596,432,0.596,433,0.892,434,0.892,435,0.892,436,0.596,437,1.069,438,0.892,439,0.596,440,1.271,441,1.187,442,1.271,443,1.069,444,1.069,445,0.596,446,1.271,447,0.596,448,0.892,449,0.596,450,0.596,451,0.596,452,0.596,453,0.596,454,0.596,455,0.596,456,1.069,457,0.596,458,0.892,459,0.892,460,0.596,461,0.596,462,0.892,463,0.892,464,0.596,465,0.596,466,0.596,467,0.596,468,0.596,469,0.596,470,0.596,471,0.596,472,0.596,473,0.596,474,0.596,475,0.596,476,0.892,477,0.596,478,0.539,479,0.892,480,0.596,481,0.596,482,0.596,483,0.596,484,0.596,485,0.596,486,0.596,487,0.596,488,0.596,489,0.596,490,0.596,491,0.596,492,0.596,493,0.596,494,0.596,495,0.596,496,0.596,497,0.892,498,0.892,499,0.892,500,0.892,501,0.892,502,0.892,503,0.539,504,0.596,505,0.892,506,0.892,507,0.596,508,0.596,509,0.596,510,1.187,511,0.892,512,0.596,513,0.596,514,0.596,515,0.596,516,0.596,517,0.892,518,0.596,519,0.596,520,0.892,521,0.596,522,0.596,523,0.02,524,0.02]],["title/interfaces/DragEvent.html",[0,0.083,536,1.708]],["body/interfaces/DragEvent.html",[0,0.125,2,0.656,3,0.514,4,0.449,5,0.449,6,0.387,7,0.351,13,0.866,14,0.449,15,0.039,16,0.608,17,0.419,18,0.839,19,0.746,20,0.839,21,0.916,22,1.008,23,0.866,24,0.839,26,0.839,31,0.746,32,0.387,39,0.746,40,0.839,45,0.839,47,0.656,50,0.656,52,0.925,53,0.656,59,0.574,60,0.574,61,0.583,62,0.656,63,0.656,64,0.656,65,0.764,67,0.866,70,0.925,79,0.656,81,0.846,82,0.84,83,0.449,90,0.864,92,0.514,94,0.387,96,0.656,100,0.667,101,0.975,104,0.925,112,0.387,117,0.839,118,0.583,119,0.656,120,0.583,121,0.656,122,0.657,126,0.746,128,0.746,131,0.583,132,0.583,170,0.866,172,0.746,177,0.866,192,1.008,207,0.866,209,0.656,210,0.656,211,0.583,213,0.656,215,0.656,217,1.031,231,0.839,258,0.656,259,0.514,260,0.925,264,0.656,268,0.975,287,0.895,317,0.839,318,1.008,319,0.839,321,0.746,322,0.656,370,0.839,374,0.925,381,0.839,401,0.656,413,0.656,523,0.029,524,0.029,531,1.812,536,2.846,537,1.812,538,2.846,539,2.9,540,2.268,541,1.812,542,2.846,543,3.101,544,2.268,545,2.268,546,2.268,547,2.9,548,3.197,549,2.268,550,2.582,551,2.554,552,2.019,553,2.582,554,2.019,555,2.268,556,2.582,557,2.268,558,2.9,559,2.268,560,2.268,561,2.268,562,2.268,563,2.268,564,2.268,565,2.019,566,2.268,567,1.634,568,2.268,569,2.019,570,2.268,571,2.9,572,2.268,573,2.268,574,2.9,575,2.268,576,2.9,577,3.197,578,2.9,579,2.268,580,2.268,581,2.9,582,3.197,583,2.268,584,3.197,585,3.197,586,2.9,587,3.197,588,2.268,589,3.37,590,2.268,591,2.019,592,2.268,593,2.019,594,2.268,595,2.268,596,2.268,597,3.197,598,3.197,599,2.268,600,2.268,601,2.268,602,2.268,603,2.268,604,2.268,605,2.268,606,2.268,607,2.268,608,2.268,609,2.268,610,2.019,611,2.268,612,2.268,613,2.268]],["title/interfaces/DragMoveEvent.html",[0,0.083,73,0.765]],["body/interfaces/DragMoveEvent.html",[0,0.147,1,1.09,2,0.392,3,0.307,4,0.268,5,0.268,6,0.231,7,0.301,8,0.541,11,1.438,12,1.438,13,0.961,14,0.401,15,0.04,16,0.55,17,0.293,18,0.586,19,0.521,20,0.586,21,0.779,22,0.876,23,0.898,24,0.586,25,0.894,26,0.586,27,0.894,28,0.598,29,0.894,30,0.894,31,0.521,32,0.231,33,1.208,34,0.73,35,0.969,36,1.071,37,0.894,38,1.071,39,0.348,40,0.586,41,0.598,42,0.598,43,0.598,44,0.598,45,0.392,46,1.273,47,0.702,48,0.894,49,0.598,50,0.392,51,0.598,52,0.702,53,0.392,54,1.208,55,0.598,56,1.189,57,0.488,58,0.73,59,0.401,60,0.533,61,0.348,62,0.392,63,0.392,64,0.392,65,0.792,66,0.969,67,0.907,68,0.73,69,0.541,70,0.835,71,0.541,72,1.189,73,0.809,74,0.541,75,1.189,76,0.809,77,1.394,78,0.874,79,0.392,80,0.809,81,0.799,82,0.799,83,0.709,84,1.336,85,1.424,86,0.969,87,0.894,88,0.894,89,0.541,90,0.837,91,1.273,92,0.307,93,0.541,94,0.346,95,0.488,96,0.392,97,0.598,98,0.541,99,0.598,100,0.268,101,0.586,102,0.809,103,0.894,104,0.934,105,0.541,106,0.598,107,0.541,108,0.541,109,0.809,110,1.076,111,0.598,112,0.414,113,0.969,114,0.809,115,0.541,116,0.598,117,0.78,118,0.348,119,0.392,120,0.521,121,0.586,122,0.712,123,0.969,124,0.438,125,0.598,126,0.348,127,0.541,128,0.742,129,0.541,130,0.598,131,0.521,132,0.348,133,0.598,134,0.541,135,1.273,136,0.541,137,0.488,138,0.541,139,0.598,140,0.541,141,0.598,142,0.598,143,0.598,144,0.541,145,0.598,146,0.598,147,0.598,148,0.809,149,0.541,150,0.598,151,0.541,152,0.598,153,0.598,154,0.598,155,0.541,156,0.541,157,0.541,158,0.598,159,0.488,160,0.541,161,0.598,162,0.969,163,1.385,164,1.253,165,0.894,166,0.894,167,0.598,168,0.598,169,0.541,170,0.779,171,0.809,172,0.624,173,0.541,174,0.598,175,0.598,176,0.541,177,0.888,178,0.438,179,0.541,180,0.541,181,0.598,182,0.598,183,0.541,184,0.541,185,0.541,186,0.541,187,0.541,188,1.253,189,0.598,190,1.071,191,0.598,192,1.089,193,0.598,194,0.894,195,1.629,196,0.809,197,0.809,198,0.894,199,0.894,200,0.894,201,0.894,202,0.894,203,0.894,204,0.598,205,0.894,206,0.894,207,0.932,208,0.541,209,0.392,210,0.392,211,0.348,212,0.598,213,0.702,214,0.598,215,0.392,216,0.894,217,1.096,218,0.598,219,0.598,220,0.894,221,0.598,222,0.541,223,0.541,224,0.598,225,0.598,226,0.541,227,0.598,228,0.541,229,0.598,230,0.894,231,0.908,232,0.598,233,0.541,234,0.541,235,0.438,236,0.598,237,0.541,238,0.894,239,0.598,240,0.598,241,0.598,242,0.598,243,0.598,244,0.598,245,0.541,246,0.894,247,1.189,248,1.189,249,1.273,250,0.894,251,0.894,252,1.071,253,0.598,254,1.273,255,1.189,256,0.894,257,0.598,258,0.835,259,0.307,260,1.049,261,0.598,262,0.598,263,0.598,264,0.78,265,0.598,266,1.071,267,0.598,268,0.835,269,0.598,270,0.598,271,0.598,272,0.598,273,0.598,274,0.598,275,0.598,276,0.598,277,1.189,278,0.894,279,0.598,280,1.189,281,0.894,282,0.598,283,0.598,284,0.598,285,0.598,286,0.598,287,0.624,288,0.598,289,1.071,290,1.071,291,1.071,292,0.598,293,1.071,294,1.071,295,0.598,296,1.071,297,0.894,298,0.894,299,0.894,300,0.598,301,0.894,302,0.894,303,0.598,304,0.894,305,0.894,306,0.598,307,0.598,308,0.598,309,1.071,310,0.598,311,0.598,312,0.598,313,0.598,314,0.598,315,0.598,316,0.598,317,0.392,318,0.586,319,0.586,320,0.598,321,0.348,322,0.392,323,1.189,324,0.598,325,0.598,326,1.189,327,1.336,328,0.894,329,0.598,330,0.598,331,0.598,332,0.598,333,1.071,334,0.598,335,0.894,336,0.598,337,0.541,338,0.541,339,0.598,340,0.598,341,0.598,342,0.598,343,0.598,344,0.598,345,0.598,346,0.598,347,0.894,348,0.598,349,0.598,350,0.598,351,0.598,352,0.598,353,0.894,354,0.598,355,0.598,356,0.598,357,0.894,358,0.598,359,0.598,360,0.598,361,0.598,362,0.598,363,0.598,364,1.071,365,0.598,366,0.894,367,0.598,368,0.598,369,0.598,370,0.702,371,0.598,372,0.598,373,0.598,374,0.392,375,0.598,376,0.598,377,0.598,378,0.598,379,0.598,380,0.598,381,0.586,382,0.598,383,0.598,384,0.598,385,0.598,386,0.598,387,0.598,388,0.598,389,0.598,390,0.598,391,0.598,392,0.598,393,0.598,394,0.598,395,0.598,396,0.598,397,0.598,398,0.598,399,0.598,400,0.598,401,0.392,402,0.894,403,0.598,404,0.598,405,0.598,406,0.598,407,0.598,408,1.189,409,1.071,410,0.598,411,0.598,412,0.598,413,0.934,414,0.598,415,0.598,416,0.598,417,0.598,418,0.598,419,0.598,420,0.894,421,0.598,422,0.598,423,0.598,424,0.598,425,0.598,426,0.598,427,0.894,428,1.336,429,0.894,430,0.894,431,0.598,432,0.598,433,0.894,434,0.894,435,0.894,436,0.598,437,1.071,438,0.894,439,0.598,440,1.273,441,1.189,442,1.273,443,1.071,444,1.071,445,0.598,446,1.273,447,0.598,448,0.894,449,0.598,450,0.598,451,0.598,452,0.598,453,0.598,454,0.598,455,0.598,456,1.071,457,0.598,458,0.894,459,0.894,460,0.598,461,0.598,462,0.894,463,0.894,464,0.598,465,0.598,466,0.598,467,0.598,468,0.598,469,0.598,470,0.598,471,0.598,472,0.598,473,0.598,474,0.598,475,0.598,476,0.894,477,0.598,478,0.541,479,0.894,480,0.598,481,0.598,482,0.598,483,0.598,484,0.598,485,0.598,486,0.598,487,0.598,488,0.598,489,0.598,490,0.598,491,0.598,492,0.598,493,0.598,494,0.598,495,0.598,496,0.598,497,0.894,498,0.894,499,0.894,500,0.894,501,0.894,502,0.894,503,0.541,504,0.598,505,0.894,506,0.894,507,0.598,508,0.598,509,0.598,510,1.189,511,0.894,512,0.598,513,0.598,514,0.598,515,0.598,516,0.598,517,0.894,518,0.598,519,0.598,520,0.894,521,0.598,522,0.598,523,0.02,524,0.02]],["title/interfaces/DragPointerDownEvent.html",[0,0.083,69,0.765]],["body/interfaces/DragPointerDownEvent.html",[0,0.147,1,1.09,2,0.392,3,0.307,4,0.268,5,0.268,6,0.231,7,0.301,8,0.541,11,1.438,12,1.438,13,0.961,14,0.401,15,0.04,16,0.55,17,0.293,18,0.586,19,0.521,20,0.586,21,0.779,22,0.876,23,0.898,24,0.586,25,0.894,26,0.586,27,0.894,28,0.598,29,0.894,30,0.894,31,0.521,32,0.231,33,1.208,34,0.73,35,0.969,36,1.071,37,0.894,38,1.071,39,0.348,40,0.586,41,0.598,42,0.598,43,0.598,44,0.598,45,0.392,46,1.273,47,0.702,48,0.894,49,0.598,50,0.392,51,0.598,52,0.702,53,0.392,54,1.208,55,0.598,56,1.189,57,0.488,58,0.73,59,0.401,60,0.533,61,0.348,62,0.392,63,0.392,64,0.392,65,0.792,66,0.969,67,0.907,68,0.73,69,0.809,70,0.835,71,0.541,72,1.189,73,0.541,74,0.541,75,1.189,76,0.809,77,1.394,78,0.874,79,0.392,80,0.809,81,0.799,82,0.799,83,0.709,84,1.336,85,1.424,86,0.969,87,0.894,88,0.894,89,0.541,90,0.837,91,1.273,92,0.307,93,0.541,94,0.346,95,0.488,96,0.392,97,0.598,98,0.541,99,0.598,100,0.268,101,0.586,102,0.809,103,0.894,104,0.934,105,0.541,106,0.598,107,0.541,108,0.541,109,0.809,110,1.076,111,0.598,112,0.414,113,0.969,114,0.809,115,0.541,116,0.598,117,0.78,118,0.348,119,0.392,120,0.521,121,0.586,122,0.712,123,0.969,124,0.438,125,0.598,126,0.348,127,0.541,128,0.742,129,0.541,130,0.598,131,0.521,132,0.348,133,0.598,134,0.541,135,1.273,136,0.541,137,0.488,138,0.541,139,0.598,140,0.541,141,0.598,142,0.598,143,0.598,144,0.541,145,0.598,146,0.598,147,0.598,148,0.809,149,0.541,150,0.598,151,0.541,152,0.598,153,0.598,154,0.598,155,0.541,156,0.541,157,0.541,158,0.598,159,0.488,160,0.541,161,0.598,162,0.969,163,1.385,164,1.253,165,0.894,166,0.894,167,0.598,168,0.598,169,0.541,170,0.779,171,0.809,172,0.624,173,0.541,174,0.598,175,0.598,176,0.541,177,0.888,178,0.438,179,0.541,180,0.541,181,0.598,182,0.598,183,0.541,184,0.541,185,0.541,186,0.541,187,0.541,188,1.253,189,0.598,190,1.071,191,0.598,192,1.089,193,0.598,194,0.894,195,1.629,196,0.809,197,0.809,198,0.894,199,0.894,200,0.894,201,0.894,202,0.894,203,0.894,204,0.598,205,0.894,206,0.894,207,0.932,208,0.541,209,0.392,210,0.392,211,0.348,212,0.598,213,0.702,214,0.598,215,0.392,216,0.894,217,1.096,218,0.598,219,0.598,220,0.894,221,0.598,222,0.541,223,0.541,224,0.598,225,0.598,226,0.541,227,0.598,228,0.541,229,0.598,230,0.894,231,0.908,232,0.598,233,0.541,234,0.541,235,0.438,236,0.598,237,0.541,238,0.894,239,0.598,240,0.598,241,0.598,242,0.598,243,0.598,244,0.598,245,0.541,246,0.894,247,1.189,248,1.189,249,1.273,250,0.894,251,0.894,252,1.071,253,0.598,254,1.273,255,1.189,256,0.894,257,0.598,258,0.835,259,0.307,260,1.049,261,0.598,262,0.598,263,0.598,264,0.78,265,0.598,266,1.071,267,0.598,268,0.835,269,0.598,270,0.598,271,0.598,272,0.598,273,0.598,274,0.598,275,0.598,276,0.598,277,1.189,278,0.894,279,0.598,280,1.189,281,0.894,282,0.598,283,0.598,284,0.598,285,0.598,286,0.598,287,0.624,288,0.598,289,1.071,290,1.071,291,1.071,292,0.598,293,1.071,294,1.071,295,0.598,296,1.071,297,0.894,298,0.894,299,0.894,300,0.598,301,0.894,302,0.894,303,0.598,304,0.894,305,0.894,306,0.598,307,0.598,308,0.598,309,1.071,310,0.598,311,0.598,312,0.598,313,0.598,314,0.598,315,0.598,316,0.598,317,0.392,318,0.586,319,0.586,320,0.598,321,0.348,322,0.392,323,1.189,324,0.598,325,0.598,326,1.189,327,1.336,328,0.894,329,0.598,330,0.598,331,0.598,332,0.598,333,1.071,334,0.598,335,0.894,336,0.598,337,0.541,338,0.541,339,0.598,340,0.598,341,0.598,342,0.598,343,0.598,344,0.598,345,0.598,346,0.598,347,0.894,348,0.598,349,0.598,350,0.598,351,0.598,352,0.598,353,0.894,354,0.598,355,0.598,356,0.598,357,0.894,358,0.598,359,0.598,360,0.598,361,0.598,362,0.598,363,0.598,364,1.071,365,0.598,366,0.894,367,0.598,368,0.598,369,0.598,370,0.702,371,0.598,372,0.598,373,0.598,374,0.392,375,0.598,376,0.598,377,0.598,378,0.598,379,0.598,380,0.598,381,0.586,382,0.598,383,0.598,384,0.598,385,0.598,386,0.598,387,0.598,388,0.598,389,0.598,390,0.598,391,0.598,392,0.598,393,0.598,394,0.598,395,0.598,396,0.598,397,0.598,398,0.598,399,0.598,400,0.598,401,0.392,402,0.894,403,0.598,404,0.598,405,0.598,406,0.598,407,0.598,408,1.189,409,1.071,410,0.598,411,0.598,412,0.598,413,0.934,414,0.598,415,0.598,416,0.598,417,0.598,418,0.598,419,0.598,420,0.894,421,0.598,422,0.598,423,0.598,424,0.598,425,0.598,426,0.598,427,0.894,428,1.336,429,0.894,430,0.894,431,0.598,432,0.598,433,0.894,434,0.894,435,0.894,436,0.598,437,1.071,438,0.894,439,0.598,440,1.273,441,1.189,442,1.273,443,1.071,444,1.071,445,0.598,446,1.273,447,0.598,448,0.894,449,0.598,450,0.598,451,0.598,452,0.598,453,0.598,454,0.598,455,0.598,456,1.071,457,0.598,458,0.894,459,0.894,460,0.598,461,0.598,462,0.894,463,0.894,464,0.598,465,0.598,466,0.598,467,0.598,468,0.598,469,0.598,470,0.598,471,0.598,472,0.598,473,0.598,474,0.598,475,0.598,476,0.894,477,0.598,478,0.541,479,0.894,480,0.598,481,0.598,482,0.598,483,0.598,484,0.598,485,0.598,486,0.598,487,0.598,488,0.598,489,0.598,490,0.598,491,0.598,492,0.598,493,0.598,494,0.598,495,0.598,496,0.598,497,0.894,498,0.894,499,0.894,500,0.894,501,0.894,502,0.894,503,0.541,504,0.598,505,0.894,506,0.894,507,0.598,508,0.598,509,0.598,510,1.189,511,0.894,512,0.598,513,0.598,514,0.598,515,0.598,516,0.598,517,0.894,518,0.598,519,0.598,520,0.894,521,0.598,522,0.598,523,0.02,524,0.02]],["title/interfaces/DragStartEvent.html",[0,0.083,71,0.765]],["body/interfaces/DragStartEvent.html",[0,0.147,1,1.038,2,0.391,3,0.306,4,0.267,5,0.267,6,0.23,7,0.301,8,0.539,9,0.391,10,0.807,11,1.438,12,1.438,13,0.961,14,0.48,15,0.04,16,0.55,17,0.292,18,0.585,19,0.52,20,0.585,21,0.778,22,0.875,23,0.898,24,0.585,25,0.892,26,0.585,27,0.892,28,0.596,29,0.892,30,0.892,31,0.52,32,0.23,33,1.207,34,0.728,35,0.968,36,1.272,37,0.892,38,1.07,39,0.347,40,0.585,41,0.596,42,0.596,43,0.596,44,0.596,45,0.391,46,1.272,47,0.701,48,0.892,49,0.596,50,0.391,51,0.596,52,0.701,53,0.391,54,1.207,55,0.596,56,1.188,57,0.486,58,0.728,59,0.4,60,0.533,61,0.347,62,0.391,63,0.391,64,0.391,65,0.791,66,0.968,67,0.906,68,0.728,69,0.539,70,0.779,71,0.807,72,1.384,73,0.539,74,0.539,75,1.188,76,0.807,77,1.393,78,0.873,79,0.391,80,0.807,81,0.799,82,0.799,83,0.708,84,1.335,85,1.423,86,0.968,87,0.892,88,0.892,89,0.539,90,0.837,91,1.272,92,0.306,93,0.539,94,0.345,95,0.486,96,0.391,97,0.596,98,0.539,99,0.596,100,0.267,101,0.585,102,0.807,103,0.892,104,0.933,105,0.539,106,0.596,107,0.539,108,0.539,109,0.807,110,1.074,111,0.596,112,0.414,113,0.968,114,0.807,115,0.539,116,0.596,117,0.779,118,0.347,119,0.391,120,0.52,121,0.585,122,0.711,123,0.968,124,0.437,125,0.596,126,0.347,127,0.539,128,0.741,129,0.539,130,0.596,131,0.52,132,0.347,133,0.596,134,0.539,135,1.272,136,0.539,137,0.486,138,0.539,139,0.596,140,0.539,141,0.596,142,0.596,143,0.596,144,0.539,145,0.596,146,0.596,147,0.596,148,0.807,149,0.539,150,0.596,151,0.539,152,0.596,153,0.596,154,0.596,155,0.539,156,0.539,157,0.539,158,0.596,159,0.486,160,0.539,161,0.596,162,0.968,163,1.384,164,1.252,165,0.892,166,0.892,167,0.596,168,0.596,169,0.539,170,0.778,171,0.807,172,0.623,173,0.539,174,0.596,175,0.596,176,0.539,177,0.888,178,0.437,179,0.539,180,0.539,181,0.596,182,0.596,183,0.539,184,0.539,185,0.539,186,0.539,187,0.539,188,1.252,189,0.596,190,1.07,191,0.596,192,1.089,193,0.596,194,0.892,195,1.628,196,0.807,197,0.807,198,0.892,199,0.892,200,0.892,201,0.892,202,0.892,203,0.892,204,0.596,205,0.892,206,0.892,207,0.932,208,0.539,209,0.391,210,0.391,211,0.347,212,0.596,213,0.701,214,0.596,215,0.391,216,0.892,217,1.096,218,0.596,219,0.596,220,0.892,221,0.596,222,0.539,223,0.539,224,0.596,225,0.596,226,0.539,227,0.596,228,0.539,229,0.596,230,0.892,231,0.907,232,0.596,233,0.539,234,0.539,235,0.437,236,0.596,237,0.539,238,0.892,239,0.596,240,0.596,241,0.596,242,0.596,243,0.596,244,0.596,245,0.539,246,0.892,247,1.188,248,1.188,249,1.272,250,0.892,251,0.892,252,1.07,253,0.596,254,1.272,255,1.188,256,0.892,257,0.596,258,0.834,259,0.306,260,1.048,261,0.596,262,0.596,263,0.596,264,0.779,265,0.596,266,1.07,267,0.596,268,0.834,269,0.596,270,0.596,271,0.596,272,0.596,273,0.596,274,0.596,275,0.596,276,0.596,277,1.188,278,0.892,279,0.596,280,1.188,281,0.892,282,0.596,283,0.596,284,0.596,285,0.596,286,0.596,287,0.623,288,0.596,289,1.07,290,1.07,291,1.07,292,0.596,293,1.07,294,1.07,295,0.596,296,1.07,297,0.892,298,0.892,299,0.892,300,0.596,301,0.892,302,0.892,303,0.596,304,0.892,305,0.892,306,0.596,307,0.596,308,0.596,309,1.07,310,0.596,311,0.596,312,0.596,313,0.596,314,0.596,315,0.596,316,0.596,317,0.391,318,0.585,319,0.585,320,0.596,321,0.347,322,0.391,323,1.188,324,0.596,325,0.596,326,1.188,327,1.335,328,0.892,329,0.596,330,0.596,331,0.596,332,0.596,333,1.07,334,0.596,335,0.892,336,0.596,337,0.539,338,0.539,339,0.596,340,0.596,341,0.596,342,0.596,343,0.596,344,0.596,345,0.596,346,0.596,347,0.892,348,0.596,349,0.596,350,0.596,351,0.596,352,0.596,353,0.892,354,0.596,355,0.596,356,0.596,357,0.892,358,0.596,359,0.596,360,0.596,361,0.596,362,0.596,363,0.596,364,1.07,365,0.596,366,0.892,367,0.596,368,0.596,369,0.596,370,0.701,371,0.596,372,0.596,373,0.596,374,0.391,375,0.596,376,0.596,377,0.596,378,0.596,379,0.596,380,0.596,381,0.585,382,0.596,383,0.596,384,0.596,385,0.596,386,0.596,387,0.596,388,0.596,389,0.596,390,0.596,391,0.596,392,0.596,393,0.596,394,0.596,395,0.596,396,0.596,397,0.596,398,0.596,399,0.596,400,0.596,401,0.391,402,0.892,403,0.596,404,0.596,405,0.596,406,0.596,407,0.596,408,1.188,409,1.07,410,0.596,411,0.596,412,0.596,413,0.933,414,0.596,415,0.596,416,0.596,417,0.596,418,0.596,419,0.596,420,0.892,421,0.596,422,0.596,423,0.596,424,0.596,425,0.596,426,0.596,427,0.892,428,1.335,429,0.892,430,0.892,431,0.596,432,0.596,433,0.892,434,0.892,435,0.892,436,0.596,437,1.07,438,0.892,439,0.596,440,1.272,441,1.188,442,1.272,443,1.07,444,1.07,445,0.596,446,1.272,447,0.596,448,0.892,449,0.596,450,0.596,451,0.596,452,0.596,453,0.596,454,0.596,455,0.596,456,1.07,457,0.596,458,0.892,459,0.892,460,0.596,461,0.596,462,0.892,463,0.892,464,0.596,465,0.596,466,0.596,467,0.596,468,0.596,469,0.596,470,0.596,471,0.596,472,0.596,473,0.596,474,0.596,475,0.596,476,0.892,477,0.596,478,0.539,479,0.892,480,0.596,481,0.596,482,0.596,483,0.596,484,0.596,485,0.596,486,0.596,487,0.596,488,0.596,489,0.596,490,0.596,491,0.596,492,0.596,493,0.596,494,0.596,495,0.596,496,0.596,497,0.892,498,0.892,499,0.892,500,0.892,501,0.892,502,0.892,503,0.539,504,0.596,505,0.892,506,0.892,507,0.596,508,0.596,509,0.596,510,1.188,511,0.892,512,0.596,513,0.596,514,0.596,515,0.596,516,0.596,517,0.892,518,0.596,519,0.596,520,0.892,521,0.596,522,0.596,523,0.02,524,0.02]],["title/directives/DraggableDirective.html",[17,0.277,95,0.69]],["body/directives/DraggableDirective.html",[0,0.144,1,0.998,3,0.28,4,0.245,5,0.245,6,0.61,7,0.356,8,0.494,9,0.358,11,1.435,12,1.435,13,0.952,14,0.719,15,0.04,16,0.535,17,0.273,18,0.665,19,0.486,20,0.547,21,0.752,22,0.966,23,0.881,24,0.665,25,1.014,26,0.547,27,0.835,28,0.546,29,1.014,30,0.835,31,0.486,32,0.211,33,1.167,34,0.681,35,0.917,36,1.014,37,0.835,38,1.014,39,0.318,40,0.547,41,0.546,42,0.546,43,0.546,44,0.546,45,0.358,46,1.223,47,0.665,48,0.835,49,0.546,50,0.358,51,0.546,52,0.665,53,0.358,54,1.167,55,0.546,56,1.29,57,0.445,58,0.681,59,0.374,60,0.549,61,0.318,62,0.358,63,0.358,64,0.358,65,0.777,66,1.167,67,0.906,68,0.827,69,0.494,70,0.744,71,0.494,72,1.135,73,0.494,74,0.494,75,1.135,76,0.755,77,1.368,78,1.053,79,0.358,80,0.755,81,0.785,82,0.785,83,0.707,84,1.29,85,1.385,86,0.917,87,0.835,88,0.835,89,0.494,90,0.863,91,1.29,92,0.429,93,0.755,94,0.392,95,0.681,96,0.547,97,0.835,98,0.755,99,0.835,100,0.374,101,0.744,102,1.027,103,1.135,104,0.98,105,0.755,106,0.835,107,0.755,108,0.917,109,1.027,110,1.253,111,0.835,112,0.499,113,1.167,114,1.107,115,0.755,116,1.014,117,0.802,118,0.486,119,0.547,120,0.591,121,0.665,122,0.785,123,1.027,124,0.612,125,0.835,126,0.486,127,0.917,128,0.782,129,0.755,130,0.835,131,0.662,132,0.591,133,0.835,134,1.253,135,1.29,136,0.917,137,0.681,138,0.755,139,0.835,140,0.755,141,0.835,142,0.835,143,0.835,144,0.917,145,0.835,146,0.835,147,0.835,148,1.027,149,0.755,150,0.835,151,0.755,152,0.835,153,0.835,154,1.014,155,0.494,156,0.494,157,0.494,158,0.546,159,0.445,160,0.494,161,0.546,162,1.027,163,1.343,164,1.214,165,0.835,166,0.835,167,0.546,168,0.546,169,0.755,170,0.871,171,1.027,172,0.713,173,0.755,174,0.835,175,0.835,176,0.917,177,0.871,178,0.612,179,0.755,180,0.755,181,0.835,182,0.835,183,0.755,184,0.917,185,0.755,186,0.917,187,0.917,188,1.214,189,0.546,190,1.014,191,0.546,192,1.08,193,0.546,194,0.835,195,1.61,196,0.755,197,0.755,198,0.835,199,0.835,200,0.835,201,0.835,202,0.835,203,0.835,204,0.546,205,0.835,206,0.835,207,0.919,208,0.494,209,0.358,210,0.358,211,0.318,212,0.546,213,0.665,214,0.546,215,0.358,216,0.835,217,1.087,218,0.546,219,0.546,220,0.835,221,0.546,222,0.494,223,0.494,224,0.546,225,0.546,226,0.494,227,0.546,228,0.494,229,0.546,230,0.835,231,0.88,232,0.546,233,0.494,234,0.494,235,0.4,236,0.546,237,0.494,238,0.835,239,0.546,240,0.546,241,0.546,242,0.546,243,0.546,244,0.546,245,0.494,246,0.835,247,1.135,248,1.135,249,1.223,250,0.835,251,0.835,252,1.014,253,0.546,254,1.223,255,1.135,256,0.835,257,0.546,258,0.802,259,0.28,260,1.034,261,0.546,262,0.546,263,0.546,264,0.744,265,0.546,266,1.014,267,0.546,268,0.802,269,0.546,270,0.546,271,0.546,272,0.546,273,0.546,274,0.546,275,0.546,276,0.546,277,1.135,278,0.835,279,0.546,280,1.135,281,0.835,282,0.546,283,0.546,284,0.546,285,0.546,286,0.546,287,0.591,288,0.546,289,1.014,290,1.014,291,1.014,292,0.546,293,1.014,294,1.014,295,0.546,296,1.014,297,0.835,298,0.835,299,0.835,300,0.546,301,0.835,302,0.835,303,0.546,304,0.835,305,0.835,306,0.546,307,0.546,308,0.546,309,1.014,310,0.546,311,0.546,312,0.546,313,0.546,314,0.546,315,0.546,316,0.546,317,0.358,318,0.547,319,0.547,320,0.546,321,0.318,322,0.358,323,1.135,324,0.546,325,0.546,326,1.135,327,1.29,328,0.835,329,0.546,330,0.546,331,0.546,332,0.546,333,1.014,334,0.546,335,0.835,336,0.546,337,0.494,338,0.494,339,0.546,340,0.546,341,0.546,342,0.546,343,0.546,344,0.546,345,0.546,346,0.546,347,0.835,348,0.546,349,0.546,350,0.546,351,0.546,352,0.546,353,0.835,354,0.546,355,0.546,356,0.546,357,0.835,358,0.546,359,0.546,360,0.546,361,0.546,362,0.546,363,0.546,364,1.014,365,0.546,366,0.835,367,0.546,368,0.546,369,0.546,370,0.665,371,0.546,372,0.546,373,0.546,374,0.358,375,0.546,376,0.546,377,0.546,378,0.546,379,0.546,380,0.546,381,0.908,382,0.546,383,0.546,384,0.546,385,0.546,386,0.546,387,0.546,388,0.546,389,0.546,390,0.546,391,0.546,392,0.546,393,0.546,394,0.546,395,0.546,396,0.546,397,0.546,398,0.546,399,0.546,400,0.546,401,0.358,402,0.835,403,0.546,404,0.546,405,0.546,406,0.546,407,0.546,408,1.135,409,1.014,410,0.546,411,0.546,412,0.546,413,0.908,414,0.546,415,0.546,416,0.546,417,0.546,418,0.546,419,0.546,420,0.835,421,0.546,422,0.546,423,0.546,424,0.546,425,0.546,426,0.546,427,0.835,428,1.29,429,0.835,430,0.835,431,0.546,432,0.546,433,0.835,434,0.835,435,0.835,436,0.546,437,1.014,438,0.835,439,0.546,440,1.223,441,1.135,442,1.223,443,1.014,444,1.014,445,0.546,446,1.223,447,0.546,448,0.835,449,0.546,450,0.546,451,0.546,452,0.546,453,0.546,454,0.546,455,0.546,456,1.014,457,0.546,458,0.835,459,0.835,460,0.546,461,0.546,462,0.835,463,0.835,464,0.546,465,0.546,466,0.546,467,0.546,468,0.546,469,0.546,470,0.546,471,0.546,472,0.546,473,0.546,474,0.546,475,0.546,476,0.835,477,0.546,478,0.494,479,0.835,480,0.546,481,0.546,482,0.546,483,0.546,484,0.546,485,0.546,486,0.546,487,0.546,488,0.546,489,0.546,490,0.546,491,0.546,492,0.546,493,0.546,494,0.546,495,0.546,496,0.546,497,0.835,498,0.835,499,0.835,500,0.835,501,0.835,502,0.835,503,0.494,504,0.546,505,0.835,506,0.835,507,0.546,508,0.546,509,0.546,510,1.135,511,0.835,512,0.546,513,0.546,514,0.546,515,0.546,516,0.546,517,0.835,518,0.546,519,0.546,520,0.835,521,0.546,522,0.546,523,0.019,524,0.019,614,1.237,615,1.407,616,2.152,617,2.152,618,2.501,619,4.694,620,1.981,621,1.981,622,1.981,623,1.981,624,1.981,625,1.981,626,1.981,627,1.981,628,1.981,629,1.981,630,1.981,631,1.981,632,1.981,633,1.981,634,1.981,635,1.981,636,1.981]],["title/directives/DraggableScrollContainerDirective.html",[17,0.277,59,0.38]],["body/directives/DraggableScrollContainerDirective.html",[3,0.668,4,0.583,5,0.583,6,0.502,7,0.344,15,0.039,16,0.502,17,0.491,19,0.922,32,0.502,59,0.673,60,0.583,65,0.668,92,0.771,94,0.502,112,0.58,188,1.176,259,0.771,523,0.034,524,0.034,614,2.946,615,3.351,637,4.717,638,4.717,639,3.894,640,5.445,641,4.192,642,5.445,643,3.869,644,3.869,645,3.869,646,5.445,647,3.869,648,4.717,649,4.717]],["title/interfaces/DropEvent.html",[0,0.083,538,1.708]],["body/interfaces/DropEvent.html",[0,0.123,2,0.641,3,0.502,4,0.439,5,0.439,6,0.378,7,0.35,9,0.641,10,1.14,13,0.938,14,0.684,15,0.039,16,0.604,17,0.413,18,0.827,19,0.735,20,0.827,21,0.91,22,1,23,0.859,24,0.827,26,0.827,31,0.735,32,0.378,39,0.735,40,0.827,45,0.827,47,0.641,50,0.641,52,0.915,53,0.641,59,0.566,60,0.566,61,0.57,62,0.641,63,0.641,64,0.641,65,0.757,67,0.859,70,0.827,79,0.641,81,0.862,82,0.858,83,0.566,90,0.862,92,0.502,94,0.378,96,0.641,100,0.713,101,1.042,104,0.915,112,0.378,117,0.827,118,0.57,119,0.641,120,0.57,121,0.641,122,0.648,126,0.735,128,0.735,131,0.57,132,0.57,170,0.859,172,0.859,177,0.859,192,1,207,0.859,209,0.641,210,0.641,211,0.57,213,0.641,215,0.641,217,1.024,231,0.827,258,0.641,259,0.502,260,0.915,264,0.641,268,0.967,287,0.948,317,0.827,318,1,319,0.827,321,0.735,322,0.641,370,0.827,374,0.915,381,0.967,401,0.641,413,0.641,523,0.028,524,0.028,531,1.77,536,2.544,537,1.77,538,2.816,539,2.858,540,2.216,541,1.77,542,2.816,543,3.079,544,2.216,545,2.216,546,3.163,547,3.341,548,3.541,549,3.163,550,2.544,551,2.527,552,1.973,553,2.544,554,1.973,555,2.216,556,2.544,557,2.216,558,2.858,559,2.216,560,2.216,561,2.216,562,2.216,563,2.216,564,2.216,565,1.973,566,2.216,567,1.597,568,2.216,569,1.973,570,2.216,571,2.858,572,2.216,573,2.216,574,2.858,575,2.216,576,2.858,577,3.163,578,2.858,579,2.216,580,2.216,581,2.858,582,3.163,583,2.216,584,3.163,585,3.163,586,2.858,587,3.163,588,2.216,589,3.341,590,2.216,591,1.973,592,2.216,593,1.973,594,2.216,595,2.216,596,2.216,597,3.163,598,3.163,599,2.216,600,2.216,601,2.216,602,2.216,603,2.216,604,2.216,605,2.216,606,2.216,607,2.216,608,2.216,609,2.216,610,1.973,611,2.216,612,2.216,613,2.216]],["title/directives/DroppableDirective.html",[17,0.277,531,1.532]],["body/directives/DroppableDirective.html",[0,0.119,3,0.476,4,0.416,5,0.416,6,0.628,7,0.37,9,0.608,10,1.101,13,0.842,14,0.729,15,0.039,16,0.595,17,0.399,18,0.892,19,0.842,20,0.947,21,0.897,22,1.056,23,0.842,24,0.892,26,0.947,31,0.792,32,0.358,39,0.71,40,0.798,45,0.798,47,0.608,50,0.608,52,1.029,53,0.608,59,0.648,60,0.546,61,0.54,62,0.608,63,0.608,64,0.608,65,0.742,67,0.842,70,0.798,79,0.608,81,0.835,82,0.828,83,0.416,90,0.883,92,0.626,94,0.358,96,0.798,100,0.691,101,0.947,104,0.892,112,0.358,117,0.798,118,0.71,119,0.798,120,0.71,121,0.798,122,0.742,126,0.842,128,0.842,131,0.71,132,0.792,170,0.928,172,0.71,177,0.842,192,0.984,207,0.842,209,0.798,210,0.892,211,0.792,213,0.892,215,0.608,217,1.01,231,0.798,258,0.608,259,0.476,260,0.892,264,0.608,268,0.947,287,0.874,317,0.798,318,0.984,319,0.798,321,0.71,322,0.608,370,0.798,374,0.892,381,0.798,401,0.608,413,0.608,523,0.027,524,0.027,531,2.205,536,2.457,537,1.678,538,2.457,539,3.082,540,2.101,541,1.678,542,2.744,543,3.027,544,2.101,545,2.101,546,2.101,547,2.76,548,3.082,549,2.101,550,2.457,551,2.788,552,2.457,553,2.914,554,2.744,555,2.76,556,2.914,557,2.76,558,3.273,559,3.082,560,2.76,561,3.082,562,2.76,563,3.082,564,2.101,565,1.87,566,2.101,567,1.514,568,2.101,569,1.87,570,3.082,571,2.76,572,2.101,573,2.101,574,2.76,575,2.101,576,2.76,577,3.082,578,2.76,579,2.101,580,2.101,581,2.76,582,3.082,583,2.101,584,3.082,585,3.082,586,2.76,587,3.082,588,2.101,589,3.273,590,2.101,591,1.87,592,2.101,593,1.87,594,2.101,595,2.101,596,2.101,597,3.082,598,3.082,599,2.101,600,2.101,601,2.101,602,2.101,603,2.101,604,2.101,605,2.101,606,2.101,607,2.101,608,2.101,609,2.101,610,1.87,611,2.101,612,2.101,613,2.101,614,2.101,615,2.389,616,3.139,617,3.139,619,4.825,650,3.363,651,4.418,652,2.776,653,2.776,654,3.363,655,3.363,656,3.363,657,3.363,658,3.363,659,3.363,660,3.363]],["title/interfaces/GhostElementCreatedEvent.html",[0,0.083,89,0.765]],["body/interfaces/GhostElementCreatedEvent.html",[0,0.147,1,1.036,2,0.389,3,0.305,4,0.266,5,0.266,6,0.229,7,0.3,8,0.537,9,0.389,10,0.805,11,1.437,12,1.437,13,0.97,14,0.569,15,0.04,16,0.549,17,0.291,18,0.583,19,0.518,20,0.583,21,0.777,22,0.874,23,0.897,24,0.583,25,0.89,26,0.583,27,0.89,28,0.594,29,0.89,30,0.89,31,0.518,32,0.229,33,1.205,34,0.726,35,0.965,36,1.067,37,0.89,38,1.067,39,0.346,40,0.583,41,0.594,42,0.594,43,0.594,44,0.594,45,0.389,46,1.269,47,0.7,48,0.89,49,0.594,50,0.389,51,0.594,52,0.7,53,0.389,54,1.205,55,0.594,56,1.185,57,0.484,58,0.726,59,0.399,60,0.532,61,0.346,62,0.389,63,0.389,64,0.389,65,0.791,66,0.965,67,0.905,68,0.726,69,0.537,70,0.777,71,0.537,72,1.185,73,0.537,74,0.537,75,1.185,76,0.805,77,1.392,78,0.871,79,0.389,80,0.805,81,0.816,82,0.816,83,0.708,84,1.333,85,1.421,86,0.965,87,0.89,88,0.89,89,0.805,90,0.845,91,1.382,92,0.305,93,0.537,94,0.344,95,0.484,96,0.389,97,0.594,98,0.537,99,0.594,100,0.266,101,0.583,102,0.805,103,0.89,104,0.932,105,0.537,106,0.594,107,0.537,108,0.537,109,0.805,110,1.072,111,0.594,112,0.412,113,0.965,114,0.805,115,0.537,116,0.594,117,0.777,118,0.346,119,0.389,120,0.518,121,0.583,122,0.71,123,0.965,124,0.435,125,0.594,126,0.346,127,0.537,128,0.74,129,0.537,130,0.594,131,0.518,132,0.346,133,0.594,134,0.537,135,1.269,136,0.537,137,0.484,138,0.537,139,0.594,140,0.537,141,0.594,142,0.594,143,0.594,144,0.537,145,0.594,146,0.594,147,0.594,148,0.805,149,0.537,150,0.594,151,0.537,152,0.594,153,0.594,154,0.594,155,0.537,156,0.537,157,0.537,158,0.594,159,0.484,160,0.537,161,0.594,162,0.965,163,1.382,164,1.25,165,0.89,166,0.89,167,0.594,168,0.594,169,0.537,170,0.777,171,0.805,172,0.622,173,0.537,174,0.594,175,0.594,176,0.537,177,0.887,178,0.435,179,0.537,180,0.537,181,0.594,182,0.594,183,0.537,184,0.537,185,0.537,186,0.537,187,0.537,188,1.25,189,0.594,190,1.067,191,0.594,192,1.089,193,0.594,194,0.89,195,1.627,196,0.805,197,0.805,198,0.89,199,0.89,200,0.89,201,0.89,202,0.89,203,0.89,204,0.594,205,0.89,206,0.89,207,0.931,208,0.537,209,0.389,210,0.389,211,0.346,212,0.594,213,0.7,214,0.594,215,0.389,216,0.89,217,1.095,218,0.594,219,0.594,220,0.89,221,0.594,222,0.537,223,0.537,224,0.594,225,0.594,226,0.537,227,0.594,228,0.537,229,0.594,230,0.89,231,0.906,232,0.594,233,0.537,234,0.537,235,0.435,236,0.594,237,0.537,238,0.89,239,0.594,240,0.594,241,0.594,242,0.594,243,0.594,244,0.594,245,0.537,246,0.89,247,1.185,248,1.185,249,1.269,250,0.89,251,0.89,252,1.067,253,0.594,254,1.269,255,1.185,256,0.89,257,0.594,258,0.832,259,0.305,260,1.048,261,0.594,262,0.594,263,0.594,264,0.777,265,0.594,266,1.067,267,0.594,268,0.832,269,0.594,270,0.594,271,0.594,272,0.594,273,0.594,274,0.594,275,0.594,276,0.594,277,1.185,278,0.89,279,0.594,280,1.185,281,0.89,282,0.594,283,0.594,284,0.594,285,0.594,286,0.594,287,0.622,288,0.594,289,1.067,290,1.067,291,1.067,292,0.594,293,1.067,294,1.067,295,0.594,296,1.067,297,0.89,298,0.89,299,0.89,300,0.594,301,0.89,302,0.89,303,0.594,304,0.89,305,0.89,306,0.594,307,0.594,308,0.594,309,1.067,310,0.594,311,0.594,312,0.594,313,0.594,314,0.594,315,0.594,316,0.594,317,0.389,318,0.583,319,0.583,320,0.594,321,0.346,322,0.389,323,1.185,324,0.594,325,0.594,326,1.185,327,1.333,328,0.89,329,0.594,330,0.594,331,0.594,332,0.594,333,1.067,334,0.594,335,0.89,336,0.594,337,0.537,338,0.537,339,0.594,340,0.594,341,0.594,342,0.594,343,0.594,344,0.594,345,0.594,346,0.594,347,0.89,348,0.594,349,0.594,350,0.594,351,0.594,352,0.594,353,0.89,354,0.594,355,0.594,356,0.594,357,0.89,358,0.594,359,0.594,360,0.594,361,0.594,362,0.594,363,0.594,364,1.067,365,0.594,366,0.89,367,0.594,368,0.594,369,0.594,370,0.7,371,0.594,372,0.594,373,0.594,374,0.389,375,0.594,376,0.594,377,0.594,378,0.594,379,0.594,380,0.594,381,0.583,382,0.594,383,0.594,384,0.594,385,0.594,386,0.594,387,0.594,388,0.594,389,0.594,390,0.594,391,0.594,392,0.594,393,0.594,394,0.594,395,0.594,396,0.594,397,0.594,398,0.594,399,0.594,400,0.594,401,0.389,402,0.89,403,0.594,404,0.594,405,0.594,406,0.594,407,0.594,408,1.185,409,1.067,410,0.594,411,0.594,412,0.594,413,0.932,414,0.594,415,0.594,416,0.594,417,0.594,418,0.594,419,0.594,420,0.89,421,0.594,422,0.594,423,0.594,424,0.594,425,0.594,426,0.594,427,0.89,428,1.333,429,0.89,430,0.89,431,0.594,432,0.594,433,0.89,434,0.89,435,0.89,436,0.594,437,1.067,438,0.89,439,0.594,440,1.269,441,1.185,442,1.269,443,1.067,444,1.067,445,0.594,446,1.269,447,0.594,448,0.89,449,0.594,450,0.594,451,0.594,452,0.594,453,0.594,454,0.594,455,0.594,456,1.067,457,0.594,458,0.89,459,0.89,460,0.594,461,0.594,462,0.89,463,0.89,464,0.594,465,0.594,466,0.594,467,0.594,468,0.594,469,0.594,470,0.594,471,0.594,472,0.594,473,0.594,474,0.594,475,0.594,476,0.89,477,0.594,478,0.537,479,0.89,480,0.594,481,0.594,482,0.594,483,0.594,484,0.594,485,0.594,486,0.594,487,0.594,488,0.594,489,0.594,490,0.594,491,0.594,492,0.594,493,0.594,494,0.594,495,0.594,496,0.594,497,0.89,498,0.89,499,0.89,500,0.89,501,0.89,502,0.89,503,0.537,504,0.594,505,0.89,506,0.89,507,0.594,508,0.594,509,0.594,510,1.185,511,0.89,512,0.594,513,0.594,514,0.594,515,0.594,516,0.594,517,0.89,518,0.594,519,0.594,520,0.89,521,0.594,522,0.594,523,0.02,524,0.02]],["title/interfaces/PointerEvent.html",[0,0.083,80,0.765]],["body/interfaces/PointerEvent.html",[0,0.147,1,1.035,2,0.389,3,0.305,4,0.266,5,0.266,6,0.229,7,0.3,8,0.536,9,0.389,10,0.804,11,1.437,12,1.437,13,0.97,14,0.569,15,0.04,16,0.549,17,0.291,18,0.583,19,0.518,20,0.583,21,0.776,22,0.873,23,0.897,24,0.583,25,0.889,26,0.583,27,0.889,28,0.593,29,0.889,30,0.889,31,0.518,32,0.229,33,1.205,34,0.725,35,0.964,36,1.066,37,0.889,38,1.066,39,0.346,40,0.583,41,0.593,42,0.593,43,0.593,44,0.593,45,0.389,46,1.269,47,0.699,48,0.889,49,0.593,50,0.389,51,0.593,52,0.699,53,0.389,54,1.205,55,0.593,56,1.184,57,0.484,58,0.725,59,0.399,60,0.531,61,0.346,62,0.389,63,0.389,64,0.389,65,0.791,66,0.964,67,0.905,68,0.725,69,0.536,70,0.777,71,0.536,72,1.184,73,0.536,74,0.536,75,1.184,76,0.804,77,1.392,78,0.87,79,0.389,80,0.964,81,0.816,82,0.816,83,0.72,84,1.42,85,1.479,86,0.964,87,0.889,88,0.889,89,0.536,90,0.836,91,1.269,92,0.305,93,0.536,94,0.344,95,0.484,96,0.389,97,0.593,98,0.536,99,0.593,100,0.266,101,0.583,102,0.804,103,0.889,104,0.931,105,0.536,106,0.593,107,0.536,108,0.536,109,0.804,110,1.071,111,0.593,112,0.412,113,0.964,114,0.804,115,0.536,116,0.593,117,0.777,118,0.346,119,0.389,120,0.518,121,0.583,122,0.71,123,0.964,124,0.435,125,0.593,126,0.346,127,0.536,128,0.739,129,0.536,130,0.593,131,0.518,132,0.346,133,0.593,134,0.536,135,1.269,136,0.536,137,0.484,138,0.536,139,0.593,140,0.536,141,0.593,142,0.593,143,0.593,144,0.536,145,0.593,146,0.593,147,0.593,148,0.804,149,0.536,150,0.593,151,0.536,152,0.593,153,0.593,154,0.593,155,0.536,156,0.536,157,0.536,158,0.593,159,0.484,160,0.536,161,0.593,162,0.964,163,1.381,164,1.249,165,0.889,166,0.889,167,0.593,168,0.593,169,0.536,170,0.776,171,0.804,172,0.621,173,0.536,174,0.593,175,0.593,176,0.536,177,0.887,178,0.435,179,0.536,180,0.536,181,0.593,182,0.593,183,0.536,184,0.536,185,0.536,186,0.536,187,0.536,188,1.249,189,0.593,190,1.066,191,0.593,192,1.089,193,0.593,194,0.889,195,1.627,196,0.804,197,0.804,198,0.889,199,0.889,200,0.889,201,0.889,202,0.889,203,0.889,204,0.593,205,0.889,206,0.889,207,0.931,208,0.536,209,0.389,210,0.389,211,0.346,212,0.593,213,0.699,214,0.593,215,0.389,216,0.889,217,1.095,218,0.593,219,0.593,220,0.889,221,0.593,222,0.536,223,0.536,224,0.593,225,0.593,226,0.536,227,0.593,228,0.536,229,0.593,230,0.889,231,0.906,232,0.593,233,0.536,234,0.536,235,0.435,236,0.593,237,0.536,238,0.889,239,0.593,240,0.593,241,0.593,242,0.593,243,0.593,244,0.593,245,0.536,246,0.889,247,1.184,248,1.184,249,1.269,250,0.889,251,0.889,252,1.066,253,0.593,254,1.269,255,1.184,256,0.889,257,0.593,258,0.832,259,0.305,260,1.047,261,0.593,262,0.593,263,0.593,264,0.777,265,0.593,266,1.066,267,0.593,268,0.832,269,0.593,270,0.593,271,0.593,272,0.593,273,0.593,274,0.593,275,0.593,276,0.593,277,1.184,278,0.889,279,0.593,280,1.184,281,0.889,282,0.593,283,0.593,284,0.593,285,0.593,286,0.593,287,0.621,288,0.593,289,1.066,290,1.066,291,1.066,292,0.593,293,1.066,294,1.066,295,0.593,296,1.066,297,0.889,298,0.889,299,0.889,300,0.593,301,0.889,302,0.889,303,0.593,304,0.889,305,0.889,306,0.593,307,0.593,308,0.593,309,1.066,310,0.593,311,0.593,312,0.593,313,0.593,314,0.593,315,0.593,316,0.593,317,0.389,318,0.583,319,0.583,320,0.593,321,0.346,322,0.389,323,1.184,324,0.593,325,0.593,326,1.184,327,1.332,328,0.889,329,0.593,330,0.593,331,0.593,332,0.593,333,1.066,334,0.593,335,0.889,336,0.593,337,0.536,338,0.536,339,0.593,340,0.593,341,0.593,342,0.593,343,0.593,344,0.593,345,0.593,346,0.593,347,0.889,348,0.593,349,0.593,350,0.593,351,0.593,352,0.593,353,0.889,354,0.593,355,0.593,356,0.593,357,0.889,358,0.593,359,0.593,360,0.593,361,0.593,362,0.593,363,0.593,364,1.066,365,0.593,366,0.889,367,0.593,368,0.593,369,0.593,370,0.699,371,0.593,372,0.593,373,0.593,374,0.389,375,0.593,376,0.593,377,0.593,378,0.593,379,0.593,380,0.593,381,0.583,382,0.593,383,0.593,384,0.593,385,0.593,386,0.593,387,0.593,388,0.593,389,0.593,390,0.593,391,0.593,392,0.593,393,0.593,394,0.593,395,0.593,396,0.593,397,0.593,398,0.593,399,0.593,400,0.593,401,0.389,402,0.889,403,0.593,404,0.593,405,0.593,406,0.593,407,0.593,408,1.184,409,1.066,410,0.593,411,0.593,412,0.593,413,0.931,414,0.593,415,0.593,416,0.593,417,0.593,418,0.593,419,0.593,420,0.889,421,0.593,422,0.593,423,0.593,424,0.593,425,0.593,426,0.593,427,0.889,428,1.332,429,0.889,430,0.889,431,0.593,432,0.593,433,0.889,434,0.889,435,0.889,436,0.593,437,1.066,438,0.889,439,0.593,440,1.269,441,1.184,442,1.269,443,1.066,444,1.066,445,0.593,446,1.269,447,0.593,448,0.889,449,0.593,450,0.593,451,0.593,452,0.593,453,0.593,454,0.593,455,0.593,456,1.066,457,0.593,458,0.889,459,0.889,460,0.593,461,0.593,462,0.889,463,0.889,464,0.593,465,0.593,466,0.593,467,0.593,468,0.593,469,0.593,470,0.593,471,0.593,472,0.593,473,0.593,474,0.593,475,0.593,476,0.889,477,0.593,478,0.536,479,0.889,480,0.593,481,0.593,482,0.593,483,0.593,484,0.593,485,0.593,486,0.593,487,0.593,488,0.593,489,0.593,490,0.593,491,0.593,492,0.593,493,0.593,494,0.593,495,0.593,496,0.593,497,0.889,498,0.889,499,0.889,500,0.889,501,0.889,502,0.889,503,0.536,504,0.593,505,0.889,506,0.889,507,0.593,508,0.593,509,0.593,510,1.184,511,0.889,512,0.593,513,0.593,514,0.593,515,0.593,516,0.593,517,0.889,518,0.593,519,0.593,520,0.889,521,0.593,522,0.593,523,0.02,524,0.02]],["title/interfaces/SnapGrid.html",[0,0.083,68,0.69]],["body/interfaces/SnapGrid.html",[0,0.147,1,1.036,2,0.39,3,0.305,4,0.267,5,0.267,6,0.23,7,0.3,8,0.537,9,0.39,10,0.805,11,1.46,12,1.46,13,0.97,14,0.532,15,0.04,16,0.549,17,0.292,18,0.584,19,0.519,20,0.584,21,0.777,22,0.874,23,0.897,24,0.584,25,0.89,26,0.584,27,0.89,28,0.594,29,0.89,30,0.89,31,0.777,32,0.23,33,1.206,34,0.726,35,0.966,36,1.067,37,0.89,38,1.067,39,0.346,40,0.584,41,0.594,42,0.594,43,0.594,44,0.594,45,0.39,46,1.27,47,0.7,48,0.89,49,0.594,50,0.39,51,0.594,52,0.7,53,0.39,54,1.206,55,0.594,56,1.186,57,0.485,58,0.726,59,0.399,60,0.532,61,0.346,62,0.39,63,0.39,64,0.39,65,0.791,66,0.966,67,0.906,68,0.871,69,0.537,70,0.777,71,0.537,72,1.186,73,0.537,74,0.537,75,1.186,76,0.805,77,1.392,78,0.871,79,0.39,80,0.805,81,0.798,82,0.798,83,0.708,84,1.333,85,1.421,86,0.966,87,0.89,88,0.89,89,0.537,90,0.836,91,1.27,92,0.305,93,0.537,94,0.344,95,0.485,96,0.39,97,0.594,98,0.537,99,0.594,100,0.267,101,0.584,102,0.805,103,0.89,104,0.932,105,0.537,106,0.594,107,0.537,108,0.537,109,0.805,110,1.072,111,0.594,112,0.413,113,0.966,114,0.805,115,0.537,116,0.594,117,0.777,118,0.346,119,0.39,120,0.519,121,0.584,122,0.71,123,0.966,124,0.436,125,0.594,126,0.346,127,0.537,128,0.74,129,0.537,130,0.594,131,0.519,132,0.346,133,0.594,134,0.537,135,1.27,136,0.537,137,0.485,138,0.537,139,0.594,140,0.537,141,0.594,142,0.594,143,0.594,144,0.537,145,0.594,146,0.594,147,0.594,148,0.805,149,0.537,150,0.594,151,0.537,152,0.594,153,0.594,154,0.594,155,0.537,156,0.537,157,0.537,158,0.594,159,0.485,160,0.537,161,0.594,162,0.966,163,1.382,164,1.25,165,0.89,166,0.89,167,0.594,168,0.594,169,0.537,170,0.777,171,0.805,172,0.622,173,0.537,174,0.594,175,0.594,176,0.537,177,0.887,178,0.436,179,0.537,180,0.537,181,0.594,182,0.594,183,0.537,184,0.537,185,0.537,186,0.537,187,0.537,188,1.25,189,0.594,190,1.067,191,0.594,192,1.089,193,0.594,194,0.89,195,1.627,196,0.805,197,0.805,198,0.89,199,0.89,200,0.89,201,0.89,202,0.89,203,0.89,204,0.594,205,0.89,206,0.89,207,0.931,208,0.537,209,0.39,210,0.39,211,0.346,212,0.594,213,0.7,214,0.594,215,0.39,216,0.89,217,1.095,218,0.594,219,0.594,220,0.89,221,0.594,222,0.537,223,0.537,224,0.594,225,0.594,226,0.537,227,0.594,228,0.537,229,0.594,230,0.89,231,0.906,232,0.594,233,0.537,234,0.537,235,0.436,236,0.594,237,0.537,238,0.89,239,0.594,240,0.594,241,0.594,242,0.594,243,0.594,244,0.594,245,0.537,246,0.89,247,1.186,248,1.186,249,1.27,250,0.89,251,0.89,252,1.067,253,0.594,254,1.27,255,1.186,256,0.89,257,0.594,258,0.833,259,0.305,260,1.048,261,0.594,262,0.594,263,0.594,264,0.777,265,0.594,266,1.067,267,0.594,268,0.833,269,0.594,270,0.594,271,0.594,272,0.594,273,0.594,274,0.594,275,0.594,276,0.594,277,1.186,278,0.89,279,0.594,280,1.186,281,0.89,282,0.594,283,0.594,284,0.594,285,0.594,286,0.594,287,0.622,288,0.594,289,1.067,290,1.067,291,1.067,292,0.594,293,1.067,294,1.067,295,0.594,296,1.067,297,0.89,298,0.89,299,0.89,300,0.594,301,0.89,302,0.89,303,0.594,304,0.89,305,0.89,306,0.594,307,0.594,308,0.594,309,1.067,310,0.594,311,0.594,312,0.594,313,0.594,314,0.594,315,0.594,316,0.594,317,0.39,318,0.584,319,0.584,320,0.594,321,0.346,322,0.39,323,1.186,324,0.594,325,0.594,326,1.186,327,1.333,328,0.89,329,0.594,330,0.594,331,0.594,332,0.594,333,1.067,334,0.594,335,0.89,336,0.594,337,0.537,338,0.537,339,0.594,340,0.594,341,0.594,342,0.594,343,0.594,344,0.594,345,0.594,346,0.594,347,0.89,348,0.594,349,0.594,350,0.594,351,0.594,352,0.594,353,0.89,354,0.594,355,0.594,356,0.594,357,0.89,358,0.594,359,0.594,360,0.594,361,0.594,362,0.594,363,0.594,364,1.067,365,0.594,366,0.89,367,0.594,368,0.594,369,0.594,370,0.7,371,0.594,372,0.594,373,0.594,374,0.39,375,0.594,376,0.594,377,0.594,378,0.594,379,0.594,380,0.594,381,0.584,382,0.594,383,0.594,384,0.594,385,0.594,386,0.594,387,0.594,388,0.594,389,0.594,390,0.594,391,0.594,392,0.594,393,0.594,394,0.594,395,0.594,396,0.594,397,0.594,398,0.594,399,0.594,400,0.594,401,0.39,402,0.89,403,0.594,404,0.594,405,0.594,406,0.594,407,0.594,408,1.186,409,1.067,410,0.594,411,0.594,412,0.594,413,0.932,414,0.594,415,0.594,416,0.594,417,0.594,418,0.594,419,0.594,420,0.89,421,0.594,422,0.594,423,0.594,424,0.594,425,0.594,426,0.594,427,0.89,428,1.333,429,0.89,430,0.89,431,0.594,432,0.594,433,0.89,434,0.89,435,0.89,436,0.594,437,1.067,438,0.89,439,0.594,440,1.27,441,1.186,442,1.27,443,1.067,444,1.067,445,0.594,446,1.27,447,0.594,448,0.89,449,0.594,450,0.594,451,0.594,452,0.594,453,0.594,454,0.594,455,0.594,456,1.067,457,0.594,458,0.89,459,0.89,460,0.594,461,0.594,462,0.89,463,0.89,464,0.594,465,0.594,466,0.594,467,0.594,468,0.594,469,0.594,470,0.594,471,0.594,472,0.594,473,0.594,474,0.594,475,0.594,476,0.89,477,0.594,478,0.537,479,0.89,480,0.594,481,0.594,482,0.594,483,0.594,484,0.594,485,0.594,486,0.594,487,0.594,488,0.594,489,0.594,490,0.594,491,0.594,492,0.594,493,0.594,494,0.594,495,0.594,496,0.594,497,0.89,498,0.89,499,0.89,500,0.89,501,0.89,502,0.89,503,0.537,504,0.594,505,0.89,506,0.89,507,0.594,508,0.594,509,0.594,510,1.186,511,0.89,512,0.594,513,0.594,514,0.594,515,0.594,516,0.594,517,0.89,518,0.594,519,0.594,520,0.89,521,0.594,522,0.594,523,0.02,524,0.02]],["title/interfaces/TimeLongPress.html",[0,0.083,86,0.765]],["body/interfaces/TimeLongPress.html",[0,0.147,1,1.037,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.538,9,0.39,10,0.806,11,1.437,12,1.437,13,0.97,14,0.532,15,0.04,16,0.55,17,0.292,18,0.584,19,0.519,20,0.584,21,0.777,22,0.874,23,0.897,24,0.584,25,0.891,26,0.584,27,0.891,28,0.595,29,0.891,30,0.891,31,0.519,32,0.23,33,1.206,34,0.727,35,0.966,36,1.068,37,0.891,38,1.068,39,0.347,40,0.584,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.27,47,0.701,48,0.891,49,0.595,50,0.39,51,0.595,52,0.701,53,0.39,54,1.206,55,0.595,56,1.186,57,0.485,58,0.727,59,0.4,60,0.532,61,0.347,62,0.39,63,0.39,64,0.39,65,0.791,66,0.966,67,0.906,68,0.727,69,0.538,70,0.778,71,0.538,72,1.186,73,0.538,74,0.538,75,1.186,76,0.806,77,1.393,78,0.872,79,0.39,80,0.806,81,0.799,82,0.799,83,0.708,84,1.334,85,1.422,86,1.073,87,1.27,88,1.27,89,0.538,90,0.836,91,1.27,92,0.306,93,0.538,94,0.344,95,0.485,96,0.39,97,0.595,98,0.538,99,0.595,100,0.267,101,0.584,102,0.806,103,0.891,104,0.932,105,0.538,106,0.595,107,0.538,108,0.538,109,0.806,110,1.073,111,0.595,112,0.413,113,0.966,114,0.806,115,0.538,116,0.595,117,0.778,118,0.347,119,0.39,120,0.519,121,0.584,122,0.711,123,0.966,124,0.436,125,0.595,126,0.347,127,0.538,128,0.74,129,0.538,130,0.595,131,0.519,132,0.347,133,0.595,134,0.538,135,1.27,136,0.538,137,0.485,138,0.538,139,0.595,140,0.538,141,0.595,142,0.595,143,0.595,144,0.538,145,0.595,146,0.595,147,0.595,148,0.806,149,0.538,150,0.595,151,0.538,152,0.595,153,0.595,154,0.595,155,0.538,156,0.538,157,0.538,158,0.595,159,0.485,160,0.538,161,0.595,162,0.966,163,1.383,164,1.251,165,0.891,166,0.891,167,0.595,168,0.595,169,0.538,170,0.777,171,0.806,172,0.623,173,0.538,174,0.595,175,0.595,176,0.538,177,0.887,178,0.436,179,0.538,180,0.538,181,0.595,182,0.595,183,0.538,184,0.538,185,0.538,186,0.538,187,0.538,188,1.251,189,0.595,190,1.068,191,0.595,192,1.089,193,0.595,194,0.891,195,1.628,196,0.806,197,0.806,198,0.891,199,0.891,200,0.891,201,0.891,202,0.891,203,0.891,204,0.595,205,0.891,206,0.891,207,0.931,208,0.538,209,0.39,210,0.39,211,0.347,212,0.595,213,0.701,214,0.595,215,0.39,216,0.891,217,1.096,218,0.595,219,0.595,220,0.891,221,0.595,222,0.538,223,0.538,224,0.595,225,0.595,226,0.538,227,0.595,228,0.538,229,0.595,230,0.891,231,0.907,232,0.595,233,0.538,234,0.538,235,0.436,236,0.595,237,0.538,238,0.891,239,0.595,240,0.595,241,0.595,242,0.595,243,0.595,244,0.595,245,0.538,246,0.891,247,1.186,248,1.186,249,1.27,250,0.891,251,0.891,252,1.068,253,0.595,254,1.27,255,1.186,256,0.891,257,0.595,258,0.833,259,0.306,260,1.048,261,0.595,262,0.595,263,0.595,264,0.778,265,0.595,266,1.068,267,0.595,268,0.833,269,0.595,270,0.595,271,0.595,272,0.595,273,0.595,274,0.595,275,0.595,276,0.595,277,1.186,278,0.891,279,0.595,280,1.186,281,0.891,282,0.595,283,0.595,284,0.595,285,0.595,286,0.595,287,0.623,288,0.595,289,1.068,290,1.068,291,1.068,292,0.595,293,1.068,294,1.068,295,0.595,296,1.068,297,0.891,298,0.891,299,0.891,300,0.595,301,0.891,302,0.891,303,0.595,304,0.891,305,0.891,306,0.595,307,0.595,308,0.595,309,1.068,310,0.595,311,0.595,312,0.595,313,0.595,314,0.595,315,0.595,316,0.595,317,0.39,318,0.584,319,0.584,320,0.595,321,0.347,322,0.39,323,1.186,324,0.595,325,0.595,326,1.186,327,1.334,328,0.891,329,0.595,330,0.595,331,0.595,332,0.595,333,1.068,334,0.595,335,0.891,336,0.595,337,0.538,338,0.538,339,0.595,340,0.595,341,0.595,342,0.595,343,0.595,344,0.595,345,0.595,346,0.595,347,0.891,348,0.595,349,0.595,350,0.595,351,0.595,352,0.595,353,0.891,354,0.595,355,0.595,356,0.595,357,0.891,358,0.595,359,0.595,360,0.595,361,0.595,362,0.595,363,0.595,364,1.068,365,0.595,366,0.891,367,0.595,368,0.595,369,0.595,370,0.701,371,0.595,372,0.595,373,0.595,374,0.39,375,0.595,376,0.595,377,0.595,378,0.595,379,0.595,380,0.595,381,0.584,382,0.595,383,0.595,384,0.595,385,0.595,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.39,402,0.891,403,0.595,404,0.595,405,0.595,406,0.595,407,0.595,408,1.186,409,1.068,410,0.595,411,0.595,412,0.595,413,0.932,414,0.595,415,0.595,416,0.595,417,0.595,418,0.595,419,0.595,420,0.891,421,0.595,422,0.595,423,0.595,424,0.595,425,0.595,426,0.595,427,0.891,428,1.334,429,0.891,430,0.891,431,0.595,432,0.595,433,0.891,434,0.891,435,0.891,436,0.595,437,1.068,438,0.891,439,0.595,440,1.27,441,1.186,442,1.27,443,1.068,444,1.068,445,0.595,446,1.27,447,0.595,448,0.891,449,0.595,450,0.595,451,0.595,452,0.595,453,0.595,454,0.595,455,0.595,456,1.068,457,0.595,458,0.891,459,0.891,460,0.595,461,0.595,462,0.891,463,0.891,464,0.595,465,0.595,466,0.595,467,0.595,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.891,477,0.595,478,0.538,479,0.891,480,0.595,481,0.595,482,0.595,483,0.595,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.891,498,0.891,499,0.891,500,0.891,501,0.891,502,0.891,503,0.538,504,0.595,505,0.891,506,0.891,507,0.595,508,0.595,509,0.595,510,1.186,511,0.891,512,0.595,513,0.595,514,0.595,515,0.595,516,0.595,517,0.891,518,0.595,519,0.595,520,0.891,521,0.595,522,0.595,523,0.02,524,0.02]],["title/interfaces/ValidateDragParams.html",[0,0.083,76,0.765]],["body/interfaces/ValidateDragParams.html",[0,0.147,1,1.089,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.539,9,0.39,10,0.807,11,1.438,12,1.438,13,0.961,14,0.57,15,0.04,16,0.55,17,0.292,18,0.585,19,0.52,20,0.585,21,0.777,22,0.875,23,0.897,24,0.585,25,0.892,26,0.585,27,0.892,28,0.595,29,0.892,30,0.892,31,0.52,32,0.23,33,1.207,34,0.728,35,0.967,36,1.069,37,0.892,38,1.069,39,0.347,40,0.585,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.271,47,0.701,48,0.892,49,0.595,50,0.39,51,0.595,52,0.701,53,0.39,54,1.207,55,0.595,56,1.187,57,0.486,58,0.728,59,0.4,60,0.532,61,0.347,62,0.39,63,0.39,64,0.39,65,0.791,66,0.967,67,0.906,68,0.728,69,0.539,70,0.833,71,0.539,72,1.187,73,0.539,74,0.539,75,1.187,76,0.967,77,1.428,78,0.872,79,0.39,80,0.807,81,0.799,82,0.799,83,0.708,84,1.334,85,1.422,86,0.967,87,0.892,88,0.892,89,0.539,90,0.836,91,1.271,92,0.306,93,0.539,94,0.345,95,0.486,96,0.39,97,0.595,98,0.539,99,0.595,100,0.267,101,0.585,102,0.807,103,0.892,104,0.933,105,0.539,106,0.595,107,0.539,108,0.539,109,0.807,110,1.074,111,0.595,112,0.413,113,0.967,114,0.807,115,0.539,116,0.595,117,0.778,118,0.347,119,0.39,120,0.52,121,0.585,122,0.711,123,0.967,124,0.437,125,0.595,126,0.347,127,0.539,128,0.741,129,0.539,130,0.595,131,0.52,132,0.347,133,0.595,134,0.539,135,1.271,136,0.539,137,0.486,138,0.539,139,0.595,140,0.539,141,0.595,142,0.595,143,0.595,144,0.539,145,0.595,146,0.595,147,0.595,148,0.807,149,0.539,150,0.595,151,0.539,152,0.595,153,0.595,154,0.595,155,0.539,156,0.539,157,0.539,158,0.595,159,0.486,160,0.539,161,0.595,162,0.967,163,1.383,164,1.251,165,0.892,166,0.892,167,0.595,168,0.595,169,0.539,170,0.777,171,0.807,172,0.623,173,0.539,174,0.595,175,0.595,176,0.539,177,0.888,178,0.437,179,0.539,180,0.539,181,0.595,182,0.595,183,0.539,184,0.539,185,0.539,186,0.539,187,0.539,188,1.251,189,0.595,190,1.069,191,0.595,192,1.089,193,0.595,194,0.892,195,1.628,196,0.807,197,0.807,198,0.892,199,0.892,200,0.892,201,0.892,202,0.892,203,0.892,204,0.595,205,0.892,206,0.892,207,0.932,208,0.539,209,0.39,210,0.39,211,0.347,212,0.595,213,0.701,214,0.595,215,0.39,216,0.892,217,1.096,218,0.595,219,0.595,220,0.892,221,0.595,222,0.539,223,0.539,224,0.595,225,0.595,226,0.539,227,0.595,228,0.539,229,0.595,230,0.892,231,0.907,232,0.595,233,0.539,234,0.539,235,0.437,236,0.595,237,0.539,238,0.892,239,0.595,240,0.595,241,0.595,242,0.595,243,0.595,244,0.595,245,0.539,246,0.892,247,1.187,248,1.187,249,1.271,250,0.892,251,0.892,252,1.069,253,0.595,254,1.271,255,1.187,256,0.892,257,0.595,258,0.833,259,0.306,260,1.048,261,0.595,262,0.595,263,0.595,264,0.778,265,0.595,266,1.069,267,0.595,268,0.833,269,0.595,270,0.595,271,0.595,272,0.595,273,0.595,274,0.595,275,0.595,276,0.595,277,1.187,278,0.892,279,0.595,280,1.187,281,0.892,282,0.595,283,0.595,284,0.595,285,0.595,286,0.595,287,0.623,288,0.595,289,1.069,290,1.069,291,1.069,292,0.595,293,1.069,294,1.069,295,0.595,296,1.069,297,0.892,298,0.892,299,0.892,300,0.595,301,0.892,302,0.892,303,0.595,304,0.892,305,0.892,306,0.595,307,0.595,308,0.595,309,1.069,310,0.595,311,0.595,312,0.595,313,0.595,314,0.595,315,0.595,316,0.595,317,0.39,318,0.585,319,0.585,320,0.595,321,0.347,322,0.39,323,1.187,324,0.595,325,0.595,326,1.187,327,1.334,328,0.892,329,0.595,330,0.595,331,0.595,332,0.595,333,1.069,334,0.595,335,0.892,336,0.595,337,0.539,338,0.539,339,0.595,340,0.595,341,0.595,342,0.595,343,0.595,344,0.595,345,0.595,346,0.595,347,0.892,348,0.595,349,0.595,350,0.595,351,0.595,352,0.595,353,0.892,354,0.595,355,0.595,356,0.595,357,0.892,358,0.595,359,0.595,360,0.595,361,0.595,362,0.595,363,0.595,364,1.069,365,0.595,366,0.892,367,0.595,368,0.595,369,0.595,370,0.701,371,0.595,372,0.595,373,0.595,374,0.39,375,0.595,376,0.595,377,0.595,378,0.595,379,0.595,380,0.595,381,0.585,382,0.595,383,0.595,384,0.595,385,0.595,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.39,402,0.892,403,0.595,404,0.595,405,0.595,406,0.595,407,0.595,408,1.187,409,1.069,410,0.595,411,0.595,412,0.595,413,0.933,414,0.595,415,0.595,416,0.595,417,0.595,418,0.595,419,0.595,420,0.892,421,0.595,422,0.595,423,0.595,424,0.595,425,0.595,426,0.595,427,0.892,428,1.334,429,0.892,430,0.892,431,0.595,432,0.595,433,0.892,434,0.892,435,0.892,436,0.595,437,1.069,438,0.892,439,0.595,440,1.271,441,1.187,442,1.271,443,1.069,444,1.069,445,0.595,446,1.271,447,0.595,448,0.892,449,0.595,450,0.595,451,0.595,452,0.595,453,0.595,454,0.595,455,0.595,456,1.069,457,0.595,458,0.892,459,0.892,460,0.595,461,0.595,462,0.892,463,0.892,464,0.595,465,0.595,466,0.595,467,0.595,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.892,477,0.595,478,0.539,479,0.892,480,0.595,481,0.595,482,0.595,483,0.595,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.892,498,0.892,499,0.892,500,0.892,501,0.892,502,0.892,503,0.539,504,0.595,505,0.892,506,0.892,507,0.595,508,0.595,509,0.595,510,1.187,511,0.892,512,0.595,513,0.595,514,0.595,515,0.595,516,0.595,517,0.892,518,0.595,519,0.595,520,0.892,521,0.595,522,0.595,523,0.02,524,0.02,618,2.671]],["title/interfaces/ValidateDropParams.html",[0,0.083,550,1.708]],["body/interfaces/ValidateDropParams.html",[0,0.125,2,0.656,3,0.514,4,0.449,5,0.449,6,0.387,7,0.351,13,0.866,14,0.449,15,0.039,16,0.608,17,0.419,18,0.839,19,0.746,20,0.839,21,0.916,22,1.008,23,0.866,24,0.839,26,0.839,31,0.746,32,0.387,39,0.746,40,0.839,45,0.839,47,0.656,50,0.656,52,0.925,53,0.656,59,0.574,60,0.574,61,0.583,62,0.656,63,0.656,64,0.656,65,0.764,67,0.866,70,0.925,79,0.656,81,0.846,82,0.84,83,0.449,90,0.864,92,0.514,94,0.387,96,0.656,100,0.667,101,0.975,104,0.925,112,0.387,117,0.839,118,0.583,119,0.656,120,0.583,121,0.656,122,0.657,126,0.746,128,0.746,131,0.583,132,0.583,170,0.866,172,0.746,177,0.866,192,1.008,207,0.866,209,0.656,210,0.656,211,0.583,213,0.656,215,0.656,217,1.031,231,0.839,258,0.656,259,0.514,260,0.925,264,0.656,268,0.975,287,0.895,317,0.839,318,1.008,319,0.839,321,0.746,322,0.656,370,0.839,374,0.925,381,0.839,401,0.656,413,0.656,523,0.029,524,0.029,531,1.812,536,2.582,537,1.812,538,2.846,539,2.9,540,2.268,541,1.812,542,2.846,543,3.101,544,2.268,545,2.268,546,2.268,547,2.9,548,3.197,549,2.268,550,2.846,551,2.554,552,2.019,553,2.582,554,2.019,555,2.268,556,2.582,557,2.268,558,2.9,559,2.268,560,2.268,561,2.268,562,2.268,563,2.268,564,2.268,565,2.019,566,2.268,567,1.634,568,2.268,569,2.019,570,2.268,571,2.9,572,2.268,573,2.268,574,2.9,575,2.268,576,2.9,577,3.197,578,2.9,579,2.268,580,2.268,581,2.9,582,3.197,583,2.268,584,3.197,585,3.197,586,2.9,587,3.197,588,2.268,589,3.37,590,2.268,591,2.019,592,2.268,593,2.019,594,2.268,595,2.268,596,2.268,597,3.197,598,3.197,599,2.268,600,2.268,601,2.268,602,2.268,603,2.268,604,2.268,605,2.268,606,2.268,607,2.268,608,2.268,609,2.268,610,2.019,611,2.268,612,2.268,613,2.268]],["title/changelog.html",[178,0.521,235,0.521,661,2.13]],["body/changelog.html",[1,0.566,2,0.455,5,0.311,7,0.368,9,0.654,11,0.627,12,0.627,14,0.311,15,0.031,16,0.386,17,0.461,21,0.744,23,0.744,34,0.566,39,0.744,54,0.627,57,0.814,58,0.814,60,0.666,68,1.042,77,0.627,78,1.042,81,0.356,82,0.356,83,0.651,90,0.865,93,0.902,94,0.451,100,0.524,102,0.627,105,0.902,108,0.902,109,0.627,110,1.406,112,0.636,113,1.503,114,0.627,115,1.056,118,0.956,120,0.744,122,0.814,123,1.313,124,1.162,126,0.581,127,0.902,129,1.155,131,0.821,132,0.68,134,1.155,136,0.627,137,0.566,140,0.627,144,0.627,148,1.056,149,1.056,151,0.627,155,0.902,156,0.627,157,0.627,159,1.042,160,0.902,162,0.627,164,0.627,169,0.902,170,0.581,172,0.68,173,1.056,176,0.627,177,0.581,179,1.313,180,0.627,184,0.902,185,1.056,186,0.627,187,1.056,196,0.627,197,0.627,207,0.404,208,0.627,211,0.404,222,0.627,226,1.433,228,0.627,233,1.155,234,1.155,237,0.902,245,0.627,259,0.6,287,0.404,337,0.902,338,0.627,478,0.902,503,0.627,523,0.022,524,0.022,525,2.571,526,2.577,541,1.256,551,1.256,552,2.012,553,2.012,554,1.399,565,2.73,567,2.689,569,1.399,591,1.399,593,1.399,610,1.399,616,2.571,617,1.788,641,2.571,643,3.011,644,3.742,645,3.488,647,2.571,661,2.077,662,2.517,663,5.64,664,2.517,665,2.517,666,2.517,667,2.987,668,2.517,669,2.517,670,2.077,671,4.237,672,4.909,673,3.619,674,5.571,675,3.498,676,5.266,677,5.64,678,5.266,679,3.742,680,3.619,681,5.266,682,2.517,683,2.517,684,5.75,685,4.909,686,5.973,687,3.899,688,4.783,689,2.517,690,2.517,691,2.517,692,5.926,693,2.517,694,3.619,695,5.111,696,2.077,697,2.517,698,2.517,699,2.517,700,2.517,701,2.517,702,2.517,703,4.237,704,3.619,705,4.633,706,4.633,707,2.517,708,2.517,709,2.517,710,3.619,711,4.633,712,4.237,713,4.909,714,2.517,715,3.498,716,2.517,717,3.619,718,3.619,719,2.517,720,5.794,721,5.64,722,2.517,723,2.517,724,3.825,725,2.517,726,2.517,727,2.517,728,2.517,729,5.926,730,3.619,731,2.517,732,2.517,733,2.517,734,4.237,735,6.179,736,6.179,737,2.517,738,4.237,739,2.517,740,2.517,741,2.517,742,2.517,743,2.517,744,2.077,745,2.517,746,2.517,747,5.488,748,2.517,749,2.987,750,2.517,751,2.517,752,2.517,753,2.517,754,4.237,755,2.517,756,2.517,757,5.111,758,2.517,759,4.633,760,2.517,761,2.517,762,2.517,763,4.909,764,4.237,765,2.517,766,2.517,767,2.517,768,2.517,769,2.077,770,5.111,771,2.517,772,2.517,773,4.237,774,2.517,775,2.517,776,3.619,777,2.517,778,2.517,779,2.517,780,2.517,781,2.517,782,2.517,783,2.517,784,2.517,785,2.517,786,5.111,787,3.619,788,3.498,789,2.517,790,2.517,791,2.517,792,2.517,793,2.077,794,3.619,795,2.517,796,2.517,797,2.517,798,2.517,799,3.619,800,2.517,801,3.619,802,2.517,803,2.517,804,2.517,805,2.517,806,5.389,807,4.633,808,2.517,809,2.517,810,2.517,811,2.517,812,5.64,813,2.517,814,3.619,815,4.237,816,2.517,817,2.517,818,2.517,819,2.517,820,2.517,821,4.633,822,4.237,823,3.619,824,2.517,825,6.03,826,2.517,827,2.517,828,3.619,829,3.825,830,4.633,831,2.517,832,2.517,833,3.619,834,2.517,835,2.517,836,2.517,837,2.517,838,2.517,839,2.517,840,4.633,841,4.633,842,2.517,843,3.619,844,2.517,845,2.517,846,2.517,847,2.517,848,2.517,849,2.517,850,2.517,851,3.619,852,2.517,853,2.517,854,2.517,855,2.517,856,2.517,857,4.052,858,2.517,859,2.517,860,2.517,861,2.077,862,2.517,863,2.517,864,2.517,865,2.517,866,2.517,867,2.517,868,3.619,869,3.619,870,2.077,871,2.517,872,2.517,873,2.517,874,2.517,875,2.517,876,2.517,877,2.517,878,2.517,879,2.517,880,2.517,881,3.619,882,2.517,883,4.633,884,1.788,885,2.077,886,2.517,887,2.517,888,2.517,889,2.517,890,4.237,891,2.517,892,2.517,893,2.517,894,2.517,895,3.619,896,2.517,897,2.517,898,3.619,899,3.619,900,3.619,901,3.619,902,2.517,903,2.517,904,3.619,905,2.517,906,2.517,907,2.517,908,4.909,909,2.517,910,2.517,911,2.517,912,2.517,913,2.517,914,3.619,915,3.619,916,2.517,917,2.517,918,2.517,919,2.517,920,2.517,921,2.517,922,2.517,923,2.517,924,5.266,925,2.517,926,2.517,927,2.517,928,2.517,929,3.619,930,2.517,931,3.619,932,2.517,933,2.517,934,2.077,935,2.517,936,2.517,937,3.619,938,4.633,939,2.517,940,4.237,941,4.237,942,2.517,943,3.619,944,3.498,945,2.517,946,2.517,947,2.517,948,2.517,949,2.517,950,2.517,951,2.517,952,2.517,953,2.517,954,2.517,955,2.517,956,2.517,957,2.517,958,2.517,959,2.517,960,2.517,961,3.619,962,2.517,963,2.517,964,2.517,965,2.517,966,3.619,967,3.619,968,2.517,969,2.517,970,2.517,971,2.517,972,2.517,973,2.517,974,2.517,975,2.517,976,2.517,977,2.517,978,2.517,979,5.64,980,3.619,981,2.517,982,4.633,983,2.517,984,2.517,985,3.619,986,2.517,987,2.517,988,2.517,989,2.517,990,2.517,991,2.517,992,2.517,993,2.517,994,2.517,995,2.517,996,2.517,997,2.517,998,3.619,999,2.517,1000,2.517,1001,2.517,1002,2.517,1003,2.517,1004,2.517,1005,2.517,1006,2.517,1007,2.517,1008,2.517,1009,2.517,1010,2.517,1011,2.517,1012,2.517,1013,2.517,1014,2.517,1015,3.619,1016,4.237,1017,2.517,1018,2.517,1019,2.517,1020,2.517,1021,3.619,1022,3.619,1023,2.517,1024,2.517,1025,3.619,1026,3.619,1027,3.619,1028,2.517,1029,2.517,1030,1.572,1031,2.077,1032,2.517,1033,2.517,1034,2.517,1035,2.517,1036,2.517,1037,2.077,1038,2.517,1039,2.517,1040,2.517,1041,2.517,1042,2.517,1043,2.517,1044,2.517,1045,5.571,1046,3.619,1047,2.517,1048,2.517,1049,4.237,1050,2.517,1051,2.517,1052,2.517,1053,2.517,1054,2.517,1055,2.517,1056,2.517,1057,2.517,1058,2.517,1059,2.517,1060,2.517,1061,2.517,1062,2.517,1063,2.517,1064,2.517,1065,3.619,1066,2.517,1067,2.517,1068,2.517,1069,2.517,1070,2.517,1071,2.517,1072,2.517,1073,2.517,1074,2.517,1075,2.517,1076,2.517,1077,2.517,1078,2.517,1079,2.517,1080,2.517,1081,2.517,1082,2.517,1083,2.517,1084,2.517,1085,2.517,1086,2.517,1087,2.517,1088,2.517,1089,2.517,1090,2.517,1091,2.517,1092,2.517,1093,2.517,1094,2.517,1095,2.517,1096,2.517,1097,2.517,1098,2.517,1099,2.077,1100,2.517,1101,2.517,1102,2.517,1103,2.517,1104,2.517,1105,2.517,1106,2.517,1107,2.517,1108,2.517,1109,2.517,1110,2.077,1111,2.517,1112,2.517,1113,2.077,1114,2.517,1115,2.517]],["title/dependencies.html",[679,1.834,1030,2.301]],["body/dependencies.html",[15,0.037,32,0.521,57,1.099,58,1.099,523,0.034,524,0.034,829,4.034,1030,3.471,1116,4.888,1117,4.888,1118,4.888,1119,4.888]],["title/miscellaneous/functions.html",[1120,1.612,1121,3.041]],["body/miscellaneous/functions.html",[6,0.515,7,0.289,9,0.873,13,0.955,14,0.598,15,0.037,31,0.776,67,0.776,81,0.684,82,0.782,321,0.887,523,0.034,524,0.034,537,2.412,542,3.071,543,3.071,652,3.99,653,3.99,1120,3.019,1121,3.99,1122,3.99,1123,4.834,1124,4.834]],["title/index.html",[9,0.466,178,0.521,235,0.521]],["body/index.html",[4,0.642,7,0.352,15,0.039,16,0.554,32,0.464,34,0.98,83,0.539,90,0.617,92,0.617,94,0.554,98,1.086,100,0.745,107,1.086,112,0.642,122,0.617,124,0.88,128,0.7,137,0.98,138,1.086,159,1.169,171,1.086,183,1.086,523,0.032,524,0.032,526,2.89,530,3.597,533,4.29,556,2.423,567,2.684,641,3.693,643,3.096,644,3.096,645,3.096,647,3.096,687,3.693,688,3.597,715,4.29,724,3.597,744,3.597,749,3.597,788,4.29,793,4.29,861,5.016,870,3.597,884,3.096,885,3.597,934,3.597,944,3.597,1030,2.722,1031,3.597,1037,4.923,1099,4.29,1125,4.29,1126,5.554,1127,5.197,1128,4.357,1129,5.197,1130,4.585,1131,5.752,1132,2.722,1133,4.357,1134,5.877,1135,4.357,1136,4.357,1137,5.197,1138,5.554,1139,4.357,1140,4.357,1141,4.357,1142,5.554,1143,5.197,1144,4.357,1145,4.357,1146,4.357,1147,4.357,1148,4.357,1149,4.357,1150,4.357,1151,4.357,1152,4.357,1153,4.357,1154,4.357,1155,4.357,1156,4.357,1157,4.357,1158,4.357,1159,4.357,1160,4.357,1161,4.357,1162,4.357,1163,4.357,1164,4.357,1165,4.357,1166,4.357,1167,4.357,1168,4.357,1169,4.357,1170,4.357,1171,4.357,1172,4.357,1173,4.357,1174,5.554,1175,4.357,1176,4.357,1177,4.357,1178,4.357,1179,4.357,1180,4.357,1181,3.096]],["title/license.html",[178,0.521,235,0.521,1132,1.612]],["body/license.html",[15,0.033,33,1.153,35,1.153,83,0.572,124,1.088,523,0.033,524,0.033,696,3.819,769,3.819,857,3.819,884,3.287,1130,3.819,1132,2.89,1181,3.826,1182,5.695,1183,4.627,1184,3.819,1185,3.819,1186,5.385,1187,4.627,1188,4.627,1189,4.627,1190,4.627,1191,4.627,1192,4.627,1193,5.385,1194,6.17,1195,4.627,1196,4.627,1197,4.627,1198,5.695,1199,4.627,1200,5.385,1201,4.627,1202,4.627,1203,4.627,1204,4.627,1205,4.627,1206,4.627,1207,4.627,1208,5.385,1209,4.627,1210,4.627,1211,4.627,1212,4.627,1213,4.627,1214,5.385,1215,5.385,1216,4.627,1217,4.627,1218,4.627,1219,4.627,1220,4.627,1221,4.627,1222,4.627,1223,4.627,1224,4.627,1225,4.627,1226,4.627,1227,4.627,1228,4.627,1229,4.627,1230,4.627,1231,4.627,1232,4.627,1233,4.627,1234,4.627,1235,4.627,1236,4.627,1237,4.627,1238,4.627,1239,4.627,1240,4.627,1241,4.627,1242,4.627,1243,4.627,1244,4.627]],["title/modules.html",[527,2.955]],["body/modules.html",[15,0.034,523,0.034,524,0.034,526,2.737,527,3.497,1245,4.922]],["title/overview.html",[1246,3.433]],["body/overview.html",[2,0.887,15,0.034,523,0.034,524,0.034,525,3.487,614,3.066,675,4.051,1110,4.051,1113,4.051,1246,4.051]],["title/properties.html",[10,0.918,679,1.834]],["body/properties.html",[7,0.355,10,1.196,15,0.038,100,0.68,112,0.586,223,1.37,523,0.034,524,0.034,567,2.475,639,3.96,667,3.96,670,3.96,687,3.409,1125,3.96,1132,2.997,1181,3.409,1184,3.96,1185,3.96,1247,4.797,1248,4.797,1249,4.797,1250,4.797,1251,4.797,1252,4.797,1253,4.797,1254,4.797,1255,4.797,1256,4.797]],["title/miscellaneous/typealiases.html",[1120,1.612,1257,3.685]],["body/miscellaneous/typealiases.html",[6,0.591,7,0.332,8,1.214,9,0.88,14,0.602,15,0.034,78,1.247,523,0.034,524,0.034,537,2.43,541,2.767,551,2.767,1120,3.042,1122,4.02,1258,4.871,1259,4.871]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["0.1.0",{"_index":1095,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":1093,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":1070,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":1064,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":1062,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":1058,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":1056,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":1053,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":1048,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":1044,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":1041,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":1033,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":1029,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":1024,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":1020,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":1047,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["0a30e09",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["0e8e0a8",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["0px",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["1",{"_index":1110,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":1013,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":1009,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":1007,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":1005,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":1003,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["111",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["113",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":1004,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":675,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["14.0",{"_index":1125,"title":{},"body":{"index.html":{},"properties.html":{}}}],["14.0.0",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["1661d72",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":1115,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":1032,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1107,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":978,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["2016",{"_index":1045,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":857,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":1075,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":1014,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":1055,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":1096,"title":{},"body":{"changelog.html":{}}}],["2766f33",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["2aff5f0",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["2c37cc9",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1113,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["3.0.0",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["300",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["30cfca3",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["32f4ce3",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":1073,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":1106,"title":{},"body":{"changelog.html":{}}}],["3c41375",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["3c5c5b9",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":1028,"title":{},"body":{"changelog.html":{}}}],["3f079fe",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1016,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":1018,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["4.2.0",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["4.3.0",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["4.3.1",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["4.3.10",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["4.3.11",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["4.3.12",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["4.3.2",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["4.3.3",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["4.3.4",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["4.3.5",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["4.3.6",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["4.3.7",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["4.3.8",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["4.3.9",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["4.4.0",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["4.4.2",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["4.4.3",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["4.4.4",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["4.4.5",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["4.4.6",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["4.5.0",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["4.5.1",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["4.5.2",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["4.5.3",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["4.5.4",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["4.5.5",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["4.5.6",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["4.6.0",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":1017,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["44ea67e",{"_index":1043,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["46892ac",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":991,"title":{},"body":{"changelog.html":{}}}],["4a6bdbb",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["5.0.0",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":1001,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":1083,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":1063,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":989,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":1050,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["6.0.1",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["6.1.0",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["6016f12",{"_index":1109,"title":{},"body":{"changelog.html":{}}}],["60844ec",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":1080,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":670,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["700fef1",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":1112,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":1101,"title":{},"body":{"changelog.html":{}}}],["7276cab",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":1078,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":1008,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":1069,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":1061,"title":{},"body":{"changelog.html":{}}}],["78bdeb5",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["7c96113",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":1012,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":945,"title":{},"body":{"changelog.html":{}}}],["7fbaa2a",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1172,"title":{},"body":{"index.html":{}}}],["81",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["8850ddf",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["897b3fe",{"_index":1006,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["907f637",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["97",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["9831d36",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":1086,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":986,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":1085,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":769,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["accordingly",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["account",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":1238,"title":{},"body":{"license.html":{}}}],["active",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["activelongpressdrag",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["actually",{"_index":980,"title":{},"body":{"changelog.html":{}}}],["ad50f0e",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":688,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addclass",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["addclass(this.renderer",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["added",{"_index":553,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["adjust",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":1258,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["along",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["alternatives",{"_index":1153,"title":{},"body":{"index.html":{}}}],["always",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["and/or",{"_index":1206,"title":{},"body":{"license.html":{}}}],["angular",{"_index":567,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["angular/common",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["angular/core",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":1248,"title":{},"body":{"properties.html":{}}}],["angulars",{"_index":1039,"title":{},"body":{"changelog.html":{}}}],["any).eventlistenersubscriptions[type",{"_index":476,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["anymore",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["api",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":1137,"title":{},"body":{"index.html":{}}}],["append",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["applied",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["apply",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["apps",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":1242,"title":{},"body":{"license.html":{}}}],["assignment",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":1195,"title":{},"body":{"license.html":{}}}],["attribute",{"_index":1147,"title":{},"body":{"index.html":{}}}],["author",{"_index":1256,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1231,"title":{},"body":{"license.html":{}}}],["auto",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["automatic",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["automatically",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["autoscroll",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["autoscroller",{"_index":58,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{}}}],["awesome",{"_index":1160,"title":{},"body":{"index.html":{}}}],["axis",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["back",{"_index":1059,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":1035,"title":{},"body":{"changelog.html":{}}}],["bebd925",{"_index":1036,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["behaviour",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["being",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["boolean",{"_index":67,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":1140,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["bounding",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["breaking",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1245,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":1251,"title":{},"body":{"properties.html":{}}}],["build",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["building",{"_index":988,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["bundled",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1183,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":1108,"title":{},"body":{"changelog.html":{}}}],["c9b28a5",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["ca83a33",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["called",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["calledcount",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancel",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.complete",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.pipe",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancelled",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["candrag",{"_index":408,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cases",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["caused",{"_index":1066,"title":{},"body":{"changelog.html":{}}}],["cb7cf2e",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["cc52856",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["cdk",{"_index":1162,"title":{},"body":{"index.html":{}}}],["cf1bc61",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["cfff617",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["chain",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["change",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":993,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":661,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["changes.dragaxis",{"_index":400,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["changing",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":1190,"title":{},"body":{"license.html":{}}}],["checkeventlisteners",{"_index":407,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["checking",{"_index":1159,"title":{},"body":{"index.html":{}}}],["child",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["claim",{"_index":1234,"title":{},"body":{"license.html":{}}}],["class",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["classes",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["click",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["clicked",{"_index":1042,"title":{},"body":{"changelog.html":{}}}],["clicking",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["clientrect",{"_index":543,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["clientx",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["clienty",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.appendchild(node",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.innerhtml",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.parentelement!.removechild(clone",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cloned",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":955,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["come",{"_index":1167,"title":{},"body":{"index.html":{}}}],["commit",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["commonjs",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["compilation",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":610,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["completely",{"_index":1071,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":1099,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["conditions",{"_index":1213,"title":{},"body":{"license.html":{}}}],["config",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["configured",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":1243,"title":{},"body":{"license.html":{}}}],["console.log('element",{"_index":1145,"title":{},"body":{"index.html":{}}}],["const",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["constructor",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["constructor(element",{"_index":650,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["constructor(public",{"_index":649,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container",{"_index":643,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["container.directive",{"_index":61,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["container.directive.ts",{"_index":638,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["containerhashorizontalscroll",{"_index":517,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["containerhasverticalscroll",{"_index":520,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contents",{"_index":934,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contextmenu",{"_index":449,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contextmenulistener",{"_index":447,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contextmenulistener.unsubscribe",{"_index":460,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["continually",{"_index":1178,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1239,"title":{},"body":{"license.html":{}}}],["control",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["coordinates",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["copies",{"_index":1208,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1193,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1182,"title":{},"body":{"license.html":{}}}],["correct",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["create",{"_index":1026,"title":{},"body":{"changelog.html":{}}}],["created",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["css",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["current",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["currentdrag",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.complete",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.next",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragdata",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragevent",{"_index":578,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["currentdragsubscription",{"_index":570,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["cursor",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["custom",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["customised",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["d044523",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["d233788",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":1103,"title":{},"body":{"changelog.html":{}}}],["d3eecde",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":949,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":1040,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":976,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1235,"title":{},"body":{"license.html":{}}}],["data",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["date.now",{"_index":444,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dc0f863",{"_index":1023,"title":{},"body":{"changelog.html":{}}}],["dd3e89e",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1197,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1244,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":530,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["defined",{"_index":619,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["delay",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["delete",{"_index":437,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["delta",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["deltascroll",{"_index":494,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.left",{"_index":499,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.top",{"_index":501,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltatotal",{"_index":502,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltax",{"_index":497,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltay",{"_index":500,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["demo",{"_index":1126,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":1138,"title":{},"body":{"index.html":{}}}],["demomodule",{"_index":1141,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":1030,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["deregister",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllistener",{"_index":576,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["description",{"_index":639,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"properties.html":{}}}],["destroy",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["destroyed",{"_index":1100,"title":{},"body":{"changelog.html":{}}}],["destroying",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":1031,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["development",{"_index":1131,"title":{},"body":{"index.html":{}}}],["device",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["devices",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["didn't",{"_index":1051,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":606,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dimensions",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["directive",{"_index":17,"title":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["directives",{"_index":614,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{},"overview.html":{}}}],["directly",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["directory",{"_index":1169,"title":{},"body":{"index.html":{}}}],["disable",{"_index":565,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["disabled",{"_index":1076,"title":{},"body":{"changelog.html":{}}}],["disablescroll",{"_index":512,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dispose",{"_index":1097,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchanged",{"_index":540,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["distribute",{"_index":1204,"title":{},"body":{"license.html":{}}}],["document",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["documentation",{"_index":1130,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["doing",{"_index":594,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dom",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":724,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dont",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["drag$.pipe",{"_index":580,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["drag$.subscribe",{"_index":609,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragactiveclass",{"_index":132,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["draganddropmodule",{"_index":526,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["dragaxis",{"_index":66,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragaxix",{"_index":1104,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["dragcancelled",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcomplete",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcontainer",{"_index":1049,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragcursor=\"move",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragend(event",{"_index":1144,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended$.subscribe",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragendevent",{"_index":74,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragenter",{"_index":559,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragevent",{"_index":536,"title":{"interfaces/DragEvent.html":{}},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["draggable",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.directive",{"_index":534,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirective",{"_index":95,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["draggablehelper",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["draggablescrollcontainerdirective",{"_index":59,"title":{"directives/DraggableScrollContainerDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragged",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["dragging",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragleave",{"_index":561,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragmoveevent",{"_index":73,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragover",{"_index":563,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragoveractive",{"_index":589,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragoverclass",{"_index":554,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragpointerdownevent",{"_index":69,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drags",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragsnapgrid",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstart",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstarted",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstarted$.subscribe",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstartevent",{"_index":71,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drop",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["drop.module.ts",{"_index":529,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["dropevent",{"_index":538,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppable",{"_index":687,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["droppable#readme",{"_index":1250,"title":{},"body":{"properties.html":{}}}],["droppable.directive",{"_index":535,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.git",{"_index":1255,"title":{},"body":{"properties.html":{}}}],["droppable.js",{"_index":995,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.js",{"_index":997,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":996,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":994,"title":{},"body":{"changelog.html":{}}}],["droppable/docs",{"_index":1152,"title":{},"body":{"index.html":{}}}],["droppable/issues",{"_index":1252,"title":{},"body":{"properties.html":{}}}],["droppable/issues/61",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["droppable/src/lib/drag",{"_index":528,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/draggable",{"_index":637,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:104",{"_index":625,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:109",{"_index":622,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:114",{"_index":624,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:119",{"_index":626,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:124",{"_index":629,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:129",{"_index":631,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:134",{"_index":623,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:139",{"_index":621,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:144",{"_index":627,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:149",{"_index":628,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:154",{"_index":630,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:159",{"_index":620,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:174",{"_index":634,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:181",{"_index":635,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:186",{"_index":636,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:191",{"_index":633,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:196",{"_index":632,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts",{"_index":537,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/droppable.directive.ts:61",{"_index":655,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:66",{"_index":654,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:71",{"_index":656,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:76",{"_index":657,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:81",{"_index":658,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:86",{"_index":659,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:91",{"_index":660,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:93",{"_index":651,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirective",{"_index":531,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement",{"_index":573,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.rect",{"_index":581,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":582,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.updatecache",{"_index":577,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppablethen",{"_index":1136,"title":{},"body":{"index.html":{}}}],["dropped",{"_index":556,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["droppeddata",{"_index":1143,"title":{},"body":{"index.html":{}}}],["dropping",{"_index":1079,"title":{},"body":{"changelog.html":{}}}],["duplicate",{"_index":1065,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":506,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e.g",{"_index":646,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["e.preventdefault",{"_index":451,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e0128e5",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["edge",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["ee94dc5",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1111,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["elementref",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["elements",{"_index":644,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["emit",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["emitted",{"_index":1077,"title":{},"body":{"changelog.html":{}}}],["enable",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["enablescroll",{"_index":509,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["end",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":1087,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1165,"title":{},"body":{"index.html":{}}}],["error",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["errors",{"_index":1068,"title":{},"body":{"changelog.html":{}}}],["eslint",{"_index":564,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["eslint/no",{"_index":568,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["even",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.button",{"_index":427,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.canceldrag$.emit",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clientx",{"_index":466,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clienty",{"_index":467,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clientx",{"_index":434,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clienty",{"_index":435,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clientx",{"_index":462,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clienty",{"_index":463,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.x",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["event.y",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["eventemitter",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["eventlistenersubscriptions",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["events",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["events:none",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["eventtarget",{"_index":549,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["export",{"_index":65,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["exported",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["exports",{"_index":532,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["expose",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1222,"title":{},"body":{"license.html":{}}}],["extends",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["f110c8e",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["f29b424",{"_index":1094,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["f6a5cde",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["f936805",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["f98f586",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["fb75711",{"_index":1057,"title":{},"body":{"changelog.html":{}}}],["fe9bd5e",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":1157,"title":{},"body":{"index.html":{}}}],["features",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["files",{"_index":1196,"title":{},"body":{"license.html":{}}}],["filter",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["filter(([didoverlap",{"_index":605,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["filter(([previous",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["filter((node",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["find",{"_index":1148,"title":{},"body":{"index.html":{}}}],["fire",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":1011,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":1227,"title":{},"body":{"license.html":{}}}],["fix",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["fixed",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["fixes",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":1212,"title":{},"body":{"license.html":{}}}],["foreach((node",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["forroot",{"_index":1046,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":1189,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["function",{"_index":541,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1121,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1211,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1150,"title":{},"body":{"index.html":{}}}],["getscrollelement",{"_index":483,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getscrollposition",{"_index":485,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getting",{"_index":235,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghost",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostdragenabled",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelement",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementappendto",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreated",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreatedevent",{"_index":89,"title":{"interfaces/GhostElementCreatedEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementtemplate",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["git+https://github.com/mattlewis92/angular",{"_index":1254,"title":{},"body":{"properties.html":{}}}],["glitch",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["globaldragstyle",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["granted",{"_index":1188,"title":{},"body":{"license.html":{}}}],["grid",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["grids",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hacks",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["hascontainerscrollbar",{"_index":441,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["haseventlisteners",{"_index":409,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hasscrollbar",{"_index":515,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["height",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["helper",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["helper.provider",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["here",{"_index":1142,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1187,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["higher",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["highlighted",{"_index":1010,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1232,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1249,"title":{},"body":{"properties.html":{}}}],["hover",{"_index":1082,"title":{},"body":{"changelog.html":{}}}],["hovering",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["html",{"_index":648,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["htmlelement",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["htmlstyleelement",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"properties.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":1127,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/dom",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["icon",{"_index":1081,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":514,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["immediately",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1114,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":1052,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["implied",{"_index":1223,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["imports",{"_index":1139,"title":{},"body":{"index.html":{}}}],["improvements",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1216,"title":{},"body":{"license.html":{}}}],["including",{"_index":1200,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inject(document",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["input",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["inputs",{"_index":616,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["inserted",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inside",{"_index":645,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["insider",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":1134,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1129,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["instead",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["interaction",{"_index":1102,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"overview.html":{}}}],["ios",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["iscoordinatewithinrectangle",{"_index":542,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":1123,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdragactivated",{"_index":440,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["isdropallowed",{"_index":585,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["isn't",{"_index":640,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["istanbul",{"_index":513,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["iswithinelement",{"_index":584,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["item",{"_index":744,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ivy",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":479,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["keywords",{"_index":1247,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1221,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":1025,"title":{},"body":{"changelog.html":{}}}],["leave",{"_index":1088,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["lettable",{"_index":984,"title":{},"body":{"changelog.html":{}}}],["lewis",{"_index":1185,"title":{},"body":{"license.html":{},"properties.html":{}}}],["liability",{"_index":1236,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1233,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1161,"title":{},"body":{"index.html":{}}}],["library",{"_index":749,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["licence",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1132,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["limitation",{"_index":1201,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1224,"title":{},"body":{"license.html":{}}}],["line",{"_index":566,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["listener",{"_index":943,"title":{},"body":{"changelog.html":{}}}],["listeners",{"_index":1027,"title":{},"body":{"changelog.html":{}}}],["literal",{"_index":618,"title":{},"body":{"directives/DraggableDirective.html":{},"interfaces/ValidateDragParams.html":{}}}],["local",{"_index":1168,"title":{},"body":{"index.html":{}}}],["location",{"_index":547,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["locked",{"_index":1105,"title":{},"body":{"changelog.html":{}}}],["long",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["longpressconfig",{"_index":503,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["longpressconfig.delay",{"_index":507,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["longpressconfig.delta",{"_index":504,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["loosen",{"_index":1034,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":1021,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["map(([pointermoveevent",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(([previous",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((calledcount",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((movedata",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((value",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["margin",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["matching",{"_index":524,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.abs",{"_index":498,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.left",{"_index":496,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.top",{"_index":495,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformx",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformy",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["matt",{"_index":1184,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mattlewis92/dom",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{}}}],["maxspeed",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["merchantability",{"_index":1226,"title":{},"body":{"license.html":{}}}],["merge",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["merge(dragcomplete",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((dragenddata",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((pointerdownevent",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["metadata",{"_index":615,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["migrate",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["milliseconds",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mimic",{"_index":1090,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":1120,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":1181,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":1203,"title":{},"body":{"license.html":{}}}],["module",{"_index":525,"title":{"modules/DragAndDropModule.html":{}},"body":{"changelog.html":{},"overview.html":{}}}],["modules",{"_index":527,"title":{"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"modules.html":{}}}],["mouse",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["mousedown",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mouseenter",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseevent",{"_index":84,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseleave",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemove",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent",{"_index":429,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clientx",{"_index":431,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clienty",{"_index":432,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseup",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["move",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["moved",{"_index":562,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["movedata",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrollleft",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrolltop",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformx",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformy",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movescrollposition",{"_index":493,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["moz",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ms",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["multiple",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["mwldraggable",{"_index":93,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mwldraggablescrollcontainer",{"_index":647,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwldroppable",{"_index":552,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["name",{"_index":653,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":569,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["need",{"_index":715,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["needed",{"_index":1155,"title":{},"body":{"index.html":{}}}],["never",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["next",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.x",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.y",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ng",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["ng4",{"_index":1015,"title":{},"body":{"changelog.html":{}}}],["ngmodule",{"_index":533,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ngondestroy",{"_index":401,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["ngoninit",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["ngzone",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["node",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["node.js",{"_index":1166,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["none",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["noninfringement",{"_index":1230,"title":{},"body":{"license.html":{}}}],["notable",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":1146,"title":{},"body":{"index.html":{}}}],["notice",{"_index":1214,"title":{},"body":{"license.html":{}}}],["now",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":861,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["o",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(styles).foreach((key",{"_index":480,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach((type",{"_index":475,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":410,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observable",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["observable((observer",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observables",{"_index":1098,"title":{},"body":{"changelog.html":{}}}],["observer.next(e",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["obtaining",{"_index":1192,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":548,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["old",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":944,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchanges",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ondestroy",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["one",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["oninit",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["onmousedown(event",{"_index":426,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseenter",{"_index":468,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseleave",{"_index":470,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseup(event",{"_index":436,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchend(event",{"_index":464,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchstart(event",{"_index":439,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["operators",{"_index":985,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["original",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["otherwise",{"_index":1241,"title":{},"body":{"license.html":{}}}],["out",{"_index":884,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["output",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["outputs",{"_index":617,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["outside",{"_index":1038,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["overflow",{"_index":510,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["overlapping",{"_index":558,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps",{"_index":579,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps$.pipe(distinctuntilchanged",{"_index":588,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps$.pipe(filter((overlapsnow",{"_index":601,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapschanged",{"_index":587,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapsnow",{"_index":597,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapsnow)).subscribe",{"_index":602,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overview",{"_index":1246,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["package",{"_index":679,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":987,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pairwise",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["parameters",{"_index":652,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["parent",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["part",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["partial",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":1228,"title":{},"body":{"license.html":{}}}],["pass",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["passive",{"_index":453,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["path",{"_index":992,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":829,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["performance",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1186,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1209,"title":{},"body":{"license.html":{}}}],["person",{"_index":1191,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1210,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["pipe(filter((overlapsnow",{"_index":596,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["pipe(share",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pipe(take(1",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["place",{"_index":642,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["pointer",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["pointerdown",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clientx",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clienty",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.event.stoppropagation",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe(pairwise",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerevent",{"_index":80,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerevents",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pipe(take(1",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pipe(takelast(1",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clientx",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clienty",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.event.target",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerup",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["port",{"_index":1171,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1218,"title":{},"body":{"license.html":{}}}],["position",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["positioned",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["positioning",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["positions",{"_index":1060,"title":{},"body":{"changelog.html":{}}}],["powered",{"_index":1133,"title":{},"body":{"index.html":{}}}],["prepare",{"_index":1164,"title":{},"body":{"index.html":{}}}],["preserve",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["pressed",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["prevent",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["previous",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.x",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.y",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["private",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["project",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.ts",{"_index":1259,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.ts",{"_index":1122,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["propagating",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"properties.html":{}}}],["prototype",{"_index":1000,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1219,"title":{},"body":{"license.html":{}}}],["provider",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["public",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":696,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["purpose",{"_index":1229,"title":{},"body":{"license.html":{}}}],["readme",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["recalculate",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["recommend",{"_index":1158,"title":{},"body":{"index.html":{}}}],["recompute",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.left",{"_index":544,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["rect.left}px",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.top",{"_index":545,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["rect.top}px",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.width}px",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rectangle",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":1002,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1179,"title":{},"body":{"index.html":{}}}],["releaselicense",{"_index":1180,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1173,"title":{},"body":{"index.html":{}}}],["remove",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["removeclass",{"_index":63,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["removeclass(this.renderer",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["removed",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":1084,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":1092,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["renderer2",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["rendering",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["repliate",{"_index":990,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":1170,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1253,"title":{},"body":{"properties.html":{}}}],["requestanimationframe",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["required",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":1054,"title":{},"body":{"changelog.html":{}}}],["restore",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":1199,"title":{},"body":{"license.html":{}}}],["results",{"_index":523,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["returns",{"_index":1124,"title":{},"body":{"miscellaneous/functions.html":{}}}],["revert",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rights",{"_index":1202,"title":{},"body":{"license.html":{}}}],["round",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1037,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["rxjs/operators",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["safari",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["same",{"_index":1074,"title":{},"body":{"changelog.html":{}}}],["scroll",{"_index":60,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["scroll.left",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scroll.top",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollable",{"_index":641,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["scrollcontainer",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["scrollcontainer.clientheight",{"_index":522,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.clientwidth",{"_index":519,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.scrollheight",{"_index":521,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.scrollwidth",{"_index":518,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainerrect",{"_index":575,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["scrollcontainerscroll",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolled",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["scroller",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scrolling",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scrollleft",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolltop",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollwhenoutside",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollx",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolly",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["seamless",{"_index":1019,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":591,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["select",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selected",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selection",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["sell",{"_index":1207,"title":{},"body":{"license.html":{}}}],["server",{"_index":793,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["set",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["setcursor(value",{"_index":472,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setelementstyles",{"_index":477,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setting",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1215,"title":{},"body":{"license.html":{}}}],["share",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shouldbegindrag",{"_index":492,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["show",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["showoriginalelementwhiledragging",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shows",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["side",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["simplechanges",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["skyhook",{"_index":1163,"title":{},"body":{"index.html":{}}}],["snap",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["snapgrid",{"_index":68,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["snapping",{"_index":1156,"title":{},"body":{"index.html":{}}}],["software",{"_index":1194,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["sourcemaps",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["stackblitz",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["standard",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":788,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["started",{"_index":178,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["starting",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["starts",{"_index":557,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["startscrollposition",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.left",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.top",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith(startscrollposition",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stop",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stops",{"_index":560,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["string",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["style",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["styled",{"_index":1072,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":478,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["styles[key",{"_index":482,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subject",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["sublicense",{"_index":1205,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["subscribe((e",{"_index":450,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscribe((touchmoveevent",{"_index":454,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscription",{"_index":539,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["substantial",{"_index":1217,"title":{},"body":{"license.html":{}}}],["support",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["system.js",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":546,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["table",{"_index":1128,"title":{},"body":{"index.html":{}}}],["take",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["take(1",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takelast",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil(dragcomplete",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["target",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["template",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["templateref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["test",{"_index":1176,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1177,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1175,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1174,"title":{},"body":{"index.html":{}}}],["text",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["text/css",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["there's",{"_index":592,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.autoscroll",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.candrag",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.checkeventlisteners",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.currentdragsubscription",{"_index":571,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.currentdragsubscription.unsubscribe",{"_index":613,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.destroy",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.destroy$.next",{"_index":406,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.disablescroll",{"_index":508,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document",{"_index":448,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.body",{"_index":484,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.body.style.cursor",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.defaultview",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.documentelement.scrollleft",{"_index":491,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.documentelement.scrolltop",{"_index":489,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.appendchild(globaldragstyle",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.removechild(globaldragstyle",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragactiveclass",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragaxis.x",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragaxis.y",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragcursor",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragend.next",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragend.observers.length",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragenter.next(currentdragevent",{"_index":600,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragenter.observers.length",{"_index":599,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.draggablehelper.currentdrag.subscribe",{"_index":572,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragging.next",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragging.observers.length",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragleave.next(currentdragevent",{"_index":608,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragleave.observers.length",{"_index":607,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragover.next(currentdragevent",{"_index":604,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragover.observers.length",{"_index":603,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragoverclass",{"_index":598,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragpointerdown.next",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragpointerdown.observers.length",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.x",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.y",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragstart.next",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragstart.observers.length",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.drop.next(currentdragevent",{"_index":612,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.drop.observers.length",{"_index":611,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dropdata",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.element.nativeelement",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.clonenode",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.element.nativeelement.nextsibling",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.parentnode!.insertbefore",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.enablescroll",{"_index":465,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":412,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseenter",{"_index":422,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseleave",{"_index":424,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousemove",{"_index":428,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":415,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":421,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":419,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchmove",{"_index":446,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":417,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollelement",{"_index":516,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollposition",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostdragenabled",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelement",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto.appendchild(clone",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementcreated.emit",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementcreated.observers.length",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementtemplate",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.hasscrollbar",{"_index":445,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmousedown(event",{"_index":414,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseenter",{"_index":423,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseleave",{"_index":425,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseup(event",{"_index":416,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchend(event",{"_index":420,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchstart(event",{"_index":418,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.complete",{"_index":403,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.next",{"_index":433,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.pipe",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.complete",{"_index":404,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.next",{"_index":430,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.complete",{"_index":405,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.next",{"_index":438,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.appendchild",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createelement('style",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createtext",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.listen",{"_index":413,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.renderer.listen(scrollcontainer",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setattribute(globaldragstyle",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(element",{"_index":481,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.document.body",{"_index":511,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.element.nativeelement",{"_index":473,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":583,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":487,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":486,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller.destroy",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor",{"_index":471,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor(this.dragcursor",{"_index":469,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(clone",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(this.ghostelement",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.shouldbegindrag",{"_index":455,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.showoriginalelementwhiledragging",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerbegin",{"_index":443,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerend",{"_index":505,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.touchstartlongpress",{"_index":442,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.unsubscribeeventlisteners",{"_index":402,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrag",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrop",{"_index":586,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.vcr.createembeddedview",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.zone.run",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.zone.runoutsideangular",{"_index":411,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["through",{"_index":1135,"title":{},"body":{"index.html":{}}}],["throw",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":555,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["timelongpress",{"_index":86,"title":{"interfaces/TimeLongPress.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerbegin",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerend",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["todo",{"_index":590,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["top",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["tort",{"_index":1240,"title":{},"body":{"license.html":{}}}],["touch",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["touchcancel",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchend",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchevent",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touching",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmove",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent",{"_index":456,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.preventdefault",{"_index":457,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":458,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clienty",{"_index":459,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmovelistener",{"_index":452,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmovelistener.unsubscribe",{"_index":461,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstart",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstartlongpress",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstartlongpress]=\"{delay",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["transform",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["transformx",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy}px",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["translate3d(${transformx}px",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["true",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["tslib",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1257,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["universal",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["unless",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisteners",{"_index":474,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["until",{"_index":1089,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["update",{"_index":999,"title":{},"body":{"changelog.html":{}}}],["updatecache",{"_index":574,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["upgrade",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["useful",{"_index":1149,"title":{},"body":{"index.html":{}}}],["user",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["users",{"_index":998,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["util",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["validate",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":78,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedragparams",{"_index":76,"title":{"interfaces/ValidateDragParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["validatedrop",{"_index":551,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedropparams",{"_index":550,"title":{"interfaces/ValidateDropParams.html":{}},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["value",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["values",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["vcr",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["version",{"_index":667,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["via",{"_index":595,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["view",{"_index":885,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewed",{"_index":1151,"title":{},"body":{"index.html":{}}}],["viewref",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewref.rootnodes",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["visibility",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["void",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["wait",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["warnings",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":1225,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1220,"title":{},"body":{"license.html":{}}}],["way",{"_index":593,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["webkit",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["whether",{"_index":1237,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":870,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["width",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["willchange",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":490,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window.pageyoffset",{"_index":488,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["without",{"_index":1198,"title":{},"body":{"license.html":{}}}],["work",{"_index":1022,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":1091,"title":{},"body":{"changelog.html":{}}}],["worse",{"_index":1067,"title":{},"body":{"changelog.html":{}}}],["wrote",{"_index":1154,"title":{},"body":{"index.html":{}}}],["x",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["y",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["yourself",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n    Modules\n    DragAndDropModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DraggableDirective\n                        \n                        \n                            DraggableScrollContainerDirective\n                        \n                        \n                            DroppableDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DraggableDirective\n                        \n                        \n                            DraggableScrollContainerDirective\n                        \n                        \n                            DroppableDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective,\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective,\n  ],\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dragCancelled\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dragCancelled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEvent.html":{"url":"interfaces/DragEvent.html","title":"interface - DragEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DropEvent\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelDrag$\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnChanges\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoScroll\n                            \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                touchStartLongPress\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoScroll\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    margin: 20,\n  }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:159\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:139\n                            \n                        \n                \n                    \n                        The css class to apply when the element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                \n                \n                    \n                        Type :         DragAxis\n\n                    \n                \n                \n                    \n                        Default value : { x: true, y: true }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:109\n                            \n                        \n                \n                    \n                        The axis along which the element is draggable\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:134\n                            \n                        \n                \n                    \n                        The cursor to use when hovering over a draggable element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                \n                \n                    \n                        Type :         SnapGrid\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:114\n                            \n                        \n                \n                    \n                        Snap all drags to an x / y grid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:104\n                            \n                        \n                \n                    \n                        an object of data you can pass to the drop event\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:119\n                            \n                        \n                \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:144\n                            \n                        \n                \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:149\n                            \n                        \n                \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:124\n                            \n                        \n                \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        touchStartLongPress\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:154\n                            \n                        \n                \n                    \n                        Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                \n                \n                    \n                        Type :         ValidateDrag\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:129\n                            \n                        \n                \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:196\n                            \n                        \n                \n                    \n                        Called after the element is dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:191\n                            \n                        \n                \n                    \n                        Called when the element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:174\n                            \n                        \n                \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:181\n                            \n                        \n                \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:186\n                            \n                        \n                \n                    \n                        Called after the ghost element has been created\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableScrollContainerDirective.html":{"url":"directives/DraggableScrollContainerDirective.html","title":"directive - DraggableScrollContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DraggableScrollContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n\nDrag me!\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggableScrollContainer]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n/**\n * If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n * ```html\n  \n    Drag me!\n  \n  ```\n */\n@Directive({\n  selector: '[mwlDraggableScrollContainer]',\n})\nexport class DraggableScrollContainerDirective {\n  /**\n   * @hidden\n   */\n  constructor(public elementRef: ElementRef) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            dropData\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ClientX value of the mouse location where the drop occurred\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ClientY value of the mouse location where the drop occurred\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:     EventTarget\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventTarget\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The target of the event where the drop occurred\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                            \n                                validateDrop\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scrollContainer\n                                                  \n                                                        \n                                                                        DraggableScrollContainerDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:66\n                            \n                        \n                \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:61\n                            \n                        \n                \n                    \n                        Added to the element when an element is dragged over it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrop\n                    \n                \n                \n                    \n                        Type :         ValidateDrop\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:71\n                            \n                        \n                \n                    \n                        Allow custom behaviour to control when the element is dropped\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:76\n                            \n                        \n                \n                    \n                        Called when a draggable element starts overlapping the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:81\n                            \n                        \n                \n                    \n                        Called when a draggable element stops overlapping the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:86\n                            \n                        \n                \n                    \n                        Called when a draggable element is moved over the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:91\n                            \n                        \n                \n                    \n                        Called when a draggable element is dropped on this element\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentDragSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:93\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GhostElementCreatedEvent.html":{"url":"interfaces/GhostElementCreatedEvent.html","title":"interface - GhostElementCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GhostElementCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            x\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimeLongPress.html":{"url":"interfaces/TimeLongPress.html","title":"interface - TimeLongPress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimeLongPress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            timerBegin\n                                        \n                                \n                                \n                                        \n                                            timerEnd\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        timerBegin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timerBegin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerEnd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timerEnd:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDragParams.html":{"url":"interfaces/ValidateDragParams.html","title":"interface - ValidateDragParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateDragParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            transform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transform:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDropParams.html":{"url":"interfaces/ValidateDropParams.html","title":"interface - ValidateDropParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateDropParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DropEvent\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n7.0.0 (2022-08-02)\n⚠ BREAKING CHANGES\n\nangular 14 or higher is now required to use this package\n\nbuild\n\nupgrade to angular 14 (cc52856)\n\n6.1.0 (2022-04-19)\nFeatures\n\ndroppable: add clientX, clientY and target to all output events (#113) (0e8e0a8)\n\n6.0.1 (2022-04-12)\n6.0.0 (2021-12-11)\n⚠ BREAKING CHANGES\n\nangular 12 or higher is now required to use this package\n\nFeatures\n\npublish package in ivy partial compilation mode (2c37cc9)\n\n5.0.0 (2021-08-30)\n⚠ BREAKING CHANGES\n\nThe activeLongPressDrag and longPressConfig inputs have been removed on the mwlDraggableScrollContainer directive.\n\nTo migrate use [touchStartLongPress]=\"{delay: 300, delta: 30}\" on the mwlDraggable element instead.\n\nif you were using the UMD bundle @mattlewis92/dom-autoscroller will no longer be bundled inside it and you may need to adjust your system.js config accordingly\nangular 10 or higher is now required to use this package\n\nFeatures\n\nremove deprecated inputs on mwlDraggableScrollContainer directive (2766f33)\n\nbuild\n\ndon't bundle @mattlewis92/dom-autoscroller anymore (3c41375)\nupgrade to angular 10 (907f637)\n\n4.6.0 (2020-12-28)\nFeatures\n\nadd validateDrop to mwlDroppable directive (#111) (8850ddf)\n\n4.5.6 (2020-10-22)\nBug Fixes\n\nprevent error on drag end (4a6bdbb)\n\n4.5.5 (2020-10-20)\nBug Fixes\n\nensure dragging output is never called unless dragging an item (1661d72)\n\n4.5.4 (2020-09-12)\nBug Fixes\n\nupgrade dom auto scroller library to prevent commonjs warnings (3f079fe)\n\n4.5.3 (2020-07-09)\n4.5.2 (2020-07-09)\n4.5.1 (2020-06-19)\n4.5.0 (2020-06-17)\nFeatures\n\nallow auto scroll options to be configured (46892ac)\n\n4.4.6 (2020-05-29)\nBug Fixes\n\numd: use correct sourcemaps in umd bundle (30cfca3)\n\n4.4.5 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (2aff5f0)\n\n4.4.4 (2020-04-19)\nBug Fixes\n\nalways disable document scroll when dragging (7276cab)\n\n4.4.3 (2020-04-19)\nBug Fixes\n\ndisable text selection in safari (d044523)\n\n4.4.2 (2020-04-19)\nBug Fixes\n\nonly enable long press drag delay if inside a scrollable element (0a30e09)\nremove scroll glitch on touch devices when dragging (fe9bd5e)\n\n4.4.0 (2020-04-18)\nFeatures\n\nallow setting drag start delay on touch devices (c9b28a5)\n\nBug Fixes\n\ndisable text selection when dragging on ios safari (ca83a33)\n\n4.3.12 (2020-04-12)\nBug Fixes\n\nremove need for server side rendering hacks (7c96113)\n\n4.3.11 (2020-04-12)\nBug Fixes\n\nallow multiple dragActiveClass (60844ec)\nsupport multiple drag over and drag active classes (ad50f0e)\n\n4.3.10 (2020-03-01)\n4.3.9 (2020-03-01)\nBug Fixes\n\nonly allow dragging when using a left click (d3eecde)\n\n4.3.8 (2019-10-18)\n4.3.7 (2019-10-11)\nBug Fixes\n\nrevert change to ghost element positioning (e0128e5)\n\n4.3.6 (2019-10-11)\n4.3.5 (2019-10-08)\n4.3.4 (2019-10-08)\nBug Fixes\n\nrestore compatibility with angular 6 and 7 (f110c8e), closes #97\n\n4.3.3 (2019-10-07)\nBug Fixes\n\nallow angular 9 peer dependency (cb7cf2e)\n\n\n4.3.2 (2019-06-26)\nBug Fixes\n\nrestore compatibility with stackblitz (ee94dc5)\n\n\n4.3.1 (2019-06-05)\nBug Fixes\n\nrestore compatibility with angular universal (7fbaa2a)\n\n\n4.3.0 (2019-04-21)\nBug Fixes\n\nexpose ValidateDrag type (32f4ce3)\n\nFeatures\n\nexpose css transform on validate drag function (3c5c5b9)\nsupport auto scrolling when dragging (78bdeb5)\n\n\n4.2.0 (2019-03-17)\nFeatures\n\nexpose ghost element and starting mouse position on ghost element created event (d233788), closes #81 #85\n\n\n4.1.0 (2019-02-17)\nBug Fixes\n\nallow angular 8 peer dependency (f936805)\n\nFeatures\n\ndraggable-scroll-container: Added input activeLongPressDrag (#79) (f98f586), closes #78\n\n\n4.0.2 (2018-09-18)\nBug Fixes\n\ninclude readme and licence in npm (cfff617)\n\n\n4.0.1 (2018-09-01)\nBug Fixes\n\nallow draggable elements insider other draggable elements to be dragged (700fef1), closes #61\n\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\nThe dragStart $event.x and $event.y values were removed as these were always\n0\npointer-events:none is no longer automatically applied to elements while they are being dragged. To migrate use the dragActiveClass option and set this yourself with css\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @mattlewis92/dom-autoscroller : ^2.4.2\n        \n            tslib : ^2.4.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=14.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCoordinateWithinRectangle\n                        \n                    \n                \n            \n            \n                \nisCoordinateWithinRectangle(clientX: number, clientY: number, rect: ClientRect)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    clientX\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientY\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rect\n                                    \n                                            ClientRect\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 14.0+ drag and drop\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 14.0+\nInstallation\nInstall through npm:\nnpm install angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule],\n  bootstrap: [DemoApp],\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `,\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}Note: if draggable elements are inside a scrollable element then you will need to add mwlDraggableScrollContainer as an attribute to the scrollable container.\nYou may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nAlternatives\nI wrote this library because I needed drag and drop whilst snapping to a grid. If you don't need this feature then I recommend checking out one of these other awesome drag and drop libraries:\n\nAngular CDK drag and drop\nangular-skyhook\nng-drag-drop\n\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 7.0.0\n        \n            Description : Drag and drop for angular 14.0+\n        \n            Keywords : angular2, angular, draggable, droppable, drag, drop\n        \n            Homepage : https://github.com/mattlewis92/angular-draggable-droppable#readme\n        \n            Bugs : https://github.com/mattlewis92/angular-draggable-droppable/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/mattlewis92/angular-draggable-droppable.git\n        \n            Author : Matt Lewis\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                        \n                            ValidateDrop   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ValidateDrag\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ValidateDrop\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
