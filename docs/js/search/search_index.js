var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.083,1,0.69]],["body/interfaces/Coordinates.html",[0,0.147,1,1.089,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.539,9,0.347,10,0.728,11,1.46,12,1.46,13,0.97,14,0.532,15,0.04,16,0.535,17,0.292,18,0.585,19,0.347,20,0.39,21,0.777,22,0.875,23,0.897,24,0.585,25,0.892,26,0.39,27,0.892,28,0.892,29,0.595,30,1.207,31,0.347,32,0.23,33,1.207,34,0.728,35,0.967,36,1.069,37,0.892,38,1.069,39,0.347,40,0.585,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.271,47,0.701,48,0.892,49,0.595,50,0.39,51,0.595,52,0.585,53,0.39,54,1.187,55,0.486,56,0.728,57,0.267,58,0.532,59,0.347,60,0.39,61,0.39,62,0.39,63,0.791,64,0.967,65,0.906,66,0.728,67,0.539,68,0.778,69,0.539,70,1.187,71,0.539,72,0.539,73,1.187,74,0.807,75,1.393,76,0.872,77,0.39,78,0.807,79,0.799,80,0.799,81,0.708,82,1.334,83,1.422,84,0.967,85,0.892,86,0.892,87,0.539,88,0.836,89,1.271,90,0.306,91,0.539,92,0.345,93,0.437,94,0.39,95,0.595,96,0.539,97,0.595,98,0.267,99,0.585,100,0.807,101,0.892,102,0.954,103,0.539,104,0.595,105,0.539,106,0.539,107,0.807,108,1.074,109,0.595,110,0.413,111,0.967,112,0.807,113,0.539,114,0.595,115,0.778,116,0.347,117,0.39,118,0.52,119,0.585,120,0.711,121,0.967,122,0.437,123,0.595,124,0.347,125,0.539,126,0.741,127,0.539,128,0.595,129,0.52,130,0.347,131,0.595,132,0.486,133,1.271,134,0.539,135,0.486,136,0.539,137,0.595,138,0.539,139,0.595,140,0.595,141,0.595,142,0.539,143,0.595,144,0.595,145,0.595,146,0.807,147,0.539,148,0.595,149,0.539,150,0.595,151,0.595,152,0.595,153,0.539,154,0.539,155,0.539,156,0.595,157,0.486,158,0.539,159,0.595,160,0.967,161,1.383,162,1.251,163,0.892,164,0.892,165,0.595,166,0.595,167,0.539,168,0.777,169,0.807,170,0.623,171,0.539,172,0.595,173,0.595,174,0.539,175,0.888,176,0.437,177,0.539,178,0.539,179,0.595,180,0.595,181,0.539,182,0.539,183,0.539,184,0.539,185,0.539,186,1.334,187,0.595,188,1.069,189,0.595,190,1.089,191,0.595,192,0.892,193,1.628,194,0.807,195,0.807,196,0.892,197,0.892,198,0.892,199,0.892,200,0.892,201,0.892,202,0.595,203,0.892,204,0.892,205,0.932,206,0.539,207,0.347,208,0.39,209,0.39,210,0.39,211,0.347,212,0.39,213,0.595,214,0.595,215,0.701,216,0.39,217,0.347,218,0.595,219,0.39,220,0.892,221,1.096,222,0.595,223,0.595,224,0.892,225,0.595,226,0.539,227,0.539,228,0.595,229,0.595,230,0.539,231,0.595,232,0.539,233,0.595,234,0.892,235,0.907,236,0.595,237,0.539,238,0.539,239,0.437,240,0.595,241,0.539,242,0.892,243,0.595,244,0.595,245,0.595,246,0.595,247,0.595,248,0.595,249,0.539,250,0.892,251,1.187,252,1.187,253,1.271,254,0.892,255,0.892,256,1.069,257,0.595,258,1.271,259,1.187,260,0.892,261,0.595,262,0.833,263,0.306,264,1.048,265,0.595,266,0.595,267,0.595,268,0.778,269,0.595,270,1.069,271,0.595,272,0.833,273,0.595,274,0.595,275,0.595,276,0.595,277,0.595,278,0.595,279,0.595,280,0.595,281,1.187,282,0.892,283,0.595,284,1.187,285,0.892,286,0.595,287,0.595,288,0.595,289,0.595,290,0.595,291,0.623,292,0.595,293,1.069,294,1.069,295,1.069,296,0.595,297,1.069,298,1.069,299,0.595,300,1.069,301,0.892,302,0.892,303,0.892,304,0.595,305,0.892,306,0.892,307,0.595,308,0.892,309,0.892,310,0.595,311,0.595,312,0.595,313,1.069,314,0.595,315,0.595,316,0.595,317,0.595,318,0.595,319,0.595,320,0.595,321,0.39,322,0.585,323,0.585,324,0.595,325,0.347,326,0.39,327,1.187,328,0.595,329,0.595,330,1.187,331,1.334,332,0.892,333,0.595,334,0.595,335,0.595,336,0.595,337,1.069,338,0.595,339,0.892,340,0.595,341,0.539,342,0.539,343,0.595,344,0.595,345,0.595,346,0.595,347,0.595,348,0.595,349,0.595,350,0.595,351,0.892,352,0.595,353,0.595,354,0.595,355,0.595,356,0.595,357,0.892,358,0.595,359,0.595,360,0.595,361,0.892,362,0.595,363,0.595,364,0.595,365,0.595,366,0.595,367,0.595,368,1.069,369,0.595,370,0.892,371,0.595,372,0.595,373,0.595,374,0.701,375,0.595,376,0.595,377,0.595,378,0.39,379,0.595,380,0.595,381,0.595,382,0.595,383,0.595,384,0.595,385,0.52,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.595,402,0.595,403,0.595,404,0.595,405,0.39,406,0.892,407,0.595,408,0.595,409,0.595,410,0.595,411,0.595,412,1.187,413,1.069,414,0.595,415,0.595,416,0.595,417,0.933,418,0.595,419,0.595,420,0.595,421,0.595,422,0.595,423,0.595,424,0.892,425,0.595,426,0.595,427,0.595,428,0.595,429,0.595,430,0.595,431,0.892,432,1.334,433,0.892,434,0.892,435,0.595,436,0.595,437,0.892,438,0.892,439,0.892,440,0.595,441,1.069,442,0.892,443,0.595,444,1.271,445,1.187,446,1.271,447,1.069,448,1.069,449,0.595,450,1.271,451,0.595,452,0.892,453,0.595,454,0.595,455,0.595,456,0.595,457,0.595,458,0.595,459,0.595,460,1.069,461,0.595,462,0.892,463,0.892,464,0.595,465,0.595,466,0.892,467,0.892,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.595,477,0.595,478,0.595,479,0.595,480,0.892,481,0.595,482,0.539,483,0.892,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.595,498,0.595,499,0.595,500,0.595,501,0.892,502,0.892,503,0.892,504,0.892,505,0.892,506,0.892,507,0.539,508,0.595,509,0.892,510,0.892,511,0.595,512,0.595,513,0.595,514,1.187,515,0.892,516,0.595,517,0.595,518,0.595,519,0.595,520,0.595,521,0.892,522,0.595,523,0.595,524,0.892,525,0.595,526,0.595,527,0.02,528,0.02]],["title/modules/DragAndDropModule.html",[529,2.182,530,1.918]],["body/modules/DragAndDropModule.html",[3,0.672,4,0.586,5,0.586,6,0.505,7,0.327,15,0.039,16,0.63,32,0.505,57,0.743,58,0.586,59,0.762,63,0.672,92,0.505,93,1.214,527,0.034,528,0.034,530,3.412,531,3.37,532,4.743,533,4.743,534,4.509,535,2.705,536,5.462,537,4.509,538,4.743,539,4.743]],["title/interfaces/DragAxis.html",[0,0.083,64,0.765]],["body/interfaces/DragAxis.html",[0,0.147,1,1.037,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.539,9,0.347,10,0.728,11,1.46,12,1.46,13,0.961,14,0.532,15,0.04,16,0.535,17,0.292,18,0.585,19,0.347,20,0.39,21,0.777,22,0.875,23,0.897,24,0.585,25,0.892,26,0.39,27,0.892,28,0.892,29,0.595,30,1.207,31,0.347,32,0.23,33,1.207,34,0.728,35,0.967,36,1.069,37,0.892,38,1.069,39,0.347,40,0.585,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.271,47,0.701,48,0.892,49,0.595,50,0.39,51,0.595,52,0.585,53,0.39,54,1.187,55,0.486,56,0.728,57,0.267,58,0.532,59,0.347,60,0.39,61,0.39,62,0.39,63,0.791,64,1.074,65,0.932,66,0.728,67,0.539,68,0.778,69,0.539,70,1.187,71,0.539,72,0.539,73,1.187,74,0.807,75,1.393,76,0.872,77,0.39,78,0.807,79,0.799,80,0.799,81,0.708,82,1.334,83,1.422,84,0.967,85,0.892,86,0.892,87,0.539,88,0.836,89,1.271,90,0.306,91,0.539,92,0.345,93,0.437,94,0.39,95,0.595,96,0.539,97,0.595,98,0.267,99,0.585,100,0.807,101,0.892,102,0.954,103,0.539,104,0.595,105,0.539,106,0.539,107,0.807,108,1.074,109,0.595,110,0.413,111,0.967,112,0.807,113,0.539,114,0.595,115,0.778,116,0.347,117,0.39,118,0.52,119,0.585,120,0.711,121,0.967,122,0.437,123,0.595,124,0.347,125,0.539,126,0.741,127,0.539,128,0.595,129,0.52,130,0.347,131,0.595,132,0.486,133,1.271,134,0.539,135,0.486,136,0.539,137,0.595,138,0.539,139,0.595,140,0.595,141,0.595,142,0.539,143,0.595,144,0.595,145,0.595,146,0.807,147,0.539,148,0.595,149,0.539,150,0.595,151,0.595,152,0.595,153,0.539,154,0.539,155,0.539,156,0.595,157,0.486,158,0.539,159,0.595,160,0.967,161,1.383,162,1.251,163,0.892,164,0.892,165,0.595,166,0.595,167,0.539,168,0.777,169,0.807,170,0.623,171,0.539,172,0.595,173,0.595,174,0.539,175,0.888,176,0.437,177,0.539,178,0.539,179,0.595,180,0.595,181,0.539,182,0.539,183,0.539,184,0.539,185,0.539,186,1.334,187,0.595,188,1.069,189,0.595,190,1.089,191,0.595,192,0.892,193,1.628,194,0.807,195,0.807,196,0.892,197,0.892,198,0.892,199,0.892,200,0.892,201,0.892,202,0.595,203,0.892,204,0.892,205,0.932,206,0.539,207,0.347,208,0.39,209,0.39,210,0.39,211,0.347,212,0.39,213,0.595,214,0.595,215,0.701,216,0.39,217,0.347,218,0.595,219,0.39,220,0.892,221,1.096,222,0.595,223,0.595,224,0.892,225,0.595,226,0.539,227,0.539,228,0.595,229,0.595,230,0.539,231,0.595,232,0.539,233,0.595,234,0.892,235,0.907,236,0.595,237,0.539,238,0.539,239,0.437,240,0.595,241,0.539,242,0.892,243,0.595,244,0.595,245,0.595,246,0.595,247,0.595,248,0.595,249,0.539,250,0.892,251,1.187,252,1.187,253,1.271,254,0.892,255,0.892,256,1.069,257,0.595,258,1.271,259,1.187,260,0.892,261,0.595,262,0.833,263,0.306,264,1.048,265,0.595,266,0.595,267,0.595,268,0.778,269,0.595,270,1.069,271,0.595,272,0.833,273,0.595,274,0.595,275,0.595,276,0.595,277,0.595,278,0.595,279,0.595,280,0.595,281,1.187,282,0.892,283,0.595,284,1.187,285,0.892,286,0.595,287,0.595,288,0.595,289,0.595,290,0.595,291,0.623,292,0.595,293,1.069,294,1.069,295,1.069,296,0.595,297,1.069,298,1.069,299,0.595,300,1.069,301,0.892,302,0.892,303,0.892,304,0.595,305,0.892,306,0.892,307,0.595,308,0.892,309,0.892,310,0.595,311,0.595,312,0.595,313,1.069,314,0.595,315,0.595,316,0.595,317,0.595,318,0.595,319,0.595,320,0.595,321,0.39,322,0.585,323,0.585,324,0.595,325,0.347,326,0.39,327,1.187,328,0.595,329,0.595,330,1.187,331,1.334,332,0.892,333,0.595,334,0.595,335,0.595,336,0.595,337,1.069,338,0.595,339,0.892,340,0.595,341,0.539,342,0.539,343,0.595,344,0.595,345,0.595,346,0.595,347,0.595,348,0.595,349,0.595,350,0.595,351,0.892,352,0.595,353,0.595,354,0.595,355,0.595,356,0.595,357,0.892,358,0.595,359,0.595,360,0.595,361,0.892,362,0.595,363,0.595,364,0.595,365,0.595,366,0.595,367,0.595,368,1.069,369,0.595,370,0.892,371,0.595,372,0.595,373,0.595,374,0.701,375,0.595,376,0.595,377,0.595,378,0.39,379,0.595,380,0.595,381,0.595,382,0.595,383,0.595,384,0.595,385,0.52,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.595,402,0.595,403,0.595,404,0.595,405,0.39,406,0.892,407,0.595,408,0.595,409,0.595,410,0.595,411,0.595,412,1.187,413,1.069,414,0.595,415,0.595,416,0.595,417,0.933,418,0.595,419,0.595,420,0.595,421,0.595,422,0.595,423,0.595,424,0.892,425,0.595,426,0.595,427,0.595,428,0.595,429,0.595,430,0.595,431,0.892,432,1.334,433,0.892,434,0.892,435,0.595,436,0.595,437,0.892,438,0.892,439,0.892,440,0.595,441,1.069,442,0.892,443,0.595,444,1.271,445,1.187,446,1.271,447,1.069,448,1.069,449,0.595,450,1.271,451,0.595,452,0.892,453,0.595,454,0.595,455,0.595,456,0.595,457,0.595,458,0.595,459,0.595,460,1.069,461,0.595,462,0.892,463,0.892,464,0.595,465,0.595,466,0.892,467,0.892,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.595,477,0.595,478,0.595,479,0.595,480,0.892,481,0.595,482,0.539,483,0.892,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.595,498,0.595,499,0.595,500,0.595,501,0.892,502,0.892,503,0.892,504,0.892,505,0.892,506,0.892,507,0.539,508,0.595,509,0.892,510,0.892,511,0.595,512,0.595,513,0.595,514,1.187,515,0.892,516,0.595,517,0.595,518,0.595,519,0.595,520,0.595,521,0.892,522,0.595,523,0.595,524,0.892,525,0.595,526,0.595,527,0.02,528,0.02]],["title/interfaces/DragEndEvent.html",[0,0.083,72,0.765]],["body/interfaces/DragEndEvent.html",[0,0.147,1,1.089,2,0.391,3,0.306,4,0.268,5,0.268,6,0.231,7,0.301,8,0.539,9,0.348,10,0.728,11,1.438,12,1.438,13,0.961,14,0.48,15,0.04,16,0.535,17,0.292,18,0.585,19,0.348,20,0.391,21,0.778,22,0.875,23,0.898,24,0.585,25,0.893,26,0.391,27,0.893,28,0.893,29,0.596,30,1.207,31,0.348,32,0.231,33,1.207,34,0.728,35,0.968,36,1.07,37,0.893,38,1.07,39,0.348,40,0.585,41,0.596,42,0.596,43,0.596,44,0.596,45,0.391,46,1.272,47,0.702,48,0.893,49,0.596,50,0.391,51,0.596,52,0.585,53,0.391,54,1.188,55,0.487,56,0.728,57,0.268,58,0.533,59,0.348,60,0.391,61,0.391,62,0.391,63,0.792,64,0.968,65,0.92,66,0.728,67,0.539,68,0.834,69,0.539,70,1.188,71,0.539,72,0.807,73,1.384,74,0.807,75,1.393,76,0.873,77,0.391,78,0.807,79,0.799,80,0.799,81,0.708,82,1.335,83,1.423,84,0.968,85,0.893,86,0.893,87,0.539,88,0.837,89,1.272,90,0.306,91,0.539,92,0.345,93,0.437,94,0.391,95,0.596,96,0.539,97,0.596,98,0.268,99,0.585,100,0.807,101,0.893,102,0.954,103,0.539,104,0.596,105,0.539,106,0.539,107,0.807,108,1.074,109,0.596,110,0.414,111,0.968,112,0.807,113,0.539,114,0.596,115,0.779,116,0.348,117,0.391,118,0.52,119,0.585,120,0.711,121,0.968,122,0.437,123,0.596,124,0.348,125,0.539,126,0.741,127,0.539,128,0.596,129,0.52,130,0.348,131,0.596,132,0.487,133,1.272,134,0.539,135,0.487,136,0.539,137,0.596,138,0.539,139,0.596,140,0.596,141,0.596,142,0.539,143,0.596,144,0.596,145,0.596,146,0.807,147,0.539,148,0.596,149,0.539,150,0.596,151,0.596,152,0.596,153,0.539,154,0.539,155,0.539,156,0.596,157,0.487,158,0.539,159,0.596,160,0.968,161,1.384,162,1.252,163,0.893,164,0.893,165,0.596,166,0.596,167,0.539,168,0.778,169,0.807,170,0.624,171,0.539,172,0.596,173,0.596,174,0.539,175,0.888,176,0.437,177,0.539,178,0.539,179,0.596,180,0.596,181,0.539,182,0.539,183,0.539,184,0.539,185,0.539,186,1.335,187,0.596,188,1.07,189,0.596,190,1.089,191,0.596,192,0.893,193,1.628,194,0.807,195,0.807,196,0.893,197,0.893,198,0.893,199,0.893,200,0.893,201,0.893,202,0.596,203,0.893,204,0.893,205,0.932,206,0.539,207,0.348,208,0.391,209,0.391,210,0.391,211,0.348,212,0.391,213,0.596,214,0.596,215,0.702,216,0.391,217,0.348,218,0.596,219,0.391,220,0.893,221,1.096,222,0.596,223,0.596,224,0.893,225,0.596,226,0.539,227,0.539,228,0.596,229,0.596,230,0.539,231,0.596,232,0.539,233,0.596,234,0.893,235,0.907,236,0.596,237,0.539,238,0.539,239,0.437,240,0.596,241,0.539,242,0.893,243,0.596,244,0.596,245,0.596,246,0.596,247,0.596,248,0.596,249,0.539,250,0.893,251,1.188,252,1.188,253,1.272,254,0.893,255,0.893,256,1.07,257,0.596,258,1.272,259,1.188,260,0.893,261,0.596,262,0.834,263,0.306,264,1.048,265,0.596,266,0.596,267,0.596,268,0.779,269,0.596,270,1.07,271,0.596,272,0.834,273,0.596,274,0.596,275,0.596,276,0.596,277,0.596,278,0.596,279,0.596,280,0.596,281,1.188,282,0.893,283,0.596,284,1.188,285,0.893,286,0.596,287,0.596,288,0.596,289,0.596,290,0.596,291,0.624,292,0.596,293,1.07,294,1.07,295,1.07,296,0.596,297,1.07,298,1.07,299,0.596,300,1.07,301,0.893,302,0.893,303,0.893,304,0.596,305,0.893,306,0.893,307,0.596,308,0.893,309,0.893,310,0.596,311,0.596,312,0.596,313,1.07,314,0.596,315,0.596,316,0.596,317,0.596,318,0.596,319,0.596,320,0.596,321,0.391,322,0.585,323,0.585,324,0.596,325,0.348,326,0.391,327,1.188,328,0.596,329,0.596,330,1.188,331,1.335,332,0.893,333,0.596,334,0.596,335,0.596,336,0.596,337,1.07,338,0.596,339,0.893,340,0.596,341,0.539,342,0.539,343,0.596,344,0.596,345,0.596,346,0.596,347,0.596,348,0.596,349,0.596,350,0.596,351,0.893,352,0.596,353,0.596,354,0.596,355,0.596,356,0.596,357,0.893,358,0.596,359,0.596,360,0.596,361,0.893,362,0.596,363,0.596,364,0.596,365,0.596,366,0.596,367,0.596,368,1.07,369,0.596,370,0.893,371,0.596,372,0.596,373,0.596,374,0.702,375,0.596,376,0.596,377,0.596,378,0.391,379,0.596,380,0.596,381,0.596,382,0.596,383,0.596,384,0.596,385,0.52,386,0.596,387,0.596,388,0.596,389,0.596,390,0.596,391,0.596,392,0.596,393,0.596,394,0.596,395,0.596,396,0.596,397,0.596,398,0.596,399,0.596,400,0.596,401,0.596,402,0.596,403,0.596,404,0.596,405,0.391,406,0.893,407,0.596,408,0.596,409,0.596,410,0.596,411,0.596,412,1.188,413,1.07,414,0.596,415,0.596,416,0.596,417,0.933,418,0.596,419,0.596,420,0.596,421,0.596,422,0.596,423,0.596,424,0.893,425,0.596,426,0.596,427,0.596,428,0.596,429,0.596,430,0.596,431,0.893,432,1.335,433,0.893,434,0.893,435,0.596,436,0.596,437,0.893,438,0.893,439,0.893,440,0.596,441,1.07,442,0.893,443,0.596,444,1.272,445,1.188,446,1.272,447,1.07,448,1.07,449,0.596,450,1.272,451,0.596,452,0.893,453,0.596,454,0.596,455,0.596,456,0.596,457,0.596,458,0.596,459,0.596,460,1.07,461,0.596,462,0.893,463,0.893,464,0.596,465,0.596,466,0.893,467,0.893,468,0.596,469,0.596,470,0.596,471,0.596,472,0.596,473,0.596,474,0.596,475,0.596,476,0.596,477,0.596,478,0.596,479,0.596,480,0.893,481,0.596,482,0.539,483,0.893,484,0.596,485,0.596,486,0.596,487,0.596,488,0.596,489,0.596,490,0.596,491,0.596,492,0.596,493,0.596,494,0.596,495,0.596,496,0.596,497,0.596,498,0.596,499,0.596,500,0.596,501,0.893,502,0.893,503,0.893,504,0.893,505,0.893,506,0.893,507,0.539,508,0.596,509,0.893,510,0.893,511,0.596,512,0.596,513,0.596,514,1.188,515,0.893,516,0.596,517,0.596,518,0.596,519,0.596,520,0.596,521,0.893,522,0.596,523,0.596,524,0.893,525,0.596,526,0.596,527,0.02,528,0.02]],["title/interfaces/DragEvent.html",[0,0.083,540,1.708]],["body/interfaces/DragEvent.html",[0,0.125,2,0.654,3,0.513,4,0.448,5,0.448,6,0.386,7,0.351,13,0.866,14,0.448,15,0.039,16,0.607,17,0.418,18,0.838,19,0.582,20,0.654,21,0.915,22,1.007,23,0.866,24,0.838,26,0.654,31,0.582,32,0.386,39,0.744,40,0.838,45,0.838,47,0.654,50,0.654,52,0.838,53,0.654,57,0.448,58,0.573,59,0.582,60,0.654,61,0.654,62,0.654,63,0.763,65,0.866,68,0.924,77,0.654,79,0.846,80,0.839,81,0.448,88,0.864,90,0.513,92,0.386,94,0.654,98,0.666,99,0.974,102,0.974,110,0.386,115,0.838,116,0.582,117,0.654,118,0.582,119,0.654,120,0.656,124,0.744,126,0.744,129,0.582,130,0.582,168,0.866,170,0.744,175,0.866,190,1.007,205,0.866,207,0.582,208,0.654,209,0.654,210,0.654,211,0.582,212,0.654,215,0.654,216,0.654,217,0.582,219,0.654,221,1.03,235,0.838,262,0.654,263,0.513,264,0.924,268,0.654,272,0.974,291,0.895,321,0.838,322,1.007,323,0.838,325,0.744,326,0.654,374,0.838,378,0.924,385,0.744,405,0.654,417,0.654,527,0.029,528,0.029,535,1.63,540,2.843,541,1.807,542,2.843,543,2.896,544,2.262,545,1.807,546,2.843,547,3.098,548,2.262,549,2.262,550,2.262,551,2.896,552,3.194,553,2.262,554,2.578,555,2.551,556,2.014,557,2.578,558,2.014,559,2.262,560,2.578,561,2.262,562,2.896,563,2.262,564,2.262,565,2.262,566,2.262,567,2.262,568,2.262,569,2.014,570,2.262,571,1.63,572,2.262,573,2.014,574,2.262,575,2.896,576,2.262,577,2.262,578,2.896,579,2.262,580,2.896,581,3.194,582,2.896,583,2.262,584,2.262,585,2.896,586,3.194,587,2.262,588,3.194,589,3.194,590,2.896,591,3.194,592,2.262,593,3.367,594,2.262,595,2.014,596,2.262,597,2.014,598,2.262,599,2.262,600,2.262,601,3.194,602,3.194,603,2.262,604,2.262,605,2.262,606,2.262,607,2.262,608,2.262,609,2.262,610,2.262,611,2.262,612,2.262,613,2.262,614,2.014,615,2.262,616,2.262,617,2.262]],["title/interfaces/DragMoveEvent.html",[0,0.083,71,0.765]],["body/interfaces/DragMoveEvent.html",[0,0.147,1,1.09,2,0.392,3,0.307,4,0.268,5,0.268,6,0.231,7,0.301,8,0.541,11,1.439,12,1.439,13,0.961,14,0.401,15,0.04,16,0.536,17,0.293,18,0.587,19,0.349,20,0.392,21,0.779,22,0.876,23,0.898,24,0.587,25,0.895,26,0.392,27,0.895,28,0.895,29,0.598,30,1.209,31,0.349,32,0.231,33,1.209,34,0.73,35,0.97,36,1.072,37,0.895,38,1.072,39,0.349,40,0.587,41,0.598,42,0.598,43,0.598,44,0.598,45,0.392,46,1.274,47,0.703,48,0.895,49,0.598,50,0.392,51,0.598,52,0.587,53,0.392,54,1.19,55,0.488,56,0.73,57,0.268,58,0.534,59,0.349,60,0.392,61,0.392,62,0.392,63,0.792,64,0.97,65,0.907,66,0.73,67,0.541,68,0.835,69,0.541,70,1.19,71,0.809,72,0.541,73,1.19,74,0.809,75,1.394,76,0.875,77,0.392,78,0.809,79,0.799,80,0.799,81,0.709,82,1.336,83,1.424,84,0.97,85,0.895,86,0.895,87,0.541,88,0.837,89,1.274,90,0.307,91,0.541,92,0.346,93,0.439,94,0.392,95,0.598,96,0.541,97,0.598,98,0.268,99,0.587,100,0.809,101,0.895,102,0.955,103,0.541,104,0.598,105,0.541,106,0.541,107,0.809,108,1.076,109,0.598,110,0.414,111,0.97,112,0.809,113,0.541,114,0.598,115,0.78,116,0.349,117,0.392,118,0.521,119,0.587,120,0.712,121,0.97,122,0.439,123,0.598,124,0.349,125,0.541,126,0.742,127,0.541,128,0.598,129,0.521,130,0.349,131,0.598,132,0.488,133,1.274,134,0.541,135,0.488,136,0.541,137,0.598,138,0.541,139,0.598,140,0.598,141,0.598,142,0.541,143,0.598,144,0.598,145,0.598,146,0.809,147,0.541,148,0.598,149,0.541,150,0.598,151,0.598,152,0.598,153,0.541,154,0.541,155,0.541,156,0.598,157,0.488,158,0.541,159,0.598,160,0.97,161,1.385,162,1.253,163,0.895,164,0.895,165,0.598,166,0.598,167,0.541,168,0.779,169,0.809,170,0.625,171,0.541,172,0.598,173,0.598,174,0.541,175,0.888,176,0.439,177,0.541,178,0.541,179,0.598,180,0.598,181,0.541,182,0.541,183,0.541,184,0.541,185,0.541,186,1.336,187,0.598,188,1.072,189,0.598,190,1.09,191,0.598,192,0.895,193,1.629,194,0.809,195,0.809,196,0.895,197,0.895,198,0.895,199,0.895,200,0.895,201,0.895,202,0.598,203,0.895,204,0.895,205,0.932,206,0.541,207,0.349,208,0.392,209,0.392,210,0.392,211,0.349,212,0.392,213,0.598,214,0.598,215,0.703,216,0.392,217,0.349,218,0.598,219,0.392,220,0.895,221,1.096,222,0.598,223,0.598,224,0.895,225,0.598,226,0.541,227,0.541,228,0.598,229,0.598,230,0.541,231,0.598,232,0.541,233,0.598,234,0.895,235,0.908,236,0.598,237,0.541,238,0.541,239,0.439,240,0.598,241,0.541,242,0.895,243,0.598,244,0.598,245,0.598,246,0.598,247,0.598,248,0.598,249,0.541,250,0.895,251,1.19,252,1.19,253,1.274,254,0.895,255,0.895,256,1.072,257,0.598,258,1.274,259,1.19,260,0.895,261,0.598,262,0.835,263,0.307,264,1.049,265,0.598,266,0.598,267,0.598,268,0.78,269,0.598,270,1.072,271,0.598,272,0.835,273,0.598,274,0.598,275,0.598,276,0.598,277,0.598,278,0.598,279,0.598,280,0.598,281,1.19,282,0.895,283,0.598,284,1.19,285,0.895,286,0.598,287,0.598,288,0.598,289,0.598,290,0.598,291,0.625,292,0.598,293,1.072,294,1.072,295,1.072,296,0.598,297,1.072,298,1.072,299,0.598,300,1.072,301,0.895,302,0.895,303,0.895,304,0.598,305,0.895,306,0.895,307,0.598,308,0.895,309,0.895,310,0.598,311,0.598,312,0.598,313,1.072,314,0.598,315,0.598,316,0.598,317,0.598,318,0.598,319,0.598,320,0.598,321,0.392,322,0.587,323,0.587,324,0.598,325,0.349,326,0.392,327,1.19,328,0.598,329,0.598,330,1.19,331,1.336,332,0.895,333,0.598,334,0.598,335,0.598,336,0.598,337,1.072,338,0.598,339,0.895,340,0.598,341,0.541,342,0.541,343,0.598,344,0.598,345,0.598,346,0.598,347,0.598,348,0.598,349,0.598,350,0.598,351,0.895,352,0.598,353,0.598,354,0.598,355,0.598,356,0.598,357,0.895,358,0.598,359,0.598,360,0.598,361,0.895,362,0.598,363,0.598,364,0.598,365,0.598,366,0.598,367,0.598,368,1.072,369,0.598,370,0.895,371,0.598,372,0.598,373,0.598,374,0.703,375,0.598,376,0.598,377,0.598,378,0.392,379,0.598,380,0.598,381,0.598,382,0.598,383,0.598,384,0.598,385,0.521,386,0.598,387,0.598,388,0.598,389,0.598,390,0.598,391,0.598,392,0.598,393,0.598,394,0.598,395,0.598,396,0.598,397,0.598,398,0.598,399,0.598,400,0.598,401,0.598,402,0.598,403,0.598,404,0.598,405,0.392,406,0.895,407,0.598,408,0.598,409,0.598,410,0.598,411,0.598,412,1.19,413,1.072,414,0.598,415,0.598,416,0.598,417,0.934,418,0.598,419,0.598,420,0.598,421,0.598,422,0.598,423,0.598,424,0.895,425,0.598,426,0.598,427,0.598,428,0.598,429,0.598,430,0.598,431,0.895,432,1.336,433,0.895,434,0.895,435,0.598,436,0.598,437,0.895,438,0.895,439,0.895,440,0.598,441,1.072,442,0.895,443,0.598,444,1.274,445,1.19,446,1.274,447,1.072,448,1.072,449,0.598,450,1.274,451,0.598,452,0.895,453,0.598,454,0.598,455,0.598,456,0.598,457,0.598,458,0.598,459,0.598,460,1.072,461,0.598,462,0.895,463,0.895,464,0.598,465,0.598,466,0.895,467,0.895,468,0.598,469,0.598,470,0.598,471,0.598,472,0.598,473,0.598,474,0.598,475,0.598,476,0.598,477,0.598,478,0.598,479,0.598,480,0.895,481,0.598,482,0.541,483,0.895,484,0.598,485,0.598,486,0.598,487,0.598,488,0.598,489,0.598,490,0.598,491,0.598,492,0.598,493,0.598,494,0.598,495,0.598,496,0.598,497,0.598,498,0.598,499,0.598,500,0.598,501,0.895,502,0.895,503,0.895,504,0.895,505,0.895,506,0.895,507,0.541,508,0.598,509,0.895,510,0.895,511,0.598,512,0.598,513,0.598,514,1.19,515,0.895,516,0.598,517,0.598,518,0.598,519,0.598,520,0.598,521,0.895,522,0.598,523,0.598,524,0.895,525,0.598,526,0.598,527,0.02,528,0.02]],["title/interfaces/DragPointerDownEvent.html",[0,0.083,67,0.765]],["body/interfaces/DragPointerDownEvent.html",[0,0.147,1,1.09,2,0.392,3,0.307,4,0.268,5,0.268,6,0.231,7,0.301,8,0.541,11,1.439,12,1.439,13,0.961,14,0.401,15,0.04,16,0.536,17,0.293,18,0.587,19,0.349,20,0.392,21,0.779,22,0.876,23,0.898,24,0.587,25,0.895,26,0.392,27,0.895,28,0.895,29,0.598,30,1.209,31,0.349,32,0.231,33,1.209,34,0.73,35,0.97,36,1.072,37,0.895,38,1.072,39,0.349,40,0.587,41,0.598,42,0.598,43,0.598,44,0.598,45,0.392,46,1.274,47,0.703,48,0.895,49,0.598,50,0.392,51,0.598,52,0.587,53,0.392,54,1.19,55,0.488,56,0.73,57,0.268,58,0.534,59,0.349,60,0.392,61,0.392,62,0.392,63,0.792,64,0.97,65,0.907,66,0.73,67,0.809,68,0.835,69,0.541,70,1.19,71,0.541,72,0.541,73,1.19,74,0.809,75,1.394,76,0.875,77,0.392,78,0.809,79,0.799,80,0.799,81,0.709,82,1.336,83,1.424,84,0.97,85,0.895,86,0.895,87,0.541,88,0.837,89,1.274,90,0.307,91,0.541,92,0.346,93,0.439,94,0.392,95,0.598,96,0.541,97,0.598,98,0.268,99,0.587,100,0.809,101,0.895,102,0.955,103,0.541,104,0.598,105,0.541,106,0.541,107,0.809,108,1.076,109,0.598,110,0.414,111,0.97,112,0.809,113,0.541,114,0.598,115,0.78,116,0.349,117,0.392,118,0.521,119,0.587,120,0.712,121,0.97,122,0.439,123,0.598,124,0.349,125,0.541,126,0.742,127,0.541,128,0.598,129,0.521,130,0.349,131,0.598,132,0.488,133,1.274,134,0.541,135,0.488,136,0.541,137,0.598,138,0.541,139,0.598,140,0.598,141,0.598,142,0.541,143,0.598,144,0.598,145,0.598,146,0.809,147,0.541,148,0.598,149,0.541,150,0.598,151,0.598,152,0.598,153,0.541,154,0.541,155,0.541,156,0.598,157,0.488,158,0.541,159,0.598,160,0.97,161,1.385,162,1.253,163,0.895,164,0.895,165,0.598,166,0.598,167,0.541,168,0.779,169,0.809,170,0.625,171,0.541,172,0.598,173,0.598,174,0.541,175,0.888,176,0.439,177,0.541,178,0.541,179,0.598,180,0.598,181,0.541,182,0.541,183,0.541,184,0.541,185,0.541,186,1.336,187,0.598,188,1.072,189,0.598,190,1.09,191,0.598,192,0.895,193,1.629,194,0.809,195,0.809,196,0.895,197,0.895,198,0.895,199,0.895,200,0.895,201,0.895,202,0.598,203,0.895,204,0.895,205,0.932,206,0.541,207,0.349,208,0.392,209,0.392,210,0.392,211,0.349,212,0.392,213,0.598,214,0.598,215,0.703,216,0.392,217,0.349,218,0.598,219,0.392,220,0.895,221,1.096,222,0.598,223,0.598,224,0.895,225,0.598,226,0.541,227,0.541,228,0.598,229,0.598,230,0.541,231,0.598,232,0.541,233,0.598,234,0.895,235,0.908,236,0.598,237,0.541,238,0.541,239,0.439,240,0.598,241,0.541,242,0.895,243,0.598,244,0.598,245,0.598,246,0.598,247,0.598,248,0.598,249,0.541,250,0.895,251,1.19,252,1.19,253,1.274,254,0.895,255,0.895,256,1.072,257,0.598,258,1.274,259,1.19,260,0.895,261,0.598,262,0.835,263,0.307,264,1.049,265,0.598,266,0.598,267,0.598,268,0.78,269,0.598,270,1.072,271,0.598,272,0.835,273,0.598,274,0.598,275,0.598,276,0.598,277,0.598,278,0.598,279,0.598,280,0.598,281,1.19,282,0.895,283,0.598,284,1.19,285,0.895,286,0.598,287,0.598,288,0.598,289,0.598,290,0.598,291,0.625,292,0.598,293,1.072,294,1.072,295,1.072,296,0.598,297,1.072,298,1.072,299,0.598,300,1.072,301,0.895,302,0.895,303,0.895,304,0.598,305,0.895,306,0.895,307,0.598,308,0.895,309,0.895,310,0.598,311,0.598,312,0.598,313,1.072,314,0.598,315,0.598,316,0.598,317,0.598,318,0.598,319,0.598,320,0.598,321,0.392,322,0.587,323,0.587,324,0.598,325,0.349,326,0.392,327,1.19,328,0.598,329,0.598,330,1.19,331,1.336,332,0.895,333,0.598,334,0.598,335,0.598,336,0.598,337,1.072,338,0.598,339,0.895,340,0.598,341,0.541,342,0.541,343,0.598,344,0.598,345,0.598,346,0.598,347,0.598,348,0.598,349,0.598,350,0.598,351,0.895,352,0.598,353,0.598,354,0.598,355,0.598,356,0.598,357,0.895,358,0.598,359,0.598,360,0.598,361,0.895,362,0.598,363,0.598,364,0.598,365,0.598,366,0.598,367,0.598,368,1.072,369,0.598,370,0.895,371,0.598,372,0.598,373,0.598,374,0.703,375,0.598,376,0.598,377,0.598,378,0.392,379,0.598,380,0.598,381,0.598,382,0.598,383,0.598,384,0.598,385,0.521,386,0.598,387,0.598,388,0.598,389,0.598,390,0.598,391,0.598,392,0.598,393,0.598,394,0.598,395,0.598,396,0.598,397,0.598,398,0.598,399,0.598,400,0.598,401,0.598,402,0.598,403,0.598,404,0.598,405,0.392,406,0.895,407,0.598,408,0.598,409,0.598,410,0.598,411,0.598,412,1.19,413,1.072,414,0.598,415,0.598,416,0.598,417,0.934,418,0.598,419,0.598,420,0.598,421,0.598,422,0.598,423,0.598,424,0.895,425,0.598,426,0.598,427,0.598,428,0.598,429,0.598,430,0.598,431,0.895,432,1.336,433,0.895,434,0.895,435,0.598,436,0.598,437,0.895,438,0.895,439,0.895,440,0.598,441,1.072,442,0.895,443,0.598,444,1.274,445,1.19,446,1.274,447,1.072,448,1.072,449,0.598,450,1.274,451,0.598,452,0.895,453,0.598,454,0.598,455,0.598,456,0.598,457,0.598,458,0.598,459,0.598,460,1.072,461,0.598,462,0.895,463,0.895,464,0.598,465,0.598,466,0.895,467,0.895,468,0.598,469,0.598,470,0.598,471,0.598,472,0.598,473,0.598,474,0.598,475,0.598,476,0.598,477,0.598,478,0.598,479,0.598,480,0.895,481,0.598,482,0.541,483,0.895,484,0.598,485,0.598,486,0.598,487,0.598,488,0.598,489,0.598,490,0.598,491,0.598,492,0.598,493,0.598,494,0.598,495,0.598,496,0.598,497,0.598,498,0.598,499,0.598,500,0.598,501,0.895,502,0.895,503,0.895,504,0.895,505,0.895,506,0.895,507,0.541,508,0.598,509,0.895,510,0.895,511,0.598,512,0.598,513,0.598,514,1.19,515,0.895,516,0.598,517,0.598,518,0.598,519,0.598,520,0.598,521,0.895,522,0.598,523,0.598,524,0.895,525,0.598,526,0.598,527,0.02,528,0.02]],["title/interfaces/DragStartEvent.html",[0,0.083,69,0.765]],["body/interfaces/DragStartEvent.html",[0,0.147,1,1.038,2,0.391,3,0.307,4,0.268,5,0.268,6,0.231,7,0.301,8,0.54,9,0.348,10,0.729,11,1.438,12,1.438,13,0.961,14,0.48,15,0.04,16,0.535,17,0.293,18,0.586,19,0.348,20,0.391,21,0.778,22,0.876,23,0.898,24,0.586,25,0.893,26,0.391,27,0.893,28,0.893,29,0.597,30,1.208,31,0.348,32,0.231,33,1.208,34,0.729,35,0.968,36,1.272,37,0.893,38,1.07,39,0.348,40,0.586,41,0.597,42,0.597,43,0.597,44,0.597,45,0.391,46,1.272,47,0.702,48,0.893,49,0.597,50,0.391,51,0.597,52,0.586,53,0.391,54,1.188,55,0.487,56,0.729,57,0.268,58,0.533,59,0.348,60,0.391,61,0.391,62,0.391,63,0.792,64,0.968,65,0.906,66,0.729,67,0.54,68,0.779,69,0.808,70,1.384,71,0.54,72,0.54,73,1.188,74,0.808,75,1.393,76,0.873,77,0.391,78,0.808,79,0.799,80,0.799,81,0.709,82,1.335,83,1.423,84,0.968,85,0.893,86,0.893,87,0.54,88,0.837,89,1.272,90,0.307,91,0.54,92,0.345,93,0.438,94,0.391,95,0.597,96,0.54,97,0.597,98,0.268,99,0.586,100,0.808,101,0.893,102,0.954,103,0.54,104,0.597,105,0.54,106,0.54,107,0.808,108,1.075,109,0.597,110,0.414,111,0.968,112,0.808,113,0.54,114,0.597,115,0.779,116,0.348,117,0.391,118,0.52,119,0.586,120,0.711,121,0.968,122,0.438,123,0.597,124,0.348,125,0.54,126,0.741,127,0.54,128,0.597,129,0.52,130,0.348,131,0.597,132,0.487,133,1.272,134,0.54,135,0.487,136,0.54,137,0.597,138,0.54,139,0.597,140,0.597,141,0.597,142,0.54,143,0.597,144,0.597,145,0.597,146,0.808,147,0.54,148,0.597,149,0.54,150,0.597,151,0.597,152,0.597,153,0.54,154,0.54,155,0.54,156,0.597,157,0.487,158,0.54,159,0.597,160,0.968,161,1.384,162,1.252,163,0.893,164,0.893,165,0.597,166,0.597,167,0.54,168,0.778,169,0.808,170,0.624,171,0.54,172,0.597,173,0.597,174,0.54,175,0.888,176,0.438,177,0.54,178,0.54,179,0.597,180,0.597,181,0.54,182,0.54,183,0.54,184,0.54,185,0.54,186,1.335,187,0.597,188,1.07,189,0.597,190,1.089,191,0.597,192,0.893,193,1.628,194,0.808,195,0.808,196,0.893,197,0.893,198,0.893,199,0.893,200,0.893,201,0.893,202,0.597,203,0.893,204,0.893,205,0.932,206,0.54,207,0.348,208,0.391,209,0.391,210,0.391,211,0.348,212,0.391,213,0.597,214,0.597,215,0.702,216,0.391,217,0.348,218,0.597,219,0.391,220,0.893,221,1.096,222,0.597,223,0.597,224,0.893,225,0.597,226,0.54,227,0.54,228,0.597,229,0.597,230,0.54,231,0.597,232,0.54,233,0.597,234,0.893,235,0.908,236,0.597,237,0.54,238,0.54,239,0.438,240,0.597,241,0.54,242,0.893,243,0.597,244,0.597,245,0.597,246,0.597,247,0.597,248,0.597,249,0.54,250,0.893,251,1.188,252,1.188,253,1.272,254,0.893,255,0.893,256,1.07,257,0.597,258,1.272,259,1.188,260,0.893,261,0.597,262,0.834,263,0.307,264,1.049,265,0.597,266,0.597,267,0.597,268,0.779,269,0.597,270,1.07,271,0.597,272,0.834,273,0.597,274,0.597,275,0.597,276,0.597,277,0.597,278,0.597,279,0.597,280,0.597,281,1.188,282,0.893,283,0.597,284,1.188,285,0.893,286,0.597,287,0.597,288,0.597,289,0.597,290,0.597,291,0.624,292,0.597,293,1.07,294,1.07,295,1.07,296,0.597,297,1.07,298,1.07,299,0.597,300,1.07,301,0.893,302,0.893,303,0.893,304,0.597,305,0.893,306,0.893,307,0.597,308,0.893,309,0.893,310,0.597,311,0.597,312,0.597,313,1.07,314,0.597,315,0.597,316,0.597,317,0.597,318,0.597,319,0.597,320,0.597,321,0.391,322,0.586,323,0.586,324,0.597,325,0.348,326,0.391,327,1.188,328,0.597,329,0.597,330,1.188,331,1.335,332,0.893,333,0.597,334,0.597,335,0.597,336,0.597,337,1.07,338,0.597,339,0.893,340,0.597,341,0.54,342,0.54,343,0.597,344,0.597,345,0.597,346,0.597,347,0.597,348,0.597,349,0.597,350,0.597,351,0.893,352,0.597,353,0.597,354,0.597,355,0.597,356,0.597,357,0.893,358,0.597,359,0.597,360,0.597,361,0.893,362,0.597,363,0.597,364,0.597,365,0.597,366,0.597,367,0.597,368,1.07,369,0.597,370,0.893,371,0.597,372,0.597,373,0.597,374,0.702,375,0.597,376,0.597,377,0.597,378,0.391,379,0.597,380,0.597,381,0.597,382,0.597,383,0.597,384,0.597,385,0.52,386,0.597,387,0.597,388,0.597,389,0.597,390,0.597,391,0.597,392,0.597,393,0.597,394,0.597,395,0.597,396,0.597,397,0.597,398,0.597,399,0.597,400,0.597,401,0.597,402,0.597,403,0.597,404,0.597,405,0.391,406,0.893,407,0.597,408,0.597,409,0.597,410,0.597,411,0.597,412,1.188,413,1.07,414,0.597,415,0.597,416,0.597,417,0.933,418,0.597,419,0.597,420,0.597,421,0.597,422,0.597,423,0.597,424,0.893,425,0.597,426,0.597,427,0.597,428,0.597,429,0.597,430,0.597,431,0.893,432,1.335,433,0.893,434,0.893,435,0.597,436,0.597,437,0.893,438,0.893,439,0.893,440,0.597,441,1.07,442,0.893,443,0.597,444,1.272,445,1.188,446,1.272,447,1.07,448,1.07,449,0.597,450,1.272,451,0.597,452,0.893,453,0.597,454,0.597,455,0.597,456,0.597,457,0.597,458,0.597,459,0.597,460,1.07,461,0.597,462,0.893,463,0.893,464,0.597,465,0.597,466,0.893,467,0.893,468,0.597,469,0.597,470,0.597,471,0.597,472,0.597,473,0.597,474,0.597,475,0.597,476,0.597,477,0.597,478,0.597,479,0.597,480,0.893,481,0.597,482,0.54,483,0.893,484,0.597,485,0.597,486,0.597,487,0.597,488,0.597,489,0.597,490,0.597,491,0.597,492,0.597,493,0.597,494,0.597,495,0.597,496,0.597,497,0.597,498,0.597,499,0.597,500,0.597,501,0.893,502,0.893,503,0.893,504,0.893,505,0.893,506,0.893,507,0.54,508,0.597,509,0.893,510,0.893,511,0.597,512,0.597,513,0.597,514,1.188,515,0.893,516,0.597,517,0.597,518,0.597,519,0.597,520,0.597,521,0.893,522,0.597,523,0.597,524,0.893,525,0.597,526,0.597,527,0.02,528,0.02]],["title/directives/DraggableDirective.html",[17,0.277,93,0.62]],["body/directives/DraggableDirective.html",[0,0.144,1,0.999,3,0.281,4,0.245,5,0.245,6,0.61,7,0.356,8,0.494,9,0.318,11,1.435,12,1.435,13,0.952,14,0.719,15,0.04,16,0.519,17,0.274,18,0.665,19,0.318,20,0.358,21,0.752,22,0.966,23,0.882,24,0.665,25,1.014,26,0.358,27,0.835,28,1.014,29,0.546,30,1.168,31,0.318,32,0.211,33,1.168,34,0.682,35,0.917,36,1.014,37,0.835,38,1.014,39,0.318,40,0.548,41,0.546,42,0.546,43,0.546,44,0.546,45,0.358,46,1.224,47,0.665,48,0.835,49,0.546,50,0.358,51,0.546,52,0.548,53,0.358,54,1.291,55,0.446,56,0.682,57,0.245,58,0.549,59,0.318,60,0.358,61,0.358,62,0.358,63,0.777,64,1.168,65,0.907,66,0.828,67,0.494,68,0.745,69,0.494,70,1.136,71,0.494,72,0.494,73,1.136,74,0.756,75,1.368,76,1.053,77,0.358,78,0.756,79,0.786,80,0.786,81,0.708,82,1.291,83,1.385,84,0.917,85,0.835,86,0.835,87,0.494,88,0.863,89,1.291,90,0.429,91,0.756,92,0.392,93,0.613,94,0.548,95,0.835,96,0.756,97,0.835,98,0.375,99,0.745,100,1.028,101,1.136,102,0.992,103,0.756,104,0.835,105,0.756,106,0.917,107,1.028,108,1.253,109,0.835,110,0.499,111,1.168,112,1.107,113,0.756,114,1.014,115,0.803,116,0.487,117,0.548,118,0.591,119,0.665,120,0.786,121,1.028,122,0.613,123,0.835,124,0.487,125,0.917,126,0.783,127,0.756,128,0.835,129,0.662,130,0.591,131,0.835,132,1.13,133,1.291,134,0.917,135,0.682,136,0.756,137,0.835,138,0.756,139,0.835,140,0.835,141,0.835,142,0.917,143,0.835,144,0.835,145,0.835,146,1.028,147,0.756,148,0.835,149,0.756,150,0.835,151,0.835,152,1.014,153,0.494,154,0.494,155,0.494,156,0.546,157,0.446,158,0.494,159,0.546,160,1.028,161,1.343,162,1.215,163,0.835,164,0.835,165,0.546,166,0.546,167,0.756,168,0.871,169,1.028,170,0.713,171,0.756,172,0.835,173,0.835,174,0.917,175,0.871,176,0.613,177,0.756,178,0.756,179,0.835,180,0.835,181,0.756,182,0.917,183,0.756,184,0.917,185,0.917,186,1.291,187,0.546,188,1.014,189,0.546,190,1.08,191,0.546,192,0.835,193,1.61,194,0.756,195,0.756,196,0.835,197,0.835,198,0.835,199,0.835,200,0.835,201,0.835,202,0.546,203,0.835,204,0.835,205,0.919,206,0.494,207,0.318,208,0.358,209,0.358,210,0.358,211,0.318,212,0.358,213,0.546,214,0.546,215,0.665,216,0.358,217,0.318,218,0.546,219,0.358,220,0.835,221,1.087,222,0.546,223,0.546,224,0.835,225,0.546,226,0.494,227,0.494,228,0.546,229,0.546,230,0.494,231,0.546,232,0.494,233,0.546,234,0.835,235,0.881,236,0.546,237,0.494,238,0.494,239,0.401,240,0.546,241,0.494,242,0.835,243,0.546,244,0.546,245,0.546,246,0.546,247,0.546,248,0.546,249,0.494,250,0.835,251,1.136,252,1.136,253,1.224,254,0.835,255,0.835,256,1.014,257,0.546,258,1.224,259,1.136,260,0.835,261,0.546,262,0.803,263,0.281,264,1.034,265,0.546,266,0.546,267,0.546,268,0.745,269,0.546,270,1.014,271,0.546,272,0.803,273,0.546,274,0.546,275,0.546,276,0.546,277,0.546,278,0.546,279,0.546,280,0.546,281,1.136,282,0.835,283,0.546,284,1.136,285,0.835,286,0.546,287,0.546,288,0.546,289,0.546,290,0.546,291,0.591,292,0.546,293,1.014,294,1.014,295,1.014,296,0.546,297,1.014,298,1.014,299,0.546,300,1.014,301,0.835,302,0.835,303,0.835,304,0.546,305,0.835,306,0.835,307,0.546,308,0.835,309,0.835,310,0.546,311,0.546,312,0.546,313,1.014,314,0.546,315,0.546,316,0.546,317,0.546,318,0.546,319,0.546,320,0.546,321,0.358,322,0.548,323,0.548,324,0.546,325,0.318,326,0.358,327,1.136,328,0.546,329,0.546,330,1.136,331,1.291,332,0.835,333,0.546,334,0.546,335,0.546,336,0.546,337,1.014,338,0.546,339,0.835,340,0.546,341,0.494,342,0.494,343,0.546,344,0.546,345,0.546,346,0.546,347,0.546,348,0.546,349,0.546,350,0.546,351,0.835,352,0.546,353,0.546,354,0.546,355,0.546,356,0.546,357,0.835,358,0.546,359,0.546,360,0.546,361,0.835,362,0.546,363,0.546,364,0.546,365,0.546,366,0.546,367,0.546,368,1.014,369,0.546,370,0.835,371,0.546,372,0.546,373,0.546,374,0.665,375,0.546,376,0.546,377,0.546,378,0.358,379,0.546,380,0.546,381,0.546,382,0.546,383,0.546,384,0.546,385,0.807,386,0.546,387,0.546,388,0.546,389,0.546,390,0.546,391,0.546,392,0.546,393,0.546,394,0.546,395,0.546,396,0.546,397,0.546,398,0.546,399,0.546,400,0.546,401,0.546,402,0.546,403,0.546,404,0.546,405,0.358,406,0.835,407,0.546,408,0.546,409,0.546,410,0.546,411,0.546,412,1.136,413,1.014,414,0.546,415,0.546,416,0.546,417,0.908,418,0.546,419,0.546,420,0.546,421,0.546,422,0.546,423,0.546,424,0.835,425,0.546,426,0.546,427,0.546,428,0.546,429,0.546,430,0.546,431,0.835,432,1.291,433,0.835,434,0.835,435,0.546,436,0.546,437,0.835,438,0.835,439,0.835,440,0.546,441,1.014,442,0.835,443,0.546,444,1.224,445,1.136,446,1.224,447,1.014,448,1.014,449,0.546,450,1.224,451,0.546,452,0.835,453,0.546,454,0.546,455,0.546,456,0.546,457,0.546,458,0.546,459,0.546,460,1.014,461,0.546,462,0.835,463,0.835,464,0.546,465,0.546,466,0.835,467,0.835,468,0.546,469,0.546,470,0.546,471,0.546,472,0.546,473,0.546,474,0.546,475,0.546,476,0.546,477,0.546,478,0.546,479,0.546,480,0.835,481,0.546,482,0.494,483,0.835,484,0.546,485,0.546,486,0.546,487,0.546,488,0.546,489,0.546,490,0.546,491,0.546,492,0.546,493,0.546,494,0.546,495,0.546,496,0.546,497,0.546,498,0.546,499,0.546,500,0.546,501,0.835,502,0.835,503,0.835,504,0.835,505,0.835,506,0.835,507,0.494,508,0.546,509,0.835,510,0.835,511,0.546,512,0.546,513,0.546,514,1.136,515,0.835,516,0.546,517,0.546,518,0.546,519,0.546,520,0.546,521,0.835,522,0.546,523,0.546,524,0.835,525,0.546,526,0.546,527,0.019,528,0.019,618,1.238,619,1.409,620,2.154,621,2.154,622,2.502,623,4.041,624,1.982,625,1.982,626,1.982,627,1.982,628,1.982,629,1.982,630,1.982,631,1.982,632,1.982,633,1.982,634,1.982,635,1.982,636,1.982,637,1.982,638,1.982,639,1.982,640,1.982]],["title/directives/DraggableScrollContainerDirective.html",[17,0.277,57,0.38]],["body/directives/DraggableScrollContainerDirective.html",[3,0.662,4,0.578,5,0.578,6,0.577,7,0.352,9,0.751,10,1.218,15,0.039,16,0.498,17,0.489,19,0.945,31,0.751,32,0.498,57,0.67,58,0.67,63,0.662,90,0.767,92,0.498,110,0.577,132,1.051,207,0.87,263,0.767,385,0.751,527,0.033,528,0.033,618,2.921,619,3.323,623,3.323,641,5.418,642,4.676,643,3.86,644,5.418,645,4.181,646,5.418,647,3.849,648,3.849,649,3.849,650,5.418,651,3.86,652,3.849,653,4.676,654,4.676]],["title/interfaces/DropEvent.html",[0,0.083,542,1.708]],["body/interfaces/DropEvent.html",[0,0.123,2,0.64,3,0.501,4,0.438,5,0.438,6,0.377,7,0.35,9,0.568,10,1.027,13,0.938,14,0.684,15,0.039,16,0.604,17,0.412,18,0.825,19,0.568,20,0.64,21,0.91,22,1,23,0.858,24,0.825,26,0.64,31,0.568,32,0.377,39,0.734,40,0.825,45,0.825,47,0.64,50,0.64,52,0.825,53,0.64,57,0.438,58,0.565,59,0.568,60,0.64,61,0.64,62,0.64,63,0.757,65,0.858,68,0.825,77,0.64,79,0.861,80,0.858,81,0.565,88,0.861,90,0.501,92,0.377,94,0.64,98,0.713,99,1.042,102,0.966,110,0.377,115,0.825,116,0.568,117,0.64,118,0.568,119,0.64,120,0.647,124,0.734,126,0.734,129,0.568,130,0.568,168,0.858,170,0.858,175,0.858,190,1,205,0.858,207,0.568,208,0.64,209,0.64,210,0.64,211,0.568,212,0.64,215,0.64,216,0.64,217,0.568,219,0.64,221,1.024,235,0.825,262,0.64,263,0.501,264,0.914,268,0.64,272,0.966,291,0.948,321,0.825,322,1,323,0.825,325,0.734,326,0.64,374,0.825,378,0.914,385,0.858,405,0.64,417,0.64,527,0.028,528,0.028,535,1.593,540,2.54,541,1.766,542,2.813,543,2.853,544,2.211,545,1.766,546,2.813,547,3.076,548,2.211,549,2.211,550,3.159,551,3.338,552,3.539,553,3.159,554,2.54,555,2.524,556,1.968,557,2.54,558,1.968,559,2.211,560,2.54,561,2.211,562,2.853,563,2.211,564,2.211,565,2.211,566,2.211,567,2.211,568,2.211,569,1.968,570,2.211,571,1.593,572,2.211,573,1.968,574,2.211,575,2.853,576,2.211,577,2.211,578,2.853,579,2.211,580,2.853,581,3.159,582,2.853,583,2.211,584,2.211,585,2.853,586,3.159,587,2.211,588,3.159,589,3.159,590,2.853,591,3.159,592,2.211,593,3.338,594,2.211,595,1.968,596,2.211,597,1.968,598,2.211,599,2.211,600,2.211,601,3.159,602,3.159,603,2.211,604,2.211,605,2.211,606,2.211,607,2.211,608,2.211,609,2.211,610,2.211,611,2.211,612,2.211,613,2.211,614,1.968,615,2.211,616,2.211,617,2.211]],["title/directives/DroppableDirective.html",[17,0.277,535,1.382]],["body/directives/DroppableDirective.html",[0,0.12,3,0.482,4,0.421,5,0.421,6,0.624,7,0.37,9,0.547,10,1.001,13,0.846,14,0.724,15,0.039,16,0.597,17,0.402,18,0.897,19,0.547,20,0.615,21,0.9,22,1.059,23,0.846,24,0.897,26,0.615,31,0.547,32,0.363,39,0.715,40,0.805,45,0.805,47,0.615,50,0.615,52,0.805,53,0.615,57,0.421,58,0.551,59,0.547,60,0.615,61,0.615,62,0.615,63,0.746,65,0.846,68,0.805,77,0.615,79,0.837,80,0.83,81,0.421,88,0.883,90,0.631,92,0.363,94,0.805,98,0.693,99,0.951,102,0.951,110,0.363,115,0.805,116,0.715,117,0.805,118,0.715,119,0.805,120,0.746,124,0.846,126,0.846,129,0.715,130,0.797,168,0.93,170,0.715,175,0.846,190,0.987,205,0.846,207,0.547,208,0.615,209,0.615,210,0.615,211,0.547,212,0.615,215,0.615,216,0.615,217,0.547,219,0.615,221,1.013,235,0.805,262,0.615,263,0.482,264,0.897,268,0.615,272,0.951,291,0.878,321,0.805,322,0.987,323,0.805,325,0.715,326,0.615,374,0.805,378,0.897,385,0.715,405,0.615,417,0.615,527,0.027,528,0.027,535,2.005,540,2.477,541,1.699,542,2.477,543,3.101,544,2.126,545,1.699,546,2.76,547,3.039,548,2.126,549,2.126,550,2.126,551,2.782,552,3.101,553,2.126,554,2.477,555,2.797,556,2.477,557,2.928,558,2.76,559,2.782,560,2.928,561,2.782,562,3.289,563,3.101,564,2.782,565,3.101,566,2.782,567,3.101,568,2.126,569,1.893,570,2.126,571,1.532,572,2.126,573,1.893,574,3.101,575,2.782,576,2.126,577,2.126,578,2.782,579,2.126,580,2.782,581,3.101,582,2.782,583,2.126,584,2.126,585,2.782,586,3.101,587,2.126,588,3.101,589,3.101,590,2.782,591,3.101,592,2.126,593,3.289,594,2.126,595,1.893,596,2.126,597,1.893,598,2.126,599,2.126,600,2.126,601,3.101,602,3.101,603,2.126,604,2.126,605,2.126,606,2.126,607,2.126,608,2.126,609,2.126,610,2.126,611,2.126,612,2.126,613,2.126,614,1.893,615,2.126,616,2.126,617,2.126,618,2.126,619,2.419,620,3.164,621,3.164,623,4.116,655,3.404,656,3.404,657,3.404,658,3.404,659,3.404,660,3.404,661,3.404,662,3.404]],["title/interfaces/GhostElementCreatedEvent.html",[0,0.083,87,0.765]],["body/interfaces/GhostElementCreatedEvent.html",[0,0.147,1,1.036,2,0.39,3,0.305,4,0.267,5,0.267,6,0.23,7,0.3,8,0.537,9,0.346,10,0.726,11,1.437,12,1.437,13,0.97,14,0.57,15,0.04,16,0.534,17,0.292,18,0.584,19,0.346,20,0.39,21,0.777,22,0.874,23,0.897,24,0.584,25,0.89,26,0.39,27,0.89,28,0.89,29,0.594,30,1.206,31,0.346,32,0.23,33,1.206,34,0.726,35,0.966,36,1.068,37,0.89,38,1.068,39,0.346,40,0.584,41,0.594,42,0.594,43,0.594,44,0.594,45,0.39,46,1.27,47,0.7,48,0.89,49,0.594,50,0.39,51,0.594,52,0.584,53,0.39,54,1.186,55,0.485,56,0.726,57,0.267,58,0.532,59,0.346,60,0.39,61,0.39,62,0.39,63,0.791,64,0.966,65,0.906,66,0.726,67,0.537,68,0.777,69,0.537,70,1.186,71,0.537,72,0.537,73,1.186,74,0.805,75,1.392,76,0.871,77,0.39,78,0.805,79,0.816,80,0.816,81,0.708,82,1.333,83,1.421,84,0.966,85,0.89,86,0.89,87,0.805,88,0.845,89,1.382,90,0.305,91,0.537,92,0.344,93,0.436,94,0.39,95,0.594,96,0.537,97,0.594,98,0.267,99,0.584,100,0.805,101,0.89,102,0.953,103,0.537,104,0.594,105,0.537,106,0.537,107,0.805,108,1.072,109,0.594,110,0.413,111,0.966,112,0.805,113,0.537,114,0.594,115,0.777,116,0.346,117,0.39,118,0.519,119,0.584,120,0.71,121,0.966,122,0.436,123,0.594,124,0.346,125,0.537,126,0.74,127,0.537,128,0.594,129,0.519,130,0.346,131,0.594,132,0.485,133,1.27,134,0.537,135,0.485,136,0.537,137,0.594,138,0.537,139,0.594,140,0.594,141,0.594,142,0.537,143,0.594,144,0.594,145,0.594,146,0.805,147,0.537,148,0.594,149,0.537,150,0.594,151,0.594,152,0.594,153,0.537,154,0.537,155,0.537,156,0.594,157,0.485,158,0.537,159,0.594,160,0.966,161,1.382,162,1.25,163,0.89,164,0.89,165,0.594,166,0.594,167,0.537,168,0.777,169,0.805,170,0.622,171,0.537,172,0.594,173,0.594,174,0.537,175,0.887,176,0.436,177,0.537,178,0.537,179,0.594,180,0.594,181,0.537,182,0.537,183,0.537,184,0.537,185,0.537,186,1.333,187,0.594,188,1.068,189,0.594,190,1.089,191,0.594,192,0.89,193,1.627,194,0.805,195,0.805,196,0.89,197,0.89,198,0.89,199,0.89,200,0.89,201,0.89,202,0.594,203,0.89,204,0.89,205,0.931,206,0.537,207,0.346,208,0.39,209,0.39,210,0.39,211,0.346,212,0.39,213,0.594,214,0.594,215,0.7,216,0.39,217,0.346,218,0.594,219,0.39,220,0.89,221,1.095,222,0.594,223,0.594,224,0.89,225,0.594,226,0.537,227,0.537,228,0.594,229,0.594,230,0.537,231,0.594,232,0.537,233,0.594,234,0.89,235,0.906,236,0.594,237,0.537,238,0.537,239,0.436,240,0.594,241,0.537,242,0.89,243,0.594,244,0.594,245,0.594,246,0.594,247,0.594,248,0.594,249,0.537,250,0.89,251,1.186,252,1.186,253,1.27,254,0.89,255,0.89,256,1.068,257,0.594,258,1.27,259,1.186,260,0.89,261,0.594,262,0.833,263,0.305,264,1.048,265,0.594,266,0.594,267,0.594,268,0.777,269,0.594,270,1.068,271,0.594,272,0.833,273,0.594,274,0.594,275,0.594,276,0.594,277,0.594,278,0.594,279,0.594,280,0.594,281,1.186,282,0.89,283,0.594,284,1.186,285,0.89,286,0.594,287,0.594,288,0.594,289,0.594,290,0.594,291,0.622,292,0.594,293,1.068,294,1.068,295,1.068,296,0.594,297,1.068,298,1.068,299,0.594,300,1.068,301,0.89,302,0.89,303,0.89,304,0.594,305,0.89,306,0.89,307,0.594,308,0.89,309,0.89,310,0.594,311,0.594,312,0.594,313,1.068,314,0.594,315,0.594,316,0.594,317,0.594,318,0.594,319,0.594,320,0.594,321,0.39,322,0.584,323,0.584,324,0.594,325,0.346,326,0.39,327,1.186,328,0.594,329,0.594,330,1.186,331,1.333,332,0.89,333,0.594,334,0.594,335,0.594,336,0.594,337,1.068,338,0.594,339,0.89,340,0.594,341,0.537,342,0.537,343,0.594,344,0.594,345,0.594,346,0.594,347,0.594,348,0.594,349,0.594,350,0.594,351,0.89,352,0.594,353,0.594,354,0.594,355,0.594,356,0.594,357,0.89,358,0.594,359,0.594,360,0.594,361,0.89,362,0.594,363,0.594,364,0.594,365,0.594,366,0.594,367,0.594,368,1.068,369,0.594,370,0.89,371,0.594,372,0.594,373,0.594,374,0.7,375,0.594,376,0.594,377,0.594,378,0.39,379,0.594,380,0.594,381,0.594,382,0.594,383,0.594,384,0.594,385,0.519,386,0.594,387,0.594,388,0.594,389,0.594,390,0.594,391,0.594,392,0.594,393,0.594,394,0.594,395,0.594,396,0.594,397,0.594,398,0.594,399,0.594,400,0.594,401,0.594,402,0.594,403,0.594,404,0.594,405,0.39,406,0.89,407,0.594,408,0.594,409,0.594,410,0.594,411,0.594,412,1.186,413,1.068,414,0.594,415,0.594,416,0.594,417,0.932,418,0.594,419,0.594,420,0.594,421,0.594,422,0.594,423,0.594,424,0.89,425,0.594,426,0.594,427,0.594,428,0.594,429,0.594,430,0.594,431,0.89,432,1.333,433,0.89,434,0.89,435,0.594,436,0.594,437,0.89,438,0.89,439,0.89,440,0.594,441,1.068,442,0.89,443,0.594,444,1.27,445,1.186,446,1.27,447,1.068,448,1.068,449,0.594,450,1.27,451,0.594,452,0.89,453,0.594,454,0.594,455,0.594,456,0.594,457,0.594,458,0.594,459,0.594,460,1.068,461,0.594,462,0.89,463,0.89,464,0.594,465,0.594,466,0.89,467,0.89,468,0.594,469,0.594,470,0.594,471,0.594,472,0.594,473,0.594,474,0.594,475,0.594,476,0.594,477,0.594,478,0.594,479,0.594,480,0.89,481,0.594,482,0.537,483,0.89,484,0.594,485,0.594,486,0.594,487,0.594,488,0.594,489,0.594,490,0.594,491,0.594,492,0.594,493,0.594,494,0.594,495,0.594,496,0.594,497,0.594,498,0.594,499,0.594,500,0.594,501,0.89,502,0.89,503,0.89,504,0.89,505,0.89,506,0.89,507,0.537,508,0.594,509,0.89,510,0.89,511,0.594,512,0.594,513,0.594,514,1.186,515,0.89,516,0.594,517,0.594,518,0.594,519,0.594,520,0.594,521,0.89,522,0.594,523,0.594,524,0.89,525,0.594,526,0.594,527,0.02,528,0.02]],["title/interfaces/PointerEvent.html",[0,0.083,78,0.765]],["body/interfaces/PointerEvent.html",[0,0.147,1,1.036,2,0.389,3,0.305,4,0.266,5,0.266,6,0.229,7,0.3,8,0.537,9,0.346,10,0.726,11,1.437,12,1.437,13,0.97,14,0.569,15,0.04,16,0.534,17,0.291,18,0.583,19,0.346,20,0.389,21,0.777,22,0.874,23,0.897,24,0.583,25,0.889,26,0.389,27,0.889,28,0.889,29,0.593,30,1.205,31,0.346,32,0.229,33,1.205,34,0.726,35,0.965,36,1.067,37,0.889,38,1.067,39,0.346,40,0.583,41,0.593,42,0.593,43,0.593,44,0.593,45,0.389,46,1.269,47,0.7,48,0.889,49,0.593,50,0.389,51,0.593,52,0.583,53,0.389,54,1.185,55,0.484,56,0.726,57,0.266,58,0.532,59,0.346,60,0.389,61,0.389,62,0.389,63,0.791,64,0.965,65,0.905,66,0.726,67,0.537,68,0.777,69,0.537,70,1.185,71,0.537,72,0.537,73,1.185,74,0.805,75,1.392,76,0.87,77,0.389,78,0.965,79,0.816,80,0.816,81,0.72,82,1.421,83,1.48,84,0.965,85,0.889,86,0.889,87,0.537,88,0.836,89,1.269,90,0.305,91,0.537,92,0.344,93,0.435,94,0.389,95,0.593,96,0.537,97,0.593,98,0.266,99,0.583,100,0.805,101,0.889,102,0.953,103,0.537,104,0.593,105,0.537,106,0.537,107,0.805,108,1.072,109,0.593,110,0.412,111,0.965,112,0.805,113,0.537,114,0.593,115,0.777,116,0.346,117,0.389,118,0.518,119,0.583,120,0.71,121,0.965,122,0.435,123,0.593,124,0.346,125,0.537,126,0.74,127,0.537,128,0.593,129,0.518,130,0.346,131,0.593,132,0.484,133,1.269,134,0.537,135,0.484,136,0.537,137,0.593,138,0.537,139,0.593,140,0.593,141,0.593,142,0.537,143,0.593,144,0.593,145,0.593,146,0.805,147,0.537,148,0.593,149,0.537,150,0.593,151,0.593,152,0.593,153,0.537,154,0.537,155,0.537,156,0.593,157,0.484,158,0.537,159,0.593,160,0.965,161,1.382,162,1.25,163,0.889,164,0.889,165,0.593,166,0.593,167,0.537,168,0.777,169,0.805,170,0.622,171,0.537,172,0.593,173,0.593,174,0.537,175,0.887,176,0.435,177,0.537,178,0.537,179,0.593,180,0.593,181,0.537,182,0.537,183,0.537,184,0.537,185,0.537,186,1.332,187,0.593,188,1.067,189,0.593,190,1.089,191,0.593,192,0.889,193,1.627,194,0.805,195,0.805,196,0.889,197,0.889,198,0.889,199,0.889,200,0.889,201,0.889,202,0.593,203,0.889,204,0.889,205,0.931,206,0.537,207,0.346,208,0.389,209,0.389,210,0.389,211,0.346,212,0.389,213,0.593,214,0.593,215,0.7,216,0.389,217,0.346,218,0.593,219,0.389,220,0.889,221,1.095,222,0.593,223,0.593,224,0.889,225,0.593,226,0.537,227,0.537,228,0.593,229,0.593,230,0.537,231,0.593,232,0.537,233,0.593,234,0.889,235,0.906,236,0.593,237,0.537,238,0.537,239,0.435,240,0.593,241,0.537,242,0.889,243,0.593,244,0.593,245,0.593,246,0.593,247,0.593,248,0.593,249,0.537,250,0.889,251,1.185,252,1.185,253,1.269,254,0.889,255,0.889,256,1.067,257,0.593,258,1.269,259,1.185,260,0.889,261,0.593,262,0.832,263,0.305,264,1.048,265,0.593,266,0.593,267,0.593,268,0.777,269,0.593,270,1.067,271,0.593,272,0.832,273,0.593,274,0.593,275,0.593,276,0.593,277,0.593,278,0.593,279,0.593,280,0.593,281,1.185,282,0.889,283,0.593,284,1.185,285,0.889,286,0.593,287,0.593,288,0.593,289,0.593,290,0.593,291,0.622,292,0.593,293,1.067,294,1.067,295,1.067,296,0.593,297,1.067,298,1.067,299,0.593,300,1.067,301,0.889,302,0.889,303,0.889,304,0.593,305,0.889,306,0.889,307,0.593,308,0.889,309,0.889,310,0.593,311,0.593,312,0.593,313,1.067,314,0.593,315,0.593,316,0.593,317,0.593,318,0.593,319,0.593,320,0.593,321,0.389,322,0.583,323,0.583,324,0.593,325,0.346,326,0.389,327,1.185,328,0.593,329,0.593,330,1.185,331,1.332,332,0.889,333,0.593,334,0.593,335,0.593,336,0.593,337,1.067,338,0.593,339,0.889,340,0.593,341,0.537,342,0.537,343,0.593,344,0.593,345,0.593,346,0.593,347,0.593,348,0.593,349,0.593,350,0.593,351,0.889,352,0.593,353,0.593,354,0.593,355,0.593,356,0.593,357,0.889,358,0.593,359,0.593,360,0.593,361,0.889,362,0.593,363,0.593,364,0.593,365,0.593,366,0.593,367,0.593,368,1.067,369,0.593,370,0.889,371,0.593,372,0.593,373,0.593,374,0.7,375,0.593,376,0.593,377,0.593,378,0.389,379,0.593,380,0.593,381,0.593,382,0.593,383,0.593,384,0.593,385,0.518,386,0.593,387,0.593,388,0.593,389,0.593,390,0.593,391,0.593,392,0.593,393,0.593,394,0.593,395,0.593,396,0.593,397,0.593,398,0.593,399,0.593,400,0.593,401,0.593,402,0.593,403,0.593,404,0.593,405,0.389,406,0.889,407,0.593,408,0.593,409,0.593,410,0.593,411,0.593,412,1.185,413,1.067,414,0.593,415,0.593,416,0.593,417,0.932,418,0.593,419,0.593,420,0.593,421,0.593,422,0.593,423,0.593,424,0.889,425,0.593,426,0.593,427,0.593,428,0.593,429,0.593,430,0.593,431,0.889,432,1.332,433,0.889,434,0.889,435,0.593,436,0.593,437,0.889,438,0.889,439,0.889,440,0.593,441,1.067,442,0.889,443,0.593,444,1.269,445,1.185,446,1.269,447,1.067,448,1.067,449,0.593,450,1.269,451,0.593,452,0.889,453,0.593,454,0.593,455,0.593,456,0.593,457,0.593,458,0.593,459,0.593,460,1.067,461,0.593,462,0.889,463,0.889,464,0.593,465,0.593,466,0.889,467,0.889,468,0.593,469,0.593,470,0.593,471,0.593,472,0.593,473,0.593,474,0.593,475,0.593,476,0.593,477,0.593,478,0.593,479,0.593,480,0.889,481,0.593,482,0.537,483,0.889,484,0.593,485,0.593,486,0.593,487,0.593,488,0.593,489,0.593,490,0.593,491,0.593,492,0.593,493,0.593,494,0.593,495,0.593,496,0.593,497,0.593,498,0.593,499,0.593,500,0.593,501,0.889,502,0.889,503,0.889,504,0.889,505,0.889,506,0.889,507,0.537,508,0.593,509,0.889,510,0.889,511,0.593,512,0.593,513,0.593,514,1.185,515,0.889,516,0.593,517,0.593,518,0.593,519,0.593,520,0.593,521,0.889,522,0.593,523,0.593,524,0.889,525,0.593,526,0.593,527,0.02,528,0.02]],["title/interfaces/SnapGrid.html",[0,0.083,66,0.69]],["body/interfaces/SnapGrid.html",[0,0.147,1,1.037,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.538,9,0.347,10,0.727,11,1.46,12,1.46,13,0.97,14,0.532,15,0.04,16,0.534,17,0.292,18,0.584,19,0.347,20,0.39,21,0.777,22,0.874,23,0.897,24,0.584,25,0.891,26,0.39,27,0.891,28,0.891,29,0.595,30,1.206,31,0.347,32,0.23,33,1.206,34,0.727,35,0.966,36,1.068,37,0.891,38,1.068,39,0.347,40,0.584,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.27,47,0.7,48,0.891,49,0.595,50,0.39,51,0.595,52,0.584,53,0.39,54,1.186,55,0.485,56,0.727,57,0.267,58,0.532,59,0.347,60,0.39,61,0.39,62,0.39,63,0.791,64,0.966,65,0.906,66,0.872,67,0.538,68,0.778,69,0.538,70,1.186,71,0.538,72,0.538,73,1.186,74,0.806,75,1.392,76,0.872,77,0.39,78,0.806,79,0.799,80,0.799,81,0.708,82,1.333,83,1.422,84,0.966,85,0.891,86,0.891,87,0.538,88,0.836,89,1.27,90,0.306,91,0.538,92,0.344,93,0.436,94,0.39,95,0.595,96,0.538,97,0.595,98,0.267,99,0.584,100,0.806,101,0.891,102,0.953,103,0.538,104,0.595,105,0.538,106,0.538,107,0.806,108,1.073,109,0.595,110,0.413,111,0.966,112,0.806,113,0.538,114,0.595,115,0.778,116,0.347,117,0.39,118,0.519,119,0.584,120,0.71,121,0.966,122,0.436,123,0.595,124,0.347,125,0.538,126,0.74,127,0.538,128,0.595,129,0.519,130,0.347,131,0.595,132,0.485,133,1.27,134,0.538,135,0.485,136,0.538,137,0.595,138,0.538,139,0.595,140,0.595,141,0.595,142,0.538,143,0.595,144,0.595,145,0.595,146,0.806,147,0.538,148,0.595,149,0.538,150,0.595,151,0.595,152,0.595,153,0.538,154,0.538,155,0.538,156,0.595,157,0.485,158,0.538,159,0.595,160,0.966,161,1.383,162,1.251,163,0.891,164,0.891,165,0.595,166,0.595,167,0.538,168,0.777,169,0.806,170,0.622,171,0.538,172,0.595,173,0.595,174,0.538,175,0.887,176,0.436,177,0.538,178,0.538,179,0.595,180,0.595,181,0.538,182,0.538,183,0.538,184,0.538,185,0.538,186,1.333,187,0.595,188,1.068,189,0.595,190,1.089,191,0.595,192,0.891,193,1.628,194,0.806,195,0.806,196,0.891,197,0.891,198,0.891,199,0.891,200,0.891,201,0.891,202,0.595,203,0.891,204,0.891,205,0.931,206,0.538,207,0.347,208,0.39,209,0.39,210,0.39,211,0.347,212,0.39,213,0.595,214,0.595,215,0.7,216,0.39,217,0.74,218,0.595,219,0.39,220,0.891,221,1.096,222,0.595,223,0.595,224,0.891,225,0.595,226,0.538,227,0.538,228,0.595,229,0.595,230,0.538,231,0.595,232,0.538,233,0.595,234,0.891,235,0.907,236,0.595,237,0.538,238,0.538,239,0.436,240,0.595,241,0.538,242,0.891,243,0.595,244,0.595,245,0.595,246,0.595,247,0.595,248,0.595,249,0.538,250,0.891,251,1.186,252,1.186,253,1.27,254,0.891,255,0.891,256,1.068,257,0.595,258,1.27,259,1.186,260,0.891,261,0.595,262,0.833,263,0.306,264,1.048,265,0.595,266,0.595,267,0.595,268,0.778,269,0.595,270,1.068,271,0.595,272,0.833,273,0.595,274,0.595,275,0.595,276,0.595,277,0.595,278,0.595,279,0.595,280,0.595,281,1.186,282,0.891,283,0.595,284,1.186,285,0.891,286,0.595,287,0.595,288,0.595,289,0.595,290,0.595,291,0.622,292,0.595,293,1.068,294,1.068,295,1.068,296,0.595,297,1.068,298,1.068,299,0.595,300,1.068,301,0.891,302,0.891,303,0.891,304,0.595,305,0.891,306,0.891,307,0.595,308,0.891,309,0.891,310,0.595,311,0.595,312,0.595,313,1.068,314,0.595,315,0.595,316,0.595,317,0.595,318,0.595,319,0.595,320,0.595,321,0.39,322,0.584,323,0.584,324,0.595,325,0.347,326,0.39,327,1.186,328,0.595,329,0.595,330,1.186,331,1.333,332,0.891,333,0.595,334,0.595,335,0.595,336,0.595,337,1.068,338,0.595,339,0.891,340,0.595,341,0.538,342,0.538,343,0.595,344,0.595,345,0.595,346,0.595,347,0.595,348,0.595,349,0.595,350,0.595,351,0.891,352,0.595,353,0.595,354,0.595,355,0.595,356,0.595,357,0.891,358,0.595,359,0.595,360,0.595,361,0.891,362,0.595,363,0.595,364,0.595,365,0.595,366,0.595,367,0.595,368,1.068,369,0.595,370,0.891,371,0.595,372,0.595,373,0.595,374,0.7,375,0.595,376,0.595,377,0.595,378,0.39,379,0.595,380,0.595,381,0.595,382,0.595,383,0.595,384,0.595,385,0.519,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.595,402,0.595,403,0.595,404,0.595,405,0.39,406,0.891,407,0.595,408,0.595,409,0.595,410,0.595,411,0.595,412,1.186,413,1.068,414,0.595,415,0.595,416,0.595,417,0.932,418,0.595,419,0.595,420,0.595,421,0.595,422,0.595,423,0.595,424,0.891,425,0.595,426,0.595,427,0.595,428,0.595,429,0.595,430,0.595,431,0.891,432,1.333,433,0.891,434,0.891,435,0.595,436,0.595,437,0.891,438,0.891,439,0.891,440,0.595,441,1.068,442,0.891,443,0.595,444,1.27,445,1.186,446,1.27,447,1.068,448,1.068,449,0.595,450,1.27,451,0.595,452,0.891,453,0.595,454,0.595,455,0.595,456,0.595,457,0.595,458,0.595,459,0.595,460,1.068,461,0.595,462,0.891,463,0.891,464,0.595,465,0.595,466,0.891,467,0.891,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.595,477,0.595,478,0.595,479,0.595,480,0.891,481,0.595,482,0.538,483,0.891,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.595,498,0.595,499,0.595,500,0.595,501,0.891,502,0.891,503,0.891,504,0.891,505,0.891,506,0.891,507,0.538,508,0.595,509,0.891,510,0.891,511,0.595,512,0.595,513,0.595,514,1.186,515,0.891,516,0.595,517,0.595,518,0.595,519,0.595,520,0.595,521,0.891,522,0.595,523,0.595,524,0.891,525,0.595,526,0.595,527,0.02,528,0.02]],["title/interfaces/TimeLongPress.html",[0,0.083,84,0.765]],["body/interfaces/TimeLongPress.html",[0,0.147,1,1.037,2,0.39,3,0.306,4,0.267,5,0.267,6,0.23,7,0.3,8,0.539,9,0.347,10,0.728,11,1.438,12,1.438,13,0.97,14,0.532,15,0.04,16,0.535,17,0.292,18,0.585,19,0.347,20,0.39,21,0.777,22,0.875,23,0.897,24,0.585,25,0.892,26,0.39,27,0.892,28,0.892,29,0.595,30,1.207,31,0.347,32,0.23,33,1.207,34,0.728,35,0.967,36,1.069,37,0.892,38,1.069,39,0.347,40,0.585,41,0.595,42,0.595,43,0.595,44,0.595,45,0.39,46,1.271,47,0.701,48,0.892,49,0.595,50,0.39,51,0.595,52,0.585,53,0.39,54,1.187,55,0.486,56,0.728,57,0.267,58,0.532,59,0.347,60,0.39,61,0.39,62,0.39,63,0.791,64,0.967,65,0.906,66,0.728,67,0.539,68,0.778,69,0.539,70,1.187,71,0.539,72,0.539,73,1.187,74,0.807,75,1.393,76,0.872,77,0.39,78,0.807,79,0.799,80,0.799,81,0.708,82,1.334,83,1.422,84,1.074,85,1.271,86,1.271,87,0.539,88,0.836,89,1.271,90,0.306,91,0.539,92,0.345,93,0.437,94,0.39,95,0.595,96,0.539,97,0.595,98,0.267,99,0.585,100,0.807,101,0.892,102,0.954,103,0.539,104,0.595,105,0.539,106,0.539,107,0.807,108,1.074,109,0.595,110,0.413,111,0.967,112,0.807,113,0.539,114,0.595,115,0.778,116,0.347,117,0.39,118,0.52,119,0.585,120,0.711,121,0.967,122,0.437,123,0.595,124,0.347,125,0.539,126,0.741,127,0.539,128,0.595,129,0.52,130,0.347,131,0.595,132,0.486,133,1.271,134,0.539,135,0.486,136,0.539,137,0.595,138,0.539,139,0.595,140,0.595,141,0.595,142,0.539,143,0.595,144,0.595,145,0.595,146,0.807,147,0.539,148,0.595,149,0.539,150,0.595,151,0.595,152,0.595,153,0.539,154,0.539,155,0.539,156,0.595,157,0.486,158,0.539,159,0.595,160,0.967,161,1.383,162,1.251,163,0.892,164,0.892,165,0.595,166,0.595,167,0.539,168,0.777,169,0.807,170,0.623,171,0.539,172,0.595,173,0.595,174,0.539,175,0.888,176,0.437,177,0.539,178,0.539,179,0.595,180,0.595,181,0.539,182,0.539,183,0.539,184,0.539,185,0.539,186,1.334,187,0.595,188,1.069,189,0.595,190,1.089,191,0.595,192,0.892,193,1.628,194,0.807,195,0.807,196,0.892,197,0.892,198,0.892,199,0.892,200,0.892,201,0.892,202,0.595,203,0.892,204,0.892,205,0.932,206,0.539,207,0.347,208,0.39,209,0.39,210,0.39,211,0.347,212,0.39,213,0.595,214,0.595,215,0.701,216,0.39,217,0.347,218,0.595,219,0.39,220,0.892,221,1.096,222,0.595,223,0.595,224,0.892,225,0.595,226,0.539,227,0.539,228,0.595,229,0.595,230,0.539,231,0.595,232,0.539,233,0.595,234,0.892,235,0.907,236,0.595,237,0.539,238,0.539,239,0.437,240,0.595,241,0.539,242,0.892,243,0.595,244,0.595,245,0.595,246,0.595,247,0.595,248,0.595,249,0.539,250,0.892,251,1.187,252,1.187,253,1.271,254,0.892,255,0.892,256,1.069,257,0.595,258,1.271,259,1.187,260,0.892,261,0.595,262,0.833,263,0.306,264,1.048,265,0.595,266,0.595,267,0.595,268,0.778,269,0.595,270,1.069,271,0.595,272,0.833,273,0.595,274,0.595,275,0.595,276,0.595,277,0.595,278,0.595,279,0.595,280,0.595,281,1.187,282,0.892,283,0.595,284,1.187,285,0.892,286,0.595,287,0.595,288,0.595,289,0.595,290,0.595,291,0.623,292,0.595,293,1.069,294,1.069,295,1.069,296,0.595,297,1.069,298,1.069,299,0.595,300,1.069,301,0.892,302,0.892,303,0.892,304,0.595,305,0.892,306,0.892,307,0.595,308,0.892,309,0.892,310,0.595,311,0.595,312,0.595,313,1.069,314,0.595,315,0.595,316,0.595,317,0.595,318,0.595,319,0.595,320,0.595,321,0.39,322,0.585,323,0.585,324,0.595,325,0.347,326,0.39,327,1.187,328,0.595,329,0.595,330,1.187,331,1.334,332,0.892,333,0.595,334,0.595,335,0.595,336,0.595,337,1.069,338,0.595,339,0.892,340,0.595,341,0.539,342,0.539,343,0.595,344,0.595,345,0.595,346,0.595,347,0.595,348,0.595,349,0.595,350,0.595,351,0.892,352,0.595,353,0.595,354,0.595,355,0.595,356,0.595,357,0.892,358,0.595,359,0.595,360,0.595,361,0.892,362,0.595,363,0.595,364,0.595,365,0.595,366,0.595,367,0.595,368,1.069,369,0.595,370,0.892,371,0.595,372,0.595,373,0.595,374,0.701,375,0.595,376,0.595,377,0.595,378,0.39,379,0.595,380,0.595,381,0.595,382,0.595,383,0.595,384,0.595,385,0.52,386,0.595,387,0.595,388,0.595,389,0.595,390,0.595,391,0.595,392,0.595,393,0.595,394,0.595,395,0.595,396,0.595,397,0.595,398,0.595,399,0.595,400,0.595,401,0.595,402,0.595,403,0.595,404,0.595,405,0.39,406,0.892,407,0.595,408,0.595,409,0.595,410,0.595,411,0.595,412,1.187,413,1.069,414,0.595,415,0.595,416,0.595,417,0.933,418,0.595,419,0.595,420,0.595,421,0.595,422,0.595,423,0.595,424,0.892,425,0.595,426,0.595,427,0.595,428,0.595,429,0.595,430,0.595,431,0.892,432,1.334,433,0.892,434,0.892,435,0.595,436,0.595,437,0.892,438,0.892,439,0.892,440,0.595,441,1.069,442,0.892,443,0.595,444,1.271,445,1.187,446,1.271,447,1.069,448,1.069,449,0.595,450,1.271,451,0.595,452,0.892,453,0.595,454,0.595,455,0.595,456,0.595,457,0.595,458,0.595,459,0.595,460,1.069,461,0.595,462,0.892,463,0.892,464,0.595,465,0.595,466,0.892,467,0.892,468,0.595,469,0.595,470,0.595,471,0.595,472,0.595,473,0.595,474,0.595,475,0.595,476,0.595,477,0.595,478,0.595,479,0.595,480,0.892,481,0.595,482,0.539,483,0.892,484,0.595,485,0.595,486,0.595,487,0.595,488,0.595,489,0.595,490,0.595,491,0.595,492,0.595,493,0.595,494,0.595,495,0.595,496,0.595,497,0.595,498,0.595,499,0.595,500,0.595,501,0.892,502,0.892,503,0.892,504,0.892,505,0.892,506,0.892,507,0.539,508,0.595,509,0.892,510,0.892,511,0.595,512,0.595,513,0.595,514,1.187,515,0.892,516,0.595,517,0.595,518,0.595,519,0.595,520,0.595,521,0.892,522,0.595,523,0.595,524,0.892,525,0.595,526,0.595,527,0.02,528,0.02]],["title/interfaces/ValidateDragParams.html",[0,0.083,74,0.765]],["body/interfaces/ValidateDragParams.html",[0,0.147,1,1.089,2,0.391,3,0.306,4,0.267,5,0.267,6,0.23,7,0.301,8,0.539,9,0.347,10,0.728,11,1.438,12,1.438,13,0.961,14,0.57,15,0.04,16,0.535,17,0.292,18,0.585,19,0.347,20,0.391,21,0.778,22,0.875,23,0.898,24,0.585,25,0.892,26,0.391,27,0.892,28,0.892,29,0.596,30,1.207,31,0.347,32,0.23,33,1.207,34,0.728,35,0.967,36,1.069,37,0.892,38,1.069,39,0.347,40,0.585,41,0.596,42,0.596,43,0.596,44,0.596,45,0.391,46,1.272,47,0.701,48,0.892,49,0.596,50,0.391,51,0.596,52,0.585,53,0.391,54,1.187,55,0.486,56,0.728,57,0.267,58,0.533,59,0.347,60,0.391,61,0.391,62,0.391,63,0.791,64,0.967,65,0.906,66,0.728,67,0.539,68,0.834,69,0.539,70,1.187,71,0.539,72,0.539,73,1.187,74,0.967,75,1.428,76,0.873,77,0.391,78,0.807,79,0.799,80,0.799,81,0.708,82,1.335,83,1.423,84,0.967,85,0.892,86,0.892,87,0.539,88,0.837,89,1.272,90,0.306,91,0.539,92,0.345,93,0.437,94,0.391,95,0.596,96,0.539,97,0.596,98,0.267,99,0.585,100,0.807,101,0.892,102,0.954,103,0.539,104,0.596,105,0.539,106,0.539,107,0.807,108,1.074,109,0.596,110,0.413,111,0.967,112,0.807,113,0.539,114,0.596,115,0.779,116,0.347,117,0.391,118,0.52,119,0.585,120,0.711,121,0.967,122,0.437,123,0.596,124,0.347,125,0.539,126,0.741,127,0.539,128,0.596,129,0.52,130,0.347,131,0.596,132,0.486,133,1.272,134,0.539,135,0.486,136,0.539,137,0.596,138,0.539,139,0.596,140,0.596,141,0.596,142,0.539,143,0.596,144,0.596,145,0.596,146,0.807,147,0.539,148,0.596,149,0.539,150,0.596,151,0.596,152,0.596,153,0.539,154,0.539,155,0.539,156,0.596,157,0.486,158,0.539,159,0.596,160,0.967,161,1.384,162,1.251,163,0.892,164,0.892,165,0.596,166,0.596,167,0.539,168,0.778,169,0.807,170,0.623,171,0.539,172,0.596,173,0.596,174,0.539,175,0.888,176,0.437,177,0.539,178,0.539,179,0.596,180,0.596,181,0.539,182,0.539,183,0.539,184,0.539,185,0.539,186,1.335,187,0.596,188,1.069,189,0.596,190,1.089,191,0.596,192,0.892,193,1.628,194,0.807,195,0.807,196,0.892,197,0.892,198,0.892,199,0.892,200,0.892,201,0.892,202,0.596,203,0.892,204,0.892,205,0.932,206,0.539,207,0.347,208,0.391,209,0.391,210,0.391,211,0.347,212,0.391,213,0.596,214,0.596,215,0.701,216,0.391,217,0.347,218,0.596,219,0.391,220,0.892,221,1.096,222,0.596,223,0.596,224,0.892,225,0.596,226,0.539,227,0.539,228,0.596,229,0.596,230,0.539,231,0.596,232,0.539,233,0.596,234,0.892,235,0.907,236,0.596,237,0.539,238,0.539,239,0.437,240,0.596,241,0.539,242,0.892,243,0.596,244,0.596,245,0.596,246,0.596,247,0.596,248,0.596,249,0.539,250,0.892,251,1.187,252,1.187,253,1.272,254,0.892,255,0.892,256,1.069,257,0.596,258,1.272,259,1.187,260,0.892,261,0.596,262,0.834,263,0.306,264,1.048,265,0.596,266,0.596,267,0.596,268,0.779,269,0.596,270,1.069,271,0.596,272,0.834,273,0.596,274,0.596,275,0.596,276,0.596,277,0.596,278,0.596,279,0.596,280,0.596,281,1.187,282,0.892,283,0.596,284,1.187,285,0.892,286,0.596,287,0.596,288,0.596,289,0.596,290,0.596,291,0.623,292,0.596,293,1.069,294,1.069,295,1.069,296,0.596,297,1.069,298,1.069,299,0.596,300,1.069,301,0.892,302,0.892,303,0.892,304,0.596,305,0.892,306,0.892,307,0.596,308,0.892,309,0.892,310,0.596,311,0.596,312,0.596,313,1.069,314,0.596,315,0.596,316,0.596,317,0.596,318,0.596,319,0.596,320,0.596,321,0.391,322,0.585,323,0.585,324,0.596,325,0.347,326,0.391,327,1.187,328,0.596,329,0.596,330,1.187,331,1.335,332,0.892,333,0.596,334,0.596,335,0.596,336,0.596,337,1.069,338,0.596,339,0.892,340,0.596,341,0.539,342,0.539,343,0.596,344,0.596,345,0.596,346,0.596,347,0.596,348,0.596,349,0.596,350,0.596,351,0.892,352,0.596,353,0.596,354,0.596,355,0.596,356,0.596,357,0.892,358,0.596,359,0.596,360,0.596,361,0.892,362,0.596,363,0.596,364,0.596,365,0.596,366,0.596,367,0.596,368,1.069,369,0.596,370,0.892,371,0.596,372,0.596,373,0.596,374,0.701,375,0.596,376,0.596,377,0.596,378,0.391,379,0.596,380,0.596,381,0.596,382,0.596,383,0.596,384,0.596,385,0.52,386,0.596,387,0.596,388,0.596,389,0.596,390,0.596,391,0.596,392,0.596,393,0.596,394,0.596,395,0.596,396,0.596,397,0.596,398,0.596,399,0.596,400,0.596,401,0.596,402,0.596,403,0.596,404,0.596,405,0.391,406,0.892,407,0.596,408,0.596,409,0.596,410,0.596,411,0.596,412,1.187,413,1.069,414,0.596,415,0.596,416,0.596,417,0.933,418,0.596,419,0.596,420,0.596,421,0.596,422,0.596,423,0.596,424,0.892,425,0.596,426,0.596,427,0.596,428,0.596,429,0.596,430,0.596,431,0.892,432,1.335,433,0.892,434,0.892,435,0.596,436,0.596,437,0.892,438,0.892,439,0.892,440,0.596,441,1.069,442,0.892,443,0.596,444,1.272,445,1.187,446,1.272,447,1.069,448,1.069,449,0.596,450,1.272,451,0.596,452,0.892,453,0.596,454,0.596,455,0.596,456,0.596,457,0.596,458,0.596,459,0.596,460,1.069,461,0.596,462,0.892,463,0.892,464,0.596,465,0.596,466,0.892,467,0.892,468,0.596,469,0.596,470,0.596,471,0.596,472,0.596,473,0.596,474,0.596,475,0.596,476,0.596,477,0.596,478,0.596,479,0.596,480,0.892,481,0.596,482,0.539,483,0.892,484,0.596,485,0.596,486,0.596,487,0.596,488,0.596,489,0.596,490,0.596,491,0.596,492,0.596,493,0.596,494,0.596,495,0.596,496,0.596,497,0.596,498,0.596,499,0.596,500,0.596,501,0.892,502,0.892,503,0.892,504,0.892,505,0.892,506,0.892,507,0.539,508,0.596,509,0.892,510,0.892,511,0.596,512,0.596,513,0.596,514,1.187,515,0.892,516,0.596,517,0.596,518,0.596,519,0.596,520,0.596,521,0.892,522,0.596,523,0.596,524,0.892,525,0.596,526,0.596,527,0.02,528,0.02,622,2.673]],["title/interfaces/ValidateDropParams.html",[0,0.083,554,1.708]],["body/interfaces/ValidateDropParams.html",[0,0.125,2,0.654,3,0.513,4,0.448,5,0.448,6,0.386,7,0.351,13,0.866,14,0.448,15,0.039,16,0.607,17,0.418,18,0.838,19,0.582,20,0.654,21,0.915,22,1.007,23,0.866,24,0.838,26,0.654,31,0.582,32,0.386,39,0.744,40,0.838,45,0.838,47,0.654,50,0.654,52,0.838,53,0.654,57,0.448,58,0.573,59,0.582,60,0.654,61,0.654,62,0.654,63,0.763,65,0.866,68,0.924,77,0.654,79,0.846,80,0.839,81,0.448,88,0.864,90,0.513,92,0.386,94,0.654,98,0.666,99,0.974,102,0.974,110,0.386,115,0.838,116,0.582,117,0.654,118,0.582,119,0.654,120,0.656,124,0.744,126,0.744,129,0.582,130,0.582,168,0.866,170,0.744,175,0.866,190,1.007,205,0.866,207,0.582,208,0.654,209,0.654,210,0.654,211,0.582,212,0.654,215,0.654,216,0.654,217,0.582,219,0.654,221,1.03,235,0.838,262,0.654,263,0.513,264,0.924,268,0.654,272,0.974,291,0.895,321,0.838,322,1.007,323,0.838,325,0.744,326,0.654,374,0.838,378,0.924,385,0.744,405,0.654,417,0.654,527,0.029,528,0.029,535,1.63,540,2.578,541,1.807,542,2.843,543,2.896,544,2.262,545,1.807,546,2.843,547,3.098,548,2.262,549,2.262,550,2.262,551,2.896,552,3.194,553,2.262,554,2.843,555,2.551,556,2.014,557,2.578,558,2.014,559,2.262,560,2.578,561,2.262,562,2.896,563,2.262,564,2.262,565,2.262,566,2.262,567,2.262,568,2.262,569,2.014,570,2.262,571,1.63,572,2.262,573,2.014,574,2.262,575,2.896,576,2.262,577,2.262,578,2.896,579,2.262,580,2.896,581,3.194,582,2.896,583,2.262,584,2.262,585,2.896,586,3.194,587,2.262,588,3.194,589,3.194,590,2.896,591,3.194,592,2.262,593,3.367,594,2.262,595,2.014,596,2.262,597,2.014,598,2.262,599,2.262,600,2.262,601,3.194,602,3.194,603,2.262,604,2.262,605,2.262,606,2.262,607,2.262,608,2.262,609,2.262,610,2.262,611,2.262,612,2.262,613,2.262,614,2.014,615,2.262,616,2.262,617,2.262]],["title/changelog.html",[176,0.521,239,0.521,663,2.13]],["body/changelog.html",[1,0.558,2,0.448,5,0.307,7,0.368,9,0.575,11,0.618,12,0.618,14,0.307,15,0.033,16,0.381,17,0.459,21,0.739,23,0.739,30,0.618,34,0.558,39,0.739,55,0.805,56,0.805,58,0.664,66,1.035,75,0.618,76,1.035,79,0.351,80,0.351,81,0.648,88,0.864,91,0.893,92,0.448,98,0.52,100,0.618,103,0.893,106,0.893,107,0.618,108,1.402,110,0.635,111,1.501,112,0.618,113,1.048,116,0.954,118,0.739,120,0.812,121,1.307,122,1.176,124,0.575,125,0.893,127,1.147,129,0.817,130,0.675,132,1.035,134,0.618,135,0.558,138,0.618,142,0.618,146,1.048,147,1.048,149,0.618,153,0.893,154,0.618,155,0.618,157,1.035,158,0.893,160,0.618,162,0.618,167,1.147,168,0.575,170,0.675,171,1.048,174,0.618,175,0.575,177,1.307,178,0.618,182,0.893,183,1.048,184,0.618,185,1.048,194,0.618,195,0.618,205,0.398,206,0.618,211,0.398,226,0.618,230,1.429,232,0.618,237,1.147,238,1.147,241,0.893,249,0.618,263,0.595,291,0.398,341,0.893,342,0.618,482,0.893,507,0.618,527,0.022,528,0.022,529,2.544,530,2.875,545,1.238,555,1.238,556,1.991,557,1.991,558,1.379,569,2.714,571,2.717,573,1.379,595,1.379,597,1.379,614,1.379,620,2.544,621,1.762,645,2.544,647,2.986,648,3.725,649,3.468,652,2.544,663,2.047,664,2.48,665,5.735,666,2.48,667,2.48,668,2.48,669,2.956,670,2.48,671,2.48,672,2.047,673,2.48,674,5.086,675,4.203,676,5.683,677,5.469,678,5.735,679,5.469,680,3.886,681,5.984,682,2.48,683,2.48,684,2.48,685,4.602,686,5.469,687,2.48,688,2.48,689,4.602,690,5.94,691,5.243,692,3.581,693,2.48,694,2.48,695,3.581,696,3.469,697,2.48,698,2.48,699,5.735,700,4.881,701,3.886,702,4.771,703,2.48,704,2.48,705,2.48,706,2.48,707,3.581,708,2.047,709,2.48,710,2.48,711,2.48,712,2.48,713,2.48,714,2.48,715,4.203,716,3.581,717,4.602,718,4.602,719,2.48,720,2.48,721,2.48,722,3.581,723,4.602,724,4.203,725,4.881,726,2.48,727,3.469,728,2.48,729,3.581,730,3.581,731,2.48,732,5.78,733,5.623,734,2.48,735,2.48,736,3.799,737,2.48,738,2.48,739,2.48,740,2.48,741,5.914,742,3.581,743,2.48,744,2.48,745,2.48,746,4.203,747,6.173,748,6.173,749,2.48,750,4.203,751,2.48,752,2.48,753,2.48,754,2.48,755,2.48,756,2.047,757,2.48,758,2.48,759,5.469,760,2.48,761,2.956,762,2.48,763,2.48,764,2.48,765,2.48,766,4.203,767,2.48,768,2.48,769,5.086,770,2.48,771,4.602,772,2.48,773,2.48,774,2.48,775,4.881,776,4.203,777,2.48,778,2.48,779,2.48,780,2.48,781,2.047,782,5.086,783,2.48,784,2.48,785,4.203,786,2.48,787,2.48,788,3.581,789,2.48,790,2.48,791,2.047,792,2.48,793,2.48,794,2.48,795,2.48,796,2.48,797,2.48,798,5.086,799,3.581,800,3.469,801,2.48,802,2.48,803,2.48,804,2.48,805,2.047,806,3.581,807,2.48,808,2.48,809,2.48,810,2.48,811,3.581,812,2.48,813,3.581,814,2.48,815,2.48,816,2.48,817,2.48,818,5.368,819,4.602,820,2.48,821,2.48,822,2.48,823,2.48,824,5.623,825,2.48,826,3.581,827,4.203,828,2.48,829,2.48,830,2.48,831,2.48,832,2.48,833,4.602,834,4.203,835,3.581,836,2.48,837,6.021,838,2.48,839,2.48,840,3.581,841,3.799,842,4.602,843,2.48,844,2.48,845,3.581,846,2.48,847,2.48,848,2.48,849,2.48,850,2.48,851,2.48,852,4.602,853,4.602,854,2.48,855,3.581,856,2.48,857,2.48,858,2.48,859,2.48,860,2.48,861,2.48,862,2.48,863,3.581,864,2.48,865,2.48,866,2.48,867,2.48,868,2.48,869,4.029,870,2.48,871,2.48,872,2.48,873,2.047,874,2.48,875,2.48,876,2.48,877,2.48,878,2.48,879,2.48,880,3.581,881,3.581,882,2.047,883,2.48,884,2.48,885,2.48,886,2.48,887,2.48,888,2.48,889,2.48,890,2.48,891,2.48,892,2.48,893,3.581,894,2.48,895,4.602,896,1.762,897,2.047,898,2.48,899,2.48,900,2.48,901,2.48,902,4.203,903,2.48,904,2.48,905,2.48,906,2.48,907,3.581,908,2.48,909,2.48,910,3.581,911,3.581,912,3.581,913,3.581,914,2.48,915,2.48,916,3.581,917,2.48,918,2.48,919,2.48,920,4.881,921,2.48,922,2.48,923,2.48,924,2.48,925,2.48,926,3.581,927,2.48,928,2.48,929,2.48,930,2.48,931,2.48,932,2.48,933,2.48,934,2.48,935,5.243,936,2.48,937,2.48,938,2.48,939,2.48,940,3.581,941,2.48,942,3.581,943,2.48,944,2.48,945,2.047,946,2.48,947,2.48,948,3.581,949,4.602,950,2.48,951,4.203,952,4.203,953,2.48,954,3.581,955,3.469,956,2.48,957,2.48,958,2.48,959,2.48,960,2.48,961,2.48,962,2.48,963,2.48,964,2.48,965,2.48,966,2.48,967,2.48,968,2.48,969,2.48,970,2.48,971,2.48,972,3.581,973,2.48,974,2.48,975,2.48,976,2.48,977,3.581,978,3.581,979,2.48,980,2.48,981,2.48,982,2.48,983,2.48,984,2.48,985,2.48,986,2.48,987,2.48,988,2.48,989,2.48,990,5.623,991,3.581,992,2.48,993,4.602,994,2.48,995,2.48,996,3.581,997,2.48,998,2.48,999,2.48,1000,2.48,1001,2.48,1002,2.48,1003,2.48,1004,2.48,1005,2.48,1006,2.48,1007,2.48,1008,2.48,1009,3.581,1010,2.48,1011,2.48,1012,2.48,1013,2.48,1014,2.48,1015,2.48,1016,2.48,1017,2.48,1018,2.48,1019,2.48,1020,2.48,1021,2.48,1022,2.48,1023,2.48,1024,2.48,1025,2.48,1026,3.581,1027,4.203,1028,2.48,1029,2.48,1030,2.48,1031,2.48,1032,3.581,1033,3.581,1034,2.48,1035,2.48,1036,3.581,1037,3.581,1038,3.581,1039,2.48,1040,2.48,1041,1.549,1042,2.047,1043,2.48,1044,2.48,1045,2.48,1046,2.48,1047,2.48,1048,2.047,1049,2.48,1050,2.48,1051,2.48,1052,2.48,1053,2.48,1054,2.48,1055,2.48,1056,5.553,1057,3.581,1058,2.48,1059,2.48,1060,4.203,1061,2.48,1062,2.48,1063,2.48,1064,2.48,1065,2.48,1066,2.48,1067,2.48,1068,2.48,1069,2.48,1070,2.48,1071,2.48,1072,2.48,1073,2.48,1074,2.48,1075,2.48,1076,3.581,1077,2.48,1078,2.48,1079,2.48,1080,2.48,1081,2.48,1082,2.48,1083,2.48,1084,2.48,1085,2.48,1086,2.48,1087,2.48,1088,2.48,1089,2.48,1090,2.48,1091,2.48,1092,2.48,1093,2.48,1094,2.48,1095,2.48,1096,2.48,1097,2.48,1098,2.48,1099,2.48,1100,2.48,1101,2.48,1102,2.48,1103,2.48,1104,2.48,1105,2.48,1106,2.48,1107,2.48,1108,2.48,1109,2.48,1110,2.047,1111,2.48,1112,2.48,1113,2.48,1114,2.48,1115,2.48,1116,2.48,1117,2.48,1118,2.48,1119,2.48,1120,2.48,1121,2.047,1122,2.48,1123,2.48,1124,2.047,1125,2.48,1126,2.48]],["title/dependencies.html",[680,1.834,1041,2.301]],["body/dependencies.html",[15,0.037,32,0.521,55,1.099,56,1.099,527,0.034,528,0.034,841,4.034,1041,3.471,1127,4.888,1128,4.888,1129,4.888,1130,4.888]],["title/miscellaneous/functions.html",[1131,1.612,1132,3.041]],["body/miscellaneous/functions.html",[6,0.515,7,0.289,9,0.776,13,0.955,14,0.598,15,0.037,65,0.776,79,0.684,80,0.782,217,0.776,325,0.887,527,0.034,528,0.034,541,2.412,546,3.071,547,3.071,1131,3.019,1132,3.99,1133,3.99,1134,4.834,1135,4.834,1136,4.834,1137,4.834]],["title/index.html",[9,0.414,176,0.521,239,0.521]],["body/index.html",[4,0.643,7,0.352,15,0.038,16,0.554,32,0.465,34,0.982,81,0.54,88,0.618,90,0.618,92,0.465,93,1.051,96,1.088,98,0.745,105,1.088,110,0.642,120,0.618,122,0.882,126,0.701,135,0.982,136,1.088,157,1.17,169,1.088,181,1.088,527,0.032,528,0.032,534,3.604,535,2.342,537,3.604,560,2.428,571,2.686,645,3.697,647,3.102,648,3.102,649,3.102,651,4.589,652,3.102,701,3.697,702,3.604,727,4.295,736,3.604,756,3.604,761,3.604,791,3.604,800,4.295,805,4.295,873,4.295,882,3.604,896,3.102,897,3.604,945,3.604,955,3.604,1041,2.727,1042,3.604,1048,4.751,1110,4.295,1138,4.295,1139,5.559,1140,5.203,1141,4.366,1142,5.203,1143,4.589,1144,5.756,1145,2.727,1146,4.366,1147,5.967,1148,4.366,1149,4.366,1150,5.203,1151,5.559,1152,5.203,1153,4.366,1154,4.366,1155,4.366,1156,4.366,1157,4.366,1158,4.366,1159,4.366,1160,4.366,1161,4.366,1162,4.366,1163,4.366,1164,4.366,1165,4.366,1166,4.366,1167,4.366,1168,4.366,1169,4.366,1170,4.366,1171,4.366,1172,4.366,1173,4.366,1174,4.366,1175,4.366,1176,4.366,1177,4.366,1178,5.967,1179,4.366,1180,4.366,1181,4.366,1182,4.366,1183,4.366,1184,4.366,1185,4.366,1186,5.559,1187,4.366,1188,4.366,1189,4.366,1190,4.366,1191,4.366,1192,4.366,1193,3.102]],["title/license.html",[176,0.521,239,0.521,1145,1.612]],["body/license.html",[15,0.033,33,1.153,35,1.153,81,0.572,122,1.088,527,0.033,528,0.033,708,3.82,781,3.82,869,3.82,896,3.288,1143,3.82,1145,2.89,1193,3.826,1194,5.695,1195,4.627,1196,3.82,1197,3.82,1198,5.385,1199,4.627,1200,4.627,1201,4.627,1202,4.627,1203,4.627,1204,4.627,1205,5.385,1206,6.17,1207,4.627,1208,4.627,1209,4.627,1210,5.695,1211,4.627,1212,5.385,1213,4.627,1214,4.627,1215,4.627,1216,4.627,1217,4.627,1218,4.627,1219,4.627,1220,5.385,1221,4.627,1222,4.627,1223,4.627,1224,4.627,1225,4.627,1226,5.385,1227,5.385,1228,4.627,1229,4.627,1230,4.627,1231,4.627,1232,4.627,1233,4.627,1234,4.627,1235,4.627,1236,4.627,1237,4.627,1238,4.627,1239,4.627,1240,4.627,1241,4.627,1242,4.627,1243,4.627,1244,4.627,1245,4.627,1246,4.627,1247,4.627,1248,4.627,1249,4.627,1250,4.627,1251,4.627,1252,4.627,1253,4.627,1254,4.627,1255,4.627,1256,4.627]],["title/modules.html",[531,2.955]],["body/modules.html",[15,0.034,527,0.034,528,0.034,530,3.074,531,3.497,1257,4.922]],["title/overview.html",[1258,3.433]],["body/overview.html",[2,0.887,15,0.034,527,0.034,528,0.034,529,3.487,618,3.066,696,4.051,1121,4.051,1124,4.051,1258,4.051]],["title/properties.html",[10,0.828,680,1.834]],["body/properties.html",[7,0.355,10,1.079,15,0.038,98,0.68,110,0.586,227,1.371,527,0.034,528,0.034,571,2.475,643,3.96,669,3.96,672,3.96,701,3.409,1138,3.96,1145,2.997,1193,3.409,1196,3.96,1197,3.96,1259,4.798,1260,4.798,1261,4.798,1262,4.798,1263,4.798,1264,4.798,1265,4.798,1266,4.798,1267,4.798,1268,4.798]],["title/miscellaneous/typealiases.html",[1131,1.612,1269,3.685]],["body/miscellaneous/typealiases.html",[6,0.591,7,0.332,8,1.214,9,0.782,14,0.602,15,0.034,76,1.247,527,0.034,528,0.034,541,2.43,545,2.767,555,2.767,1131,3.042,1133,4.021,1270,4.871,1271,4.871]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["0.1.0",{"_index":1106,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":1104,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":1081,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":1075,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":1073,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":1069,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":1067,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":1064,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":1059,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":1055,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":1052,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":1044,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":1040,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":1035,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":1031,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":1058,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["0a30e09",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["0e8e0a8",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["0px",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["1",{"_index":1121,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":1024,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":1020,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":1018,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":1016,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":1014,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["111",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["113",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":1015,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":696,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["15",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["1661d72",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":1126,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":1043,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1118,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":989,"title":{},"body":{"changelog.html":{}}}],["2.4.1",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["20.0",{"_index":1138,"title":{},"body":{"index.html":{},"properties.html":{}}}],["20.0.0",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["2016",{"_index":1056,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":990,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":869,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["2025",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":1086,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":943,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":1025,"title":{},"body":{"changelog.html":{}}}],["24.5.0",{"_index":1177,"title":{},"body":{"index.html":{}}}],["25",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":1066,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":1107,"title":{},"body":{"changelog.html":{}}}],["2766f33",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["2aff5f0",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["2c37cc9",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1124,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["3.0.0",{"_index":986,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":980,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["300",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["30cfca3",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":988,"title":{},"body":{"changelog.html":{}}}],["32f4ce3",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":984,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":1084,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":1117,"title":{},"body":{"changelog.html":{}}}],["3c41375",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["3c5c5b9",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":1039,"title":{},"body":{"changelog.html":{}}}],["3f079fe",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1027,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":1029,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["4.2.0",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["4.3.0",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["4.3.1",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["4.3.10",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["4.3.11",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["4.3.12",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["4.3.2",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["4.3.3",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["4.3.4",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["4.3.5",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["4.3.6",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["4.3.7",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["4.3.8",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["4.3.9",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["4.4.0",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["4.4.2",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["4.4.3",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["4.4.4",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["4.4.5",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["4.4.6",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["4.5.0",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["4.5.1",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["4.5.2",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["4.5.3",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["4.5.4",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["4.5.5",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["4.5.6",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["4.6.0",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":994,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":1028,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["44ea67e",{"_index":1054,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":992,"title":{},"body":{"changelog.html":{}}}],["46892ac",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":1002,"title":{},"body":{"changelog.html":{}}}],["4a6bdbb",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":993,"title":{},"body":{"changelog.html":{}}}],["5.0.0",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":1012,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":1094,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":1074,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":1000,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":1061,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["6.0.1",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["6.1.0",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["6016f12",{"_index":1120,"title":{},"body":{"changelog.html":{}}}],["60844ec",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":1091,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["700fef1",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":1123,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":1112,"title":{},"body":{"changelog.html":{}}}],["7276cab",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":1089,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":1019,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":1080,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":1072,"title":{},"body":{"changelog.html":{}}}],["78bdeb5",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["7c96113",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":1023,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["7fbaa2a",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1184,"title":{},"body":{"index.html":{}}}],["81",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["87c556b",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["8850ddf",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["897b3fe",{"_index":1017,"title":{},"body":{"changelog.html":{}}}],["8e4cc53",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["9.0.0",{"_index":672,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["907f637",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["97",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["9831d36",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":1097,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":997,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":1096,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":781,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["accordingly",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["account",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":1250,"title":{},"body":{"license.html":{}}}],["active",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["activelongpressdrag",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["actually",{"_index":991,"title":{},"body":{"changelog.html":{}}}],["ad50f0e",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":702,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addclass",{"_index":60,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["addclass(this.renderer",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["added",{"_index":557,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["adjust",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":1270,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["along",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["alternatives",{"_index":1163,"title":{},"body":{"index.html":{}}}],["always",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["and/or",{"_index":1218,"title":{},"body":{"license.html":{}}}],["angular",{"_index":571,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["angular/core",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":1260,"title":{},"body":{"properties.html":{}}}],["angulars",{"_index":1050,"title":{},"body":{"changelog.html":{}}}],["any).eventlistenersubscriptions[type",{"_index":480,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["anymore",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["api",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":1150,"title":{},"body":{"index.html":{}}}],["append",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["applied",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["apply",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["apps",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":1254,"title":{},"body":{"license.html":{}}}],["assignment",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":1207,"title":{},"body":{"license.html":{}}}],["attribute",{"_index":1157,"title":{},"body":{"index.html":{}}}],["author",{"_index":1268,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1243,"title":{},"body":{"license.html":{}}}],["auto",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["automatic",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["automatically",{"_index":976,"title":{},"body":{"changelog.html":{}}}],["autoscroll",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["autoscroller",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{}}}],["awesome",{"_index":1170,"title":{},"body":{"index.html":{}}}],["axis",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["back",{"_index":1070,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":1046,"title":{},"body":{"changelog.html":{}}}],["bebd925",{"_index":1047,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["behaviour",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["being",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["boolean",{"_index":65,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["bottom",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["bounding",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["breaking",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1257,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":1263,"title":{},"body":{"properties.html":{}}}],["build",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["building",{"_index":999,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["bundled",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1195,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":1119,"title":{},"body":{"changelog.html":{}}}],["c9b28a5",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["ca83a33",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":178,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["called",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["calledcount",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancel",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.complete",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.pipe",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancelled",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["candrag",{"_index":412,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cases",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["caused",{"_index":1077,"title":{},"body":{"changelog.html":{}}}],["cb7cf2e",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["cc52856",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["cdk",{"_index":1172,"title":{},"body":{"index.html":{}}}],["cf1bc61",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["cfff617",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["chain",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["change",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":1004,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":663,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["changes.dragaxis",{"_index":404,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["changing",{"_index":944,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":1202,"title":{},"body":{"license.html":{}}}],["checkeventlisteners",{"_index":411,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["checking",{"_index":1169,"title":{},"body":{"index.html":{}}}],["child",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["claim",{"_index":1246,"title":{},"body":{"license.html":{}}}],["class",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["classes",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["click",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["clicked",{"_index":1053,"title":{},"body":{"changelog.html":{}}}],["clicking",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["clientrect",{"_index":547,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["clientx",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["clienty",{"_index":80,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.appendchild(node",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.innerhtml",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.parentelement!.removechild(clone",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cloned",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["commit",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["commonjs",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["compilation",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":614,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["completely",{"_index":1082,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":1110,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["conditions",{"_index":1225,"title":{},"body":{"license.html":{}}}],["config",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["configured",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":1255,"title":{},"body":{"license.html":{}}}],["console.log('element",{"_index":1155,"title":{},"body":{"index.html":{}}}],["const",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["container",{"_index":647,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["container.directive",{"_index":59,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["container.directive.ts",{"_index":642,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container.directive.ts:15",{"_index":653,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["containerhashorizontalscroll",{"_index":521,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["containerhasverticalscroll",{"_index":524,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contents",{"_index":945,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contextmenu",{"_index":453,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contextmenulistener",{"_index":451,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contextmenulistener.unsubscribe",{"_index":464,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["continually",{"_index":1190,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1251,"title":{},"body":{"license.html":{}}}],["control",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["convert",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["coordinates",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["copies",{"_index":1220,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1205,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1194,"title":{},"body":{"license.html":{}}}],["corepack",{"_index":1179,"title":{},"body":{"index.html":{}}}],["correct",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["create",{"_index":1037,"title":{},"body":{"changelog.html":{}}}],["created",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["css",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["current",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["currentdrag",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.complete",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.next",{"_index":401,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragdata",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragevent",{"_index":582,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["currentdragsubscription",{"_index":574,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["cursor",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["custom",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["customised",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":985,"title":{},"body":{"changelog.html":{}}}],["d044523",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["d233788",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":1114,"title":{},"body":{"changelog.html":{}}}],["d3eecde",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":1051,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":987,"title":{},"body":{"changelog.html":{}}}],["dabc4ae",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1247,"title":{},"body":{"license.html":{}}}],["data",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["date.now",{"_index":448,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dc0f863",{"_index":1034,"title":{},"body":{"changelog.html":{}}}],["dd3e89e",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1209,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1256,"title":{},"body":{"license.html":{}}}],["default",{"_index":132,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["defined",{"_index":623,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["delay",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["delete",{"_index":441,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["delta",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["deltascroll",{"_index":498,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.left",{"_index":503,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.top",{"_index":505,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltatotal",{"_index":506,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltax",{"_index":501,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltay",{"_index":504,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["demo",{"_index":1139,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":1153,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":1041,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["deregister",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllistener",{"_index":580,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["description",{"_index":643,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"properties.html":{}}}],["destroy",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["destroyed",{"_index":1111,"title":{},"body":{"changelog.html":{}}}],["destroying",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":1042,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["development",{"_index":1144,"title":{},"body":{"index.html":{}}}],["device",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["devices",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["didn't",{"_index":1062,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":610,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dimensions",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["directive",{"_index":17,"title":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["directives",{"_index":618,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{},"overview.html":{}}}],["directly",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["directory",{"_index":1181,"title":{},"body":{"index.html":{}}}],["disable",{"_index":569,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["disabled",{"_index":1087,"title":{},"body":{"changelog.html":{}}}],["disablescroll",{"_index":516,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dispose",{"_index":1108,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchanged",{"_index":544,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["distribute",{"_index":1216,"title":{},"body":{"license.html":{}}}],["document",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["documentation",{"_index":1143,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["doing",{"_index":598,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dom",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":736,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dont",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["drag$.pipe",{"_index":584,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["drag$.subscribe",{"_index":613,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragactiveclass",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["draganddropmodule",{"_index":530,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["dragaxis",{"_index":64,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragaxix",{"_index":1115,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["dragcancelled",{"_index":73,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcomplete",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcontainer",{"_index":1060,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragcursor=\"move",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragend(event",{"_index":1154,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended$.subscribe",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragendevent",{"_index":72,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragenter",{"_index":563,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragevent",{"_index":540,"title":{"interfaces/DragEvent.html":{}},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["draggable",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.directive",{"_index":538,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirective",{"_index":93,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["draggablehelper",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["draggablescrollcontainerdirective",{"_index":57,"title":{"directives/DraggableScrollContainerDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragged",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["dragging",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragleave",{"_index":565,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragmoveevent",{"_index":71,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragover",{"_index":567,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragoveractive",{"_index":593,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragoverclass",{"_index":558,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragpointerdownevent",{"_index":67,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drags",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragsnapgrid",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstart",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstarted",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstarted$.subscribe",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstartevent",{"_index":69,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drop",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["drop.module.ts",{"_index":533,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["dropevent",{"_index":542,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppable",{"_index":701,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["droppable#readme",{"_index":1262,"title":{},"body":{"properties.html":{}}}],["droppable.directive",{"_index":539,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.git",{"_index":1267,"title":{},"body":{"properties.html":{}}}],["droppable.js",{"_index":1006,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.js",{"_index":1008,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":1007,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":1005,"title":{},"body":{"changelog.html":{}}}],["droppable/docs",{"_index":1162,"title":{},"body":{"index.html":{}}}],["droppable/issues",{"_index":1264,"title":{},"body":{"properties.html":{}}}],["droppable/issues/61",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["droppable/src/lib/drag",{"_index":532,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/draggable",{"_index":641,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:104",{"_index":629,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:109",{"_index":626,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:114",{"_index":628,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:119",{"_index":630,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:124",{"_index":633,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:129",{"_index":635,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:134",{"_index":627,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:139",{"_index":625,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:144",{"_index":631,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:149",{"_index":632,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:154",{"_index":634,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:159",{"_index":624,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:174",{"_index":638,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:181",{"_index":639,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:186",{"_index":640,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:191",{"_index":637,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:196",{"_index":636,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts",{"_index":541,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/droppable.directive.ts:61",{"_index":656,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:66",{"_index":655,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:71",{"_index":657,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:76",{"_index":658,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:81",{"_index":659,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:86",{"_index":660,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:91",{"_index":661,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:93",{"_index":662,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirective",{"_index":535,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["droppableelement",{"_index":577,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.rect",{"_index":585,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":586,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.updatecache",{"_index":581,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppablethen",{"_index":1149,"title":{},"body":{"index.html":{}}}],["dropped",{"_index":560,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["droppeddata",{"_index":1152,"title":{},"body":{"index.html":{}}}],["dropping",{"_index":1090,"title":{},"body":{"changelog.html":{}}}],["duplicate",{"_index":1076,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":510,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e.g",{"_index":650,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["e.preventdefault",{"_index":455,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e0128e5",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["edge",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["ee94dc5",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1122,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["elementref",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["elements",{"_index":648,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["emit",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["emitted",{"_index":1088,"title":{},"body":{"changelog.html":{}}}],["enable",{"_index":791,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["enablescroll",{"_index":513,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["end",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":1098,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1175,"title":{},"body":{"index.html":{}}}],["error",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["errors",{"_index":1079,"title":{},"body":{"changelog.html":{}}}],["eslint",{"_index":568,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["eslint/no",{"_index":572,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["even",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.button",{"_index":431,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.canceldrag$.emit",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clientx",{"_index":470,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clienty",{"_index":471,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clientx",{"_index":438,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clienty",{"_index":439,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clientx",{"_index":466,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clienty",{"_index":467,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.x",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["event.y",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["eventemitter",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["eventlistenersubscriptions",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["events",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["events:none",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["eventtarget",{"_index":553,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["example",{"_index":651,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"index.html":{}}}],["export",{"_index":63,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["exported",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["exports",{"_index":536,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["expose",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1234,"title":{},"body":{"license.html":{}}}],["extends",{"_index":68,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["f110c8e",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["f29b424",{"_index":1105,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["f6a5cde",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["f936805",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["f98f586",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["fb75711",{"_index":1068,"title":{},"body":{"changelog.html":{}}}],["fe9bd5e",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":1167,"title":{},"body":{"index.html":{}}}],["features",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["files",{"_index":1208,"title":{},"body":{"license.html":{}}}],["filter",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["filter(([didoverlap",{"_index":609,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["filter(([previous",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["filter((node",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["find",{"_index":1158,"title":{},"body":{"index.html":{}}}],["fire",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":1022,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":1239,"title":{},"body":{"license.html":{}}}],["fix",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["fixed",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["fixes",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":1224,"title":{},"body":{"license.html":{}}}],["foreach((node",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["forroot",{"_index":1057,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":1201,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["function",{"_index":545,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1132,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1223,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1160,"title":{},"body":{"index.html":{}}}],["getscrollelement",{"_index":487,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getscrollposition",{"_index":489,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getting",{"_index":239,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghost",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostdragenabled",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelement",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementappendto",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreated",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreatedevent",{"_index":87,"title":{"interfaces/GhostElementCreatedEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementtemplate",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["git+https://github.com/mattlewis92/angular",{"_index":1266,"title":{},"body":{"properties.html":{}}}],["glitch",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["globaldragstyle",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["granted",{"_index":1200,"title":{},"body":{"license.html":{}}}],["grid",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["grids",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hacks",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["hascontainerscrollbar",{"_index":445,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["haseventlisteners",{"_index":413,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hasscrollbar",{"_index":519,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["height",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["helper",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["helper.provider",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["here",{"_index":1151,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1199,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["higher",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["highlighted",{"_index":1021,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1244,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1261,"title":{},"body":{"properties.html":{}}}],["hover",{"_index":1093,"title":{},"body":{"changelog.html":{}}}],["hovering",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["html",{"_index":654,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["htmlelement",{"_index":89,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["htmlstyleelement",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"properties.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":1140,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/dom",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["icon",{"_index":1092,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":518,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["immediately",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1125,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":1063,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["implied",{"_index":1235,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["imports",{"_index":534,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["improvements",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1228,"title":{},"body":{"license.html":{}}}],["including",{"_index":1212,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject(document",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inject(draggablehelper",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject(draggablescrollcontainerdirective",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject(ngzone",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject(renderer2",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject(viewcontainerref",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inject>(elementref",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["input",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["inputs",{"_index":620,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["inserted",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inside",{"_index":649,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["insider",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":1147,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1142,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["instead",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["interaction",{"_index":1113,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"overview.html":{}}}],["ios",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["iscoordinatewithinrectangle",{"_index":546,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":1134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdragactivated",{"_index":444,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["isdropallowed",{"_index":589,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["isn't",{"_index":644,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["istanbul",{"_index":517,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["iswithinelement",{"_index":588,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["item",{"_index":756,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ivy",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":483,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["keywords",{"_index":1259,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1233,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":1036,"title":{},"body":{"changelog.html":{}}}],["leave",{"_index":1099,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["lettable",{"_index":995,"title":{},"body":{"changelog.html":{}}}],["lewis",{"_index":1197,"title":{},"body":{"license.html":{},"properties.html":{}}}],["liability",{"_index":1248,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1245,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1171,"title":{},"body":{"index.html":{}}}],["library",{"_index":761,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["licence",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1145,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["limitation",{"_index":1213,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1236,"title":{},"body":{"license.html":{}}}],["line",{"_index":570,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["listener",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["listeners",{"_index":1038,"title":{},"body":{"changelog.html":{}}}],["literal",{"_index":622,"title":{},"body":{"directives/DraggableDirective.html":{},"interfaces/ValidateDragParams.html":{}}}],["local",{"_index":1180,"title":{},"body":{"index.html":{}}}],["location",{"_index":551,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["locked",{"_index":1116,"title":{},"body":{"changelog.html":{}}}],["long",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["longpressconfig",{"_index":507,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["longpressconfig.delay",{"_index":511,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["longpressconfig.delta",{"_index":508,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["loosen",{"_index":1045,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":1032,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["map(([pointermoveevent",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(([previous",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((calledcount",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((movedata",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((value",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["margin",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["matching",{"_index":528,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.abs",{"_index":502,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.left",{"_index":500,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.top",{"_index":499,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformx",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformy",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["matt",{"_index":1196,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mattlewis92/dom",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{}}}],["maxspeed",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["merchantability",{"_index":1238,"title":{},"body":{"license.html":{}}}],["merge",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["merge(dragcomplete",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((dragenddata",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((pointerdownevent",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["metadata",{"_index":619,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":949,"title":{},"body":{"changelog.html":{}}}],["migrate",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["milliseconds",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mimic",{"_index":1101,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":1131,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":1193,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":1215,"title":{},"body":{"license.html":{}}}],["module",{"_index":529,"title":{"modules/DragAndDropModule.html":{}},"body":{"changelog.html":{},"overview.html":{}}}],["modules",{"_index":531,"title":{"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"modules.html":{}}}],["mouse",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["mousedown",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mouseenter",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseevent",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseleave",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemove",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent",{"_index":433,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clientx",{"_index":435,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clienty",{"_index":436,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseup",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["move",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["moved",{"_index":566,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["movedata",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrollleft",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrolltop",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformx",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformy",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movescrollposition",{"_index":497,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["moz",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ms",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["multiple",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["mwldraggable",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mwldraggablescrollcontainer",{"_index":652,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwldroppable",{"_index":556,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["name",{"_index":1136,"title":{},"body":{"miscellaneous/functions.html":{}}}],["native",{"_index":573,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["need",{"_index":727,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["needed",{"_index":1165,"title":{},"body":{"index.html":{}}}],["never",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["next",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.x",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.y",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ng",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["ng4",{"_index":1026,"title":{},"body":{"changelog.html":{}}}],["ngmodule",{"_index":537,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":403,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ngondestroy",{"_index":405,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["ngoninit",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["ngzone",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["node",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["node.js",{"_index":1176,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["none",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["noninfringement",{"_index":1242,"title":{},"body":{"license.html":{}}}],["notable",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":1156,"title":{},"body":{"index.html":{}}}],["notice",{"_index":1226,"title":{},"body":{"license.html":{}}}],["now",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":873,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["o",{"_index":400,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object",{"_index":95,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(styles).foreach((key",{"_index":484,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach((type",{"_index":479,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":414,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observable",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["observable((observer",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observables",{"_index":1109,"title":{},"body":{"changelog.html":{}}}],["observer.next(e",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["obtaining",{"_index":1204,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":552,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["old",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":955,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchanges",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ondestroy",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["one",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["oninit",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["onmousedown(event",{"_index":430,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseenter",{"_index":472,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseleave",{"_index":474,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseup(event",{"_index":440,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchend(event",{"_index":468,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchstart(event",{"_index":443,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["operators",{"_index":996,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["original",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["otherwise",{"_index":1253,"title":{},"body":{"license.html":{}}}],["out",{"_index":896,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["output",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["outputs",{"_index":621,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["outside",{"_index":1049,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["overflow",{"_index":514,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["overlapping",{"_index":562,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps",{"_index":583,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps$.pipe(distinctuntilchanged",{"_index":592,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps$.pipe(filter((overlapsnow",{"_index":605,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapschanged",{"_index":591,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapsnow",{"_index":601,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapsnow)).subscribe",{"_index":606,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overview",{"_index":1258,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["package",{"_index":680,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":998,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pairwise",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["parameters",{"_index":1135,"title":{},"body":{"miscellaneous/functions.html":{}}}],["params",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["parent",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["part",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["partial",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":1240,"title":{},"body":{"license.html":{}}}],["pass",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["passive",{"_index":457,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["path",{"_index":1003,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":841,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["performance",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1198,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1221,"title":{},"body":{"license.html":{}}}],["person",{"_index":1203,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1222,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["pipe(filter((overlapsnow",{"_index":600,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["pipe(share",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pipe(take(1",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["place",{"_index":646,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["pnpm",{"_index":1178,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["pointerdown",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clientx",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clienty",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.event.stoppropagation",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe(pairwise",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerevent",{"_index":78,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerevents",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pipe(take(1",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pipe(takelast(1",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clientx",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clienty",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.event.target",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerup",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["port",{"_index":1183,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1230,"title":{},"body":{"license.html":{}}}],["position",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["positioned",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["positioning",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["positions",{"_index":1071,"title":{},"body":{"changelog.html":{}}}],["powered",{"_index":1146,"title":{},"body":{"index.html":{}}}],["prepare",{"_index":1174,"title":{},"body":{"index.html":{}}}],["preserve",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["pressed",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["prevent",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["previous",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.x",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.y",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["private",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["project",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.ts",{"_index":1271,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.ts",{"_index":1133,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["propagating",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"properties.html":{}}}],["prototype",{"_index":1011,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1231,"title":{},"body":{"license.html":{}}}],["provider",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["public",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":708,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["purpose",{"_index":1241,"title":{},"body":{"license.html":{}}}],["readme",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["recalculate",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["recommend",{"_index":1168,"title":{},"body":{"index.html":{}}}],["recompute",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.left",{"_index":548,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["rect.left}px",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.top",{"_index":549,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["rect.top}px",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.width}px",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rectangle",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":1013,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1191,"title":{},"body":{"index.html":{}}}],["releaselicense",{"_index":1192,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1185,"title":{},"body":{"index.html":{}}}],["remove",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["removeclass",{"_index":61,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["removeclass(this.renderer",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["removed",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":1095,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":1103,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["renderer2",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["rendering",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["repliate",{"_index":1001,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":1182,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1265,"title":{},"body":{"properties.html":{}}}],["requestanimationframe",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["required",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":1065,"title":{},"body":{"changelog.html":{}}}],["restore",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":1211,"title":{},"body":{"license.html":{}}}],["results",{"_index":527,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["returns",{"_index":1137,"title":{},"body":{"miscellaneous/functions.html":{}}}],["revert",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rights",{"_index":1214,"title":{},"body":{"license.html":{}}}],["round",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1048,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["rxjs/operators",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["safari",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["same",{"_index":1085,"title":{},"body":{"changelog.html":{}}}],["scroll",{"_index":58,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["scroll.left",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scroll.top",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollable",{"_index":645,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["scrollcontainer",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["scrollcontainer.clientheight",{"_index":526,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.clientwidth",{"_index":523,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.scrollheight",{"_index":525,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.scrollwidth",{"_index":522,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainerrect",{"_index":579,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["scrollcontainerscroll",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolled",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["scroller",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scrolling",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scrollleft",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolltop",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollwhenoutside",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollx",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolly",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["seamless",{"_index":1030,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":595,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["select",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selected",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selection",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["sell",{"_index":1219,"title":{},"body":{"license.html":{}}}],["server",{"_index":805,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["set",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["setcursor(value",{"_index":476,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setelementstyles",{"_index":481,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setting",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1227,"title":{},"body":{"license.html":{}}}],["share",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shouldbegindrag",{"_index":496,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["show",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["showoriginalelementwhiledragging",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shows",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["side",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["simplechanges",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["skyhook",{"_index":1173,"title":{},"body":{"index.html":{}}}],["snap",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["snapgrid",{"_index":66,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["snapping",{"_index":1166,"title":{},"body":{"index.html":{}}}],["software",{"_index":1206,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["sourcemaps",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["stackblitz",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["standalone",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["standard",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":800,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["started",{"_index":176,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["starting",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["starts",{"_index":561,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["startscrollposition",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.left",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.top",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith(startscrollposition",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stop",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stops",{"_index":564,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["string",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["style",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["styled",{"_index":1083,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":482,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["styles[key",{"_index":486,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subject",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["sublicense",{"_index":1217,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["subscribe((e",{"_index":454,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscribe((touchmoveevent",{"_index":458,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscription",{"_index":543,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["substantial",{"_index":1229,"title":{},"body":{"license.html":{}}}],["support",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["system.js",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":550,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["table",{"_index":1141,"title":{},"body":{"index.html":{}}}],["take",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["take(1",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takelast",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil(dragcomplete",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["target",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["template",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["templateref",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["test",{"_index":1188,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1189,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1187,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1186,"title":{},"body":{"index.html":{}}}],["text",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["text/css",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["there's",{"_index":596,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.autoscroll",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.candrag",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.checkeventlisteners",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.currentdragsubscription",{"_index":575,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.currentdragsubscription.unsubscribe",{"_index":617,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.destroy",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.destroy$.next",{"_index":410,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.disablescroll",{"_index":512,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document",{"_index":452,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.body",{"_index":488,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.body.style.cursor",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.defaultview",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.documentelement.scrollleft",{"_index":495,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.documentelement.scrolltop",{"_index":493,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.appendchild(globaldragstyle",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.removechild(globaldragstyle",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragactiveclass",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragaxis.x",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragaxis.y",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragcursor",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragend.next",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragend.observers.length",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragenter.next(currentdragevent",{"_index":604,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragenter.observers.length",{"_index":603,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.draggablehelper.currentdrag.subscribe",{"_index":576,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragging.next",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragging.observers.length",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragleave.next(currentdragevent",{"_index":612,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragleave.observers.length",{"_index":611,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragover.next(currentdragevent",{"_index":608,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragover.observers.length",{"_index":607,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragoverclass",{"_index":602,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragpointerdown.next",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragpointerdown.observers.length",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.x",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.y",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragstart.next",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragstart.observers.length",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.drop.next(currentdragevent",{"_index":616,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.drop.observers.length",{"_index":615,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dropdata",{"_index":402,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.element.nativeelement",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.clonenode",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.element.nativeelement.nextsibling",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.parentnode!.insertbefore",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.enablescroll",{"_index":469,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":416,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseenter",{"_index":426,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseleave",{"_index":428,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousemove",{"_index":432,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":419,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":425,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":423,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchmove",{"_index":450,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":421,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollelement",{"_index":520,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollposition",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostdragenabled",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelement",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto.appendchild(clone",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementcreated.emit",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementcreated.observers.length",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementtemplate",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.hasscrollbar",{"_index":449,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmousedown(event",{"_index":418,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseenter",{"_index":427,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseleave",{"_index":429,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseup(event",{"_index":420,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchend(event",{"_index":424,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchstart(event",{"_index":422,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.complete",{"_index":407,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.next",{"_index":437,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.pipe",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.complete",{"_index":408,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.next",{"_index":434,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.complete",{"_index":409,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.next",{"_index":442,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.appendchild",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createelement('style",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createtext",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.listen",{"_index":417,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.renderer.listen(scrollcontainer",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setattribute(globaldragstyle",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(element",{"_index":485,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.document.body",{"_index":515,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.element.nativeelement",{"_index":477,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer",{"_index":235,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":587,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":491,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":490,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller.destroy",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor",{"_index":475,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor(this.dragcursor",{"_index":473,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(clone",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(this.ghostelement",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.shouldbegindrag",{"_index":459,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.showoriginalelementwhiledragging",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerbegin",{"_index":447,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerend",{"_index":509,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.touchstartlongpress",{"_index":446,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.unsubscribeeventlisteners",{"_index":406,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrag",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrop",{"_index":590,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.vcr.createembeddedview",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.zone.run",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.zone.runoutsideangular",{"_index":415,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["through",{"_index":1148,"title":{},"body":{"index.html":{}}}],["throw",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":559,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["timelongpress",{"_index":84,"title":{"interfaces/TimeLongPress.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerbegin",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerend",{"_index":86,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["todo",{"_index":594,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["top",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["tort",{"_index":1252,"title":{},"body":{"license.html":{}}}],["touch",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["touchcancel",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchend",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchevent",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touching",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmove",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent",{"_index":460,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.preventdefault",{"_index":461,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":462,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clienty",{"_index":463,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmovelistener",{"_index":456,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmovelistener.unsubscribe",{"_index":465,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstart",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstartlongpress",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstartlongpress]=\"{delay",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["transform",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["transformx",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy}px",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["translate3d(${transformx}px",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["true",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["tslib",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1269,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["universal",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["unless",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisteners",{"_index":478,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["until",{"_index":1100,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["update",{"_index":1010,"title":{},"body":{"changelog.html":{}}}],["updatecache",{"_index":578,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["upgrade",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["useful",{"_index":1159,"title":{},"body":{"index.html":{}}}],["user",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["users",{"_index":1009,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["util",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["validate",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":76,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedragparams",{"_index":74,"title":{"interfaces/ValidateDragParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["validatedrop",{"_index":555,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedropparams",{"_index":554,"title":{"interfaces/ValidateDropParams.html":{}},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["value",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["values",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["vcr",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["version",{"_index":669,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["via",{"_index":599,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["view",{"_index":897,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewed",{"_index":1161,"title":{},"body":{"index.html":{}}}],["viewref",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewref.rootnodes",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["visibility",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["void",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["wait",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["warnings",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":1237,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1232,"title":{},"body":{"license.html":{}}}],["way",{"_index":597,"title":{},"body":{"interfaces/DragEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["webkit",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["whether",{"_index":1249,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":882,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["width",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["willchange",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":494,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window.pageyoffset",{"_index":492,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["without",{"_index":1210,"title":{},"body":{"license.html":{}}}],["work",{"_index":1033,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":1102,"title":{},"body":{"changelog.html":{}}}],["worse",{"_index":1078,"title":{},"body":{"changelog.html":{}}}],["wrote",{"_index":1164,"title":{},"body":{"index.html":{}}}],["x",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["y",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["yourself",{"_index":978,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n    Modules\n    DragAndDropModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DraggableDirective\n                        \n                        \n                            DraggableScrollContainerDirective\n                        \n                        \n                            DroppableDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DraggableDirective\n                        \n                        \n                            DraggableScrollContainerDirective\n                        \n                        \n                            DroppableDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  imports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective,\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective,\n  ],\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dragCancelled\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dragCancelled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEvent.html":{"url":"interfaces/DragEvent.html","title":"interface - DragEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DropEvent\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  inject,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect,\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  private element = inject>(ElementRef);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private renderer = inject(Renderer2);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          },\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect,\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect,\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          }),\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow),\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      },\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelDrag$\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggable]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoScroll\n                            \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                touchStartLongPress\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoScroll\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    margin: 20,\n  }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:159\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:139\n                            \n                        \n                \n                    \n                        The css class to apply when the element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                \n                \n                    \n                        Type :         DragAxis\n\n                    \n                \n                \n                    \n                        Default value : { x: true, y: true }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:109\n                            \n                        \n                \n                    \n                        The axis along which the element is draggable\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:134\n                            \n                        \n                \n                    \n                        The cursor to use when hovering over a draggable element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                \n                \n                    \n                        Type :         SnapGrid\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:114\n                            \n                        \n                \n                    \n                        Snap all drags to an x / y grid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:104\n                            \n                        \n                \n                    \n                        an object of data you can pass to the drop event\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:119\n                            \n                        \n                \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:144\n                            \n                        \n                \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:149\n                            \n                        \n                \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:124\n                            \n                        \n                \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        touchStartLongPress\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:154\n                            \n                        \n                \n                    \n                        Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                \n                \n                    \n                        Type :         ValidateDrag\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:129\n                            \n                        \n                \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:196\n                            \n                        \n                \n                    \n                        Called after the element is dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:191\n                            \n                        \n                \n                    \n                        Called when the element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:174\n                            \n                        \n                \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:181\n                            \n                        \n                \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:186\n                            \n                        \n                \n                    \n                        Called after the ghost element has been created\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableScrollContainerDirective.html":{"url":"directives/DraggableScrollContainerDirective.html","title":"directive - DraggableScrollContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DraggableScrollContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\nExample :\nDrag me!\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggableScrollContainer]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                elementRef\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, inject } from '@angular/core';\n\n/**\n * If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n * ```html\n  \n    Drag me!\n  \n  ```\n */\n@Directive({\n  selector: '[mwlDraggableScrollContainer]',\n})\nexport class DraggableScrollContainerDirective {\n  elementRef = inject>(ElementRef);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            dropData\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ClientX value of the mouse location where the drop occurred\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ClientY value of the mouse location where the drop occurred\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:     EventTarget\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventTarget\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The target of the event where the drop occurred\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  inject,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect,\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  private element = inject>(ElementRef);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private renderer = inject(Renderer2);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          },\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect,\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect,\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          }),\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow),\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      },\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDroppable]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                            \n                                validateDrop\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:66\n                            \n                        \n                \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:61\n                            \n                        \n                \n                    \n                        Added to the element when an element is dragged over it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrop\n                    \n                \n                \n                    \n                        Type :         ValidateDrop\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:71\n                            \n                        \n                \n                    \n                        Allow custom behaviour to control when the element is dropped\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:76\n                            \n                        \n                \n                    \n                        Called when a draggable element starts overlapping the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:81\n                            \n                        \n                \n                    \n                        Called when a draggable element stops overlapping the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:86\n                            \n                        \n                \n                    \n                        Called when a draggable element is moved over the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:91\n                            \n                        \n                \n                    \n                        Called when a draggable element is dropped on this element\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentDragSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:93\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  inject,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect,\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  private element = inject>(ElementRef);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private renderer = inject(Renderer2);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          },\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect,\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect,\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          }),\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow),\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      },\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GhostElementCreatedEvent.html":{"url":"interfaces/GhostElementCreatedEvent.html","title":"interface - GhostElementCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GhostElementCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientX\n                                        \n                                \n                                \n                                        \n                                            clientY\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            x\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimeLongPress.html":{"url":"interfaces/TimeLongPress.html","title":"interface - TimeLongPress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimeLongPress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            timerBegin\n                                        \n                                \n                                \n                                        \n                                            timerEnd\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        timerBegin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timerBegin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerEnd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timerEnd:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDragParams.html":{"url":"interfaces/ValidateDragParams.html","title":"interface - ValidateDragParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateDragParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            transform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transform:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  DOCUMENT,\n  inject,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\n\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  private element = inject>(ElementRef);\n  private renderer = inject(Renderer2);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private vcr = inject(ViewContainerRef);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n  private document = inject(DOCUMENT);\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement =\n          this.renderer.createElement('style');\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `),\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e),\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition()),\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        if (this.dragPointerDown.observers.length > 0) {\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n        }\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$,\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              }),\n          ),\n          takeUntil(dragComplete$),\n          share(),\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          if (this.dragStart.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragStart.next({ cancelDrag$ });\n            });\n          }\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            },\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true,\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden',\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling,\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate,\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            if (this.ghostElementCreated.observers.length > 0) {\n              this.zone.run(() => {\n                this.ghostElementCreated.emit({\n                  clientX: clientX - x,\n                  clientY: clientY - y,\n                  element: clone,\n                });\n              });\n            }\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                '',\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                })),\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            }),\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            if (this.dragEnd.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnd.next({ x, y, dragCancelled });\n              });\n            }\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share(),\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value]),\n      ),\n      pointerDragged$.pipe(pairwise()),\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next),\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          if (this.dragging.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragging.next({ x, y });\n            });\n          }\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        },\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          },\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          },\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          },\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (this.touchStartLongPress) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu',\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        },\n      ).subscribe((touchMoveEvent) => {\n        if (\n          this.touchStartLongPress &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition,\n          );\n        }\n        if (\n          !this.touchStartLongPress ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (this.touchStartLongPress) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string },\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number },\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX,\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY,\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress;\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        '',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden',\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDropParams.html":{"url":"interfaces/ValidateDropParams.html","title":"interface - ValidateDropParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateDropParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DropEvent\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  inject,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect,\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport interface DragEvent extends DropEvent {}\n\nexport interface ValidateDropParams extends DropEvent {}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native\n\n  currentDragSubscription: Subscription;\n\n  private element = inject>(ElementRef);\n  private draggableHelper = inject(DraggableHelper);\n  private zone = inject(NgZone);\n  private renderer = inject(Renderer2);\n  private scrollContainer = inject(DraggableScrollContainerDirective, {\n    optional: true,\n  });\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          },\n        );\n\n        let currentDragEvent: DragEvent;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragEvent = { clientX, clientY, dropData, target };\n            if (droppableElement.updateCache) {\n              droppableElement.rect =\n                this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect =\n                  this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect,\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target, dropData });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect,\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          }),\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragEnter.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragEnter.next(currentDragEvent);\n              });\n            }\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          if (this.dragOver.observers.length > 0) {\n            this.zone.run(() => {\n              this.dragOver.next(currentDragEvent);\n            });\n          }\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow),\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            if (this.dragLeave.observers.length > 0) {\n              this.zone.run(() => {\n                this.dragLeave.next(currentDragEvent);\n              });\n            }\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              if (this.drop.observers.length > 0) {\n                this.zone.run(() => {\n                  this.drop.next(currentDragEvent);\n                });\n              }\n            }\n          },\n        });\n      },\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n9.0.0 (2025-08-23)\n⚠ BREAKING CHANGES\n\nangular 20 or higher is now required to use this package\n\nFeatures\n\nconvert to standalone (8e4cc53)\n\nbuild\n\nupgrade to angular 20 (dabc4ae)\n\n8.0.0 (2022-12-11)\n⚠ BREAKING CHANGES\n\nangular 15 or higher is now required to use this package\n\nbuild\n\nupgrade to angular 15 (87c556b)\n\n7.0.0 (2022-08-02)\n⚠ BREAKING CHANGES\n\nangular 14 or higher is now required to use this package\n\nbuild\n\nupgrade to angular 14 (cc52856)\n\n6.1.0 (2022-04-19)\nFeatures\n\ndroppable: add clientX, clientY and target to all output events (#113) (0e8e0a8)\n\n6.0.1 (2022-04-12)\n6.0.0 (2021-12-11)\n⚠ BREAKING CHANGES\n\nangular 12 or higher is now required to use this package\n\nFeatures\n\npublish package in ivy partial compilation mode (2c37cc9)\n\n5.0.0 (2021-08-30)\n⚠ BREAKING CHANGES\n\nThe activeLongPressDrag and longPressConfig inputs have been removed on the mwlDraggableScrollContainer directive.\n\nTo migrate use [touchStartLongPress]=\"{delay: 300, delta: 30}\" on the mwlDraggable element instead.\n\nif you were using the UMD bundle @mattlewis92/dom-autoscroller will no longer be bundled inside it and you may need to adjust your system.js config accordingly\nangular 10 or higher is now required to use this package\n\nFeatures\n\nremove deprecated inputs on mwlDraggableScrollContainer directive (2766f33)\n\nbuild\n\ndon't bundle @mattlewis92/dom-autoscroller anymore (3c41375)\nupgrade to angular 10 (907f637)\n\n4.6.0 (2020-12-28)\nFeatures\n\nadd validateDrop to mwlDroppable directive (#111) (8850ddf)\n\n4.5.6 (2020-10-22)\nBug Fixes\n\nprevent error on drag end (4a6bdbb)\n\n4.5.5 (2020-10-20)\nBug Fixes\n\nensure dragging output is never called unless dragging an item (1661d72)\n\n4.5.4 (2020-09-12)\nBug Fixes\n\nupgrade dom auto scroller library to prevent commonjs warnings (3f079fe)\n\n4.5.3 (2020-07-09)\n4.5.2 (2020-07-09)\n4.5.1 (2020-06-19)\n4.5.0 (2020-06-17)\nFeatures\n\nallow auto scroll options to be configured (46892ac)\n\n4.4.6 (2020-05-29)\nBug Fixes\n\numd: use correct sourcemaps in umd bundle (30cfca3)\n\n4.4.5 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (2aff5f0)\n\n4.4.4 (2020-04-19)\nBug Fixes\n\nalways disable document scroll when dragging (7276cab)\n\n4.4.3 (2020-04-19)\nBug Fixes\n\ndisable text selection in safari (d044523)\n\n4.4.2 (2020-04-19)\nBug Fixes\n\nonly enable long press drag delay if inside a scrollable element (0a30e09)\nremove scroll glitch on touch devices when dragging (fe9bd5e)\n\n4.4.0 (2020-04-18)\nFeatures\n\nallow setting drag start delay on touch devices (c9b28a5)\n\nBug Fixes\n\ndisable text selection when dragging on ios safari (ca83a33)\n\n4.3.12 (2020-04-12)\nBug Fixes\n\nremove need for server side rendering hacks (7c96113)\n\n4.3.11 (2020-04-12)\nBug Fixes\n\nallow multiple dragActiveClass (60844ec)\nsupport multiple drag over and drag active classes (ad50f0e)\n\n4.3.10 (2020-03-01)\n4.3.9 (2020-03-01)\nBug Fixes\n\nonly allow dragging when using a left click (d3eecde)\n\n4.3.8 (2019-10-18)\n4.3.7 (2019-10-11)\nBug Fixes\n\nrevert change to ghost element positioning (e0128e5)\n\n4.3.6 (2019-10-11)\n4.3.5 (2019-10-08)\n4.3.4 (2019-10-08)\nBug Fixes\n\nrestore compatibility with angular 6 and 7 (f110c8e), closes #97\n\n4.3.3 (2019-10-07)\nBug Fixes\n\nallow angular 9 peer dependency (cb7cf2e)\n\n\n4.3.2 (2019-06-26)\nBug Fixes\n\nrestore compatibility with stackblitz (ee94dc5)\n\n\n4.3.1 (2019-06-05)\nBug Fixes\n\nrestore compatibility with angular universal (7fbaa2a)\n\n\n4.3.0 (2019-04-21)\nBug Fixes\n\nexpose ValidateDrag type (32f4ce3)\n\nFeatures\n\nexpose css transform on validate drag function (3c5c5b9)\nsupport auto scrolling when dragging (78bdeb5)\n\n\n4.2.0 (2019-03-17)\nFeatures\n\nexpose ghost element and starting mouse position on ghost element created event (d233788), closes #81 #85\n\n\n4.1.0 (2019-02-17)\nBug Fixes\n\nallow angular 8 peer dependency (f936805)\n\nFeatures\n\ndraggable-scroll-container: Added input activeLongPressDrag (#79) (f98f586), closes #78\n\n\n4.0.2 (2018-09-18)\nBug Fixes\n\ninclude readme and licence in npm (cfff617)\n\n\n4.0.1 (2018-09-01)\nBug Fixes\n\nallow draggable elements insider other draggable elements to be dragged (700fef1), closes #61\n\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\nThe dragStart $event.x and $event.y values were removed as these were always\n0\npointer-events:none is no longer automatically applied to elements while they are being dragged. To migrate use the dragActiveClass option and set this yourself with css\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @mattlewis92/dom-autoscroller : ^2.4.2\n        \n            tslib : ^2.4.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=20.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCoordinateWithinRectangle\n                        \n                    \n                \n            \n            \n                \nisCoordinateWithinRectangle(clientX: number, clientY: number, rect: ClientRect)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientX\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientY\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                rect\n                                            \n                                                        ClientRect\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 20.0+ drag and drop\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 20.0+\nInstallation\nInstall through npm:\nExample :npm install angular-draggable-droppableThen use it in your app like so:\nExample :import { Component, NgModule } from '@angular/core';\nimport { DraggableDirective, DroppableDirective } from 'angular-draggable-droppable';\n\n@Component({\n  selector: 'demo-app',\n  imports: [DraggableDirective, DroppableDirective],\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `,\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}Note: if draggable elements are inside a scrollable element then you will need to add mwlDraggableScrollContainer as an attribute to the scrollable container.\nYou may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nAlternatives\nI wrote this library because I needed drag and drop whilst snapping to a grid. If you don't need this feature then I recommend checking out one of these other awesome drag and drop libraries:\n\nAngular CDK drag and drop\nangular-skyhook\nng-drag-drop\n\nDevelopment\nPrepare your environment\n\nInstall Node.js (>=24.5.0)\nInstall pnpm: corepack enable\nInstall local dev dependencies: pnpm install while current directory is this repo\n\nDevelopment server\nRun pnpm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun pnpm test to run tests once or pnpm test:watch to continually run tests.\nRelease\nExample :pnpm releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 9.0.0\n        \n            Description : Drag and drop for angular 20.0+\n        \n            Keywords : angular2, angular, draggable, droppable, drag, drop\n        \n            Homepage : https://github.com/mattlewis92/angular-draggable-droppable#readme\n        \n            Bugs : https://github.com/mattlewis92/angular-draggable-droppable/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/mattlewis92/angular-draggable-droppable.git\n        \n            Author : Matt Lewis\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                        \n                            ValidateDrop   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ValidateDrag\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ValidateDrop\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
